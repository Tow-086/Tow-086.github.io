<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/08/03/test07/"/>
    <url>/2025/08/03/test07/</url>
    
    <content type="html"><![CDATA[<p><img src="/2025/08/03/test07/image-20250803215331608.png" alt="image-20250803215331608"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test06</title>
    <link href="/2025/08/03/test06/"/>
    <url>/2025/08/03/test06/</url>
    
    <content type="html"><![CDATA[<p><img src="/2025/08/03/test06/image-20250803203114086.png" alt="image-20250803203114086"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test05</title>
    <link href="/2025/08/03/test05/"/>
    <url>/2025/08/03/test05/</url>
    
    <content type="html"><![CDATA[<p><img src="/2025/08/03/test05/image-20250803195555209.png" alt="image-20250803195555209"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test04</title>
    <link href="/2025/08/03/test04/"/>
    <url>/2025/08/03/test04/</url>
    
    <content type="html"><![CDATA[<p><img src="/2025/08/03/test04/image-20250803193756183.png" alt="image-20250803193756183"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test03</title>
    <link href="/2025/08/03/test03/"/>
    <url>/2025/08/03/test03/</url>
    
    <content type="html"><![CDATA[<p><img src="/2025/08/03/test03/image-20250803192042144.png" alt="image-20250803192042144"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test02</title>
    <link href="/2025/08/03/test02/"/>
    <url>/2025/08/03/test02/</url>
    
    <content type="html"><![CDATA[<p><img src="/2025/08/03/test02/image-20250803190758046.png" alt="image-20250803190758046"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何在博客上传图片</title>
    <link href="/2025/08/03/test01/"/>
    <url>/2025/08/03/test01/</url>
    
    <content type="html"><![CDATA[<p><img src="/2025/08/03/test01/image-20250803185505478.png" alt="image-20250803185505478"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2024BaseCTF（re）</title>
    <link href="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/"/>
    <url>/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="2024basectf（re）"><a href="#2024basectf（re）" class="headerlink" title="2024basectf（re）"></a>2024basectf（re）</h1><h2 id="1-You-are-good-at-IDA"><a href="#1-You-are-good-at-IDA" class="headerlink" title="1.You are good at IDA"></a>1.You are good at IDA</h2><p>![](屏幕截图 2025-04-15 131137.png)</p><p>用IDA打开文件，找到main先f5一下，然后再发现它让你shift+f12，所以试试，然后得到：</p><p>![](屏幕截图 2025-04-15 130555.png)</p><p>发现this is the second part，点击它，然后R之后，发现没有能R的东西，但是我们发现：<code>DATA XREF:</code>显示了哪个函数使用了这个字符串，双击可以跳转到那个函数，然后R。</p><p>![](屏幕截图 2025-04-15 132125.png)</p><p>然后，发现他告诉你最后一个在Interesting，找到它然后R</p><p>![](屏幕截图 2025-04-15 131604.png)</p><p>得到flag：BaseCTF{Y0u_4Re_900d_47_id4}</p><h2 id="2-UPX-mini"><a href="#2-UPX-mini" class="headerlink" title="2.UPX mini"></a>2.UPX mini</h2><p>upx脱壳然后在ida里f5（反编译），然后发现这样：   &#x2F;&#x2F;至于为什么要先脱壳，那是因为，我搜到的用upx就是先脱壳，哦，忘了脱壳图片了，现在贴吧：</p><p>![](屏幕截图 2025-04-15 134839.png)</p><p>![](屏幕截图 2025-04-15 134542.png)</p><p>然后发现了一个base64格式的数据，&#x3D;&#x3D;填充了，直接解码：</p><p>![](屏幕截图 2025-04-15 134623.png)</p><p>得出flag：BaseCTF{Hav3_@_g0od_t1m3!!!}</p><h2 id="3-ez-maze-还没会-（现在会了）"><a href="#3-ez-maze-还没会-（现在会了）" class="headerlink" title="3.ez_maze(还没会)（现在会了）"></a>3.ez_maze(还没会)（现在会了）</h2><p>f5:然后发现自己不会，问完ai，继续看wp：</p><p>![](屏幕截图 2025-04-15 210900.png)</p><p>然后这是c语言代码，开始读代码，u1s1有点看不懂，所以我问ai了，这是一个15*15的迷宫，然后我们shift+e导出数据，导出了一个文件export_results.txt。是迷宫的数据，hex的ASCII文件。然后解码定行长整理后成这样：</p><p>这是工具：<a href="https://www.toolhelper.cn/Char/TextLineSameLength">文本行定长 - 锤子在线工具</a></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs crystal">x <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><br>&amp; &amp; &amp; &amp; &amp; &amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><br>&amp; <span class="hljs-variable">$ </span>&amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; &amp; &amp; &amp; &amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><br>&amp; <span class="hljs-variable">$ </span>&amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; &amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><br>&amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; &amp; &amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><br>&amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; <span class="hljs-variable">$ </span>&amp; &amp; <span class="hljs-variable">$ </span>&amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><br>&amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; <span class="hljs-variable">$ </span>&amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; &amp; &amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><br>&amp; &amp; &amp; &amp; &amp; <span class="hljs-variable">$ </span>&amp; &amp; &amp; &amp; <span class="hljs-variable">$ </span>&amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><br><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; &amp; &amp; &amp; &amp; &amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><br><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><br><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; &amp; &amp; &amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; &amp; &amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><br><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; &amp; &amp; &amp; &amp; &amp; &amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><br><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><br><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; <span class="hljs-variable">$ </span>&amp; <span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><br><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span><span class="hljs-variable">$ </span>&amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; y <br></code></pre></td></tr></table></figure><p>然后找到最短路径：sssssssddddwwwddsssssssdddsssddddd</p><p>之后发现一点思路没有，然后问了问Beck_，好像是因为自己没找到，然后再找找发现了：</p><p>![](屏幕截图 2025-05-08 202140.png)</p><p>找到了他说让我md5一下（别骂我，我刚开始学re），这是工具<a href="https://www.sojson.com/md5/">MD5在线加密&#x2F;解密&#x2F;破解—MD5在线</a></p><p>解密出：131b7d6e60e8a34cb01801ae8de07efe</p><p>得出flag:BaseCTF{131b7d6e60e8a34cb01801ae8de07efe}</p><h2 id="4-BasePlus"><a href="#4-BasePlus" class="headerlink" title="4.BasePlus"></a>4.BasePlus</h2><p>先看函数都用了啥：</p><p>![](屏幕截图 2025-05-09 020848.png)</p><p>布拉布拉说了一堆，大概意思就是让我们根据密文解密解出flag，至于为什么是密文呢？因为我是学密码的大概能看出是密文，然后我直接base了，然后乱码，额，开看wp</p><p>发现她的encode函数：</p><p>![](屏幕截图 2025-05-09 020836.png)</p><p>对base64的结果进行了异或0xE，哦然后就简单了，我们直接先对密文异或回来，然后base64。base64失败，看到了他给的码表，以码表格式base64成功得出flag：</p><p><a href="https://cyberchef.org/#recipe=To_Base64('A-Za-z0-9%2B/%3D'/disabled)XOR({'option':'Hex','string':'0xE'},'Standard',false)From_Base64('/128GhIoPQROSTeUbADfgHijKLM%2Bn0pFWXY456xyzB7%3D39VaqrstJklmNuZvwcdEC',true,false)&input=bHZmekJpWmlPdzc8bGhGOGRET2ZFYm1JXWlAYmRjWmZFY156PmFEIQ">To Base64, XOR, From Base64 - CyberChef</a></p><p>![](屏幕截图 2025-05-09 021632.png)</p><p>BaseCTF{BA5e_DEcoD1N6_sEcr3t}</p><h2 id="5-ez-xor"><a href="#5-ez-xor" class="headerlink" title="5.ez_xor"></a>5.ez_xor</h2><p>一个异或解密</p><p>秘钥：</p><ul><li><code>v4 = 7499608</code>（十六进制为0x00727F58）</li><li>密钥字节：<code>key = [0x58, 0x7F, 0x72]</code></li></ul><p>，秘钥流生成：</p><p>key_stream[i] &#x3D; i ^ key[i % 3]</p><p>对于位置<code>i</code>，使用密钥字节<code>key[i % 3]</code>与索引<code>i</code>异或</p><p>加密过程：</p><p>encrypted[i] &#x3D; flag[i] ^ key_stream[27 - i]</p><p>用户输入的每个字节与密钥流中对称位置的字节异或</p><p>目标字符串：</p><ul><li>28字节的固定值（从代码中提取）</li></ul><p>要获取flag就去执行逆过程：</p><p>flag[i] &#x3D; encrypted[i] ^ key_stream[27 - i]</p><p>主函数：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250706210342960.png" alt="image-20250706210342960"></p><p>秘钥流：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250706210412012.png" alt="image-20250706210412012"></p><p>加密函数：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250706210442981.png" alt="image-20250706210442981"></p><p>python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 目标加密字符串（从反汇编代码中提取）</span><br>    encrypted_data = <span class="hljs-built_in">bytes</span>([<br>        <span class="hljs-number">0x01</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x1D</span>, <br>        <span class="hljs-number">0x24</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x67</span>,<br>        <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x34</span>,<br>        <span class="hljs-number">0x22</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x25</span><br>    ])<br>    <br>    <span class="hljs-comment"># 初始密钥（来自v4 = 7499608）</span><br>    v4 = <span class="hljs-number">7499608</span><br>    key_bytes = <span class="hljs-built_in">bytes</span>([v4 &amp; <span class="hljs-number">0xFF</span>, (v4 &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>, (v4 &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>])<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;逆向解密过程详解&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;1. 从 v4 = 7499608 (0x<span class="hljs-subst">&#123;v4:08X&#125;</span>) 提取密钥字节&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;   key_bytes = [<span class="hljs-subst">&#123;<span class="hljs-string">&#x27;, &#x27;</span>.join(<span class="hljs-string">f&#x27;0x<span class="hljs-subst">&#123;b:02X&#125;</span>&#x27;</span> <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> key_bytes)&#125;</span>]&quot;</span>)<br>    <br>    <span class="hljs-comment"># 生成密钥流</span><br>    key_stream = []<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n2. 生成密钥流 (key_stream[i] = i ^ key_bytes[i % 3]):&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(encrypted_data)):<br>        key_index = i % <span class="hljs-number">3</span><br>        key_byte = key_bytes[key_index]<br>        ks_byte = i ^ key_byte<br>        key_stream.append(ks_byte)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;   i=<span class="hljs-subst">&#123;i:2d&#125;</span>, key_index=<span class="hljs-subst">&#123;key_index&#125;</span>, key_byte=0x<span class="hljs-subst">&#123;key_byte:02X&#125;</span>, &quot;</span><br>              <span class="hljs-string">f&quot;ks_byte = <span class="hljs-subst">&#123;i:2d&#125;</span> ^ 0x<span class="hljs-subst">&#123;key_byte:02X&#125;</span> = 0x<span class="hljs-subst">&#123;ks_byte:02X&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-comment"># 逆向计算flag</span><br>    flag = []<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n3. 计算flag (flag[i] = encrypted[i] ^ key_stream[27-i]):&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(encrypted_data)):<br>        reverse_index = <span class="hljs-built_in">len</span>(encrypted_data) - <span class="hljs-number">1</span> - i<br>        key_byte = key_stream[reverse_index]<br>        enc_byte = encrypted_data[i]<br>        flag_byte = enc_byte ^ key_byte<br>        flag.append(flag_byte)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;   i=<span class="hljs-subst">&#123;i:2d&#125;</span>, rev_i=<span class="hljs-subst">&#123;reverse_index:2d&#125;</span>, &quot;</span><br>              <span class="hljs-string">f&quot;enc=0x<span class="hljs-subst">&#123;enc_byte:02X&#125;</span>, key=0x<span class="hljs-subst">&#123;key_byte:02X&#125;</span>, &quot;</span><br>              <span class="hljs-string">f&quot;flag_char=0x<span class="hljs-subst">&#123;flag_byte:02X&#125;</span> (&#x27;<span class="hljs-subst">&#123;<span class="hljs-built_in">chr</span>(flag_byte)&#125;</span>&#x27;)&quot;</span>)<br>    <br>    <span class="hljs-comment"># 转换为字符串</span><br>    flag_str = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(b) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> flag)<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最终结果&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解密后的Flag: <span class="hljs-subst">&#123;flag_str&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-comment"># 验证过程</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;验证过程&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;重新加密flag以验证是否匹配目标字符串:&quot;</span>)<br>    <br>    <span class="hljs-comment"># 重新加密</span><br>    re_encrypted = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>        reverse_index = <span class="hljs-built_in">len</span>(flag) - <span class="hljs-number">1</span> - i<br>        key_byte = key_stream[reverse_index]<br>        enc_byte = flag[i] ^ key_byte<br>        re_encrypted.append(enc_byte)<br>        <span class="hljs-keyword">match</span> = <span class="hljs-string">&quot;✓&quot;</span> <span class="hljs-keyword">if</span> enc_byte == encrypted_data[i] <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;✗&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;   i=<span class="hljs-subst">&#123;i:2d&#125;</span>, flag_char=&#x27;<span class="hljs-subst">&#123;<span class="hljs-built_in">chr</span>(flag[i])&#125;</span>&#x27;, &quot;</span><br>              <span class="hljs-string">f&quot;key=0x<span class="hljs-subst">&#123;key_byte:02X&#125;</span>, enc=0x<span class="hljs-subst">&#123;enc_byte:02X&#125;</span>, &quot;</span><br>              <span class="hljs-string">f&quot;target=0x<span class="hljs-subst">&#123;encrypted_data[i]:02X&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-keyword">match</span>&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">bytes</span>(re_encrypted) == encrypted_data:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n验证成功! 重新加密结果与目标字符串完全匹配&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n验证失败! 请检查解密过程&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>flag：BaseCTF{X0R_I5_345Y_F0r_y0U}</p><h2 id="6-UPX"><a href="#6-UPX" class="headerlink" title="6.UPX"></a>6.UPX</h2><p>脱壳后发现只有start，然后用010看到内部结构将小写改为大写再脱壳，得到exe分析</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250706215119609.png" alt="image-20250706215119609"></p><p>脱壳然后：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250706234849522.png" alt="image-20250706234849522"></p><p>b64函数：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250706234910344.png" alt="image-20250706234910344"></p><p>map中这个：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250706234950164.png" alt="image-20250706234950164"></p><p>找到映射表，然后写代码解密：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250706235037266.png" alt="image-20250706235037266"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自定义Base64解码实现 - 用于逆向工程中的特殊Base64编码</span><br><span class="hljs-comment"># 从工具中提取的自定义Base64映射表（前64个字符）</span><br><span class="hljs-comment"># 注意：原始字符串中有重复字符（如&#x27;A&#x27;），可能需要手动调整</span><br>custom_b64_map = <span class="hljs-string">&quot;A,.1fgvw#`/2ehux$~\&quot;3dity%_;4cjsz^+&#123;5bkrA&amp;=&#125;6alqB*-[70mpC()]89noX&quot;</span>[:<span class="hljs-number">64</span>]<br><br><span class="hljs-comment"># 标准Base64映射表（用于参考和转换）</span><br>standard_b64_map = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><br><span class="hljs-comment"># 构建反向映射表：将自定义字符映射到标准Base64的索引位置</span><br><span class="hljs-comment"># 例如：若自定义表中&#x27;$&#x27;在位置0，则reverse_map[&#x27;$&#x27;] = 0</span><br>reverse_map = &#123;c: i <span class="hljs-keyword">for</span> i, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(custom_b64_map)&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_b64decode</span>(<span class="hljs-params">ciphertext</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    使用自定义映射表解码Base64字符串</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    步骤：</span><br><span class="hljs-string">    1. 将每个自定义字符转换为对应的6位二进制值</span><br><span class="hljs-string">    2. 将所有6位二进制片段连接成完整的二进制字符串</span><br><span class="hljs-string">    3. 将二进制字符串按每8位分割，转换为字节数据</span><br><span class="hljs-string">    4. 尝试将字节数据解码为ASCII字符串</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 存储所有6位二进制片段的连接结果</span><br>    bits = <span class="hljs-string">&quot;&quot;</span><br>    <br>    <span class="hljs-comment"># 遍历密文中的每个字符</span><br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> ciphertext:<br>        <span class="hljs-comment"># 检查字符是否在自定义映射表中</span><br>        <span class="hljs-keyword">if</span> c <span class="hljs-keyword">in</span> reverse_map:<br>            <span class="hljs-comment"># 将字符转换为对应的6位二进制值（补前导零）</span><br>            <span class="hljs-comment"># 例如：索引0 -&gt; &#x27;000000&#x27;, 索引1 -&gt; &#x27;000001&#x27;, 依此类推</span><br>            bits += <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;reverse_map[c]:06b&#125;</span>&quot;</span><br>    <br>    <span class="hljs-comment"># 存储解码后的字节数据</span><br>    bytes_data = <span class="hljs-built_in">bytearray</span>()<br>    <br>    <span class="hljs-comment"># 将二进制字符串按每8位分割，转换为字节</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bits), <span class="hljs-number">8</span>):<br>        byte = bits[i:i+<span class="hljs-number">8</span>]<br>        <span class="hljs-comment"># 确保每次处理完整的8位（最后一组可能不足8位，需忽略）</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(byte) == <span class="hljs-number">8</span>:<br>            bytes_data.append(<span class="hljs-built_in">int</span>(byte, <span class="hljs-number">2</span>))<br>    <br>    <span class="hljs-comment"># 尝试将字节数据解码为ASCII字符串（CTF中常见的flag格式）</span><br>    <span class="hljs-comment"># 注意：如果flag包含非ASCII字符，这里可能需要尝试其他编码</span><br>    <span class="hljs-keyword">return</span> bytes_data.decode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br><br><span class="hljs-comment"># 待解码的目标密文（从逆向工程中获取）</span><br>ciphertext = <span class="hljs-string">&quot;$rg7_dhd~Alidg+zeyhz`vnz_d,7sy0=&quot;</span><br><br><span class="hljs-comment"># 调用自定义解码函数</span><br>plaintext = custom_b64decode(ciphertext)<br><br><span class="hljs-comment"># 输出解码结果</span><br><span class="hljs-built_in">print</span>(plaintext)<br><br><span class="hljs-comment"># 验证是否符合常见的CTF flag格式</span><br><span class="hljs-comment"># 例如：BaseCTF&#123;...&#125;, CTF&#123;...&#125;, flag&#123;...&#125;等</span><br><span class="hljs-comment"># 注意：需根据具体题目要求调整验证逻辑</span><br></code></pre></td></tr></table></figure><p>flag: BaseCTF{UPX_1s_$o_e@sy})</p><h2 id="7-lk"><a href="#7-lk" class="headerlink" title="7.lk"></a>7.lk</h2><p>对于这种超复杂的线性方程，我们可以用python的z3solver库解决</p><p>打断点调试：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250707151407732.png" alt="image-20250707151407732"></p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250707151349739.png" alt="image-20250707151349739"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 定义未知数</span><br>a = [Int(<span class="hljs-string">&#x27;a[%d]&#x27;</span> % i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>)]<br><br><span class="hljs-comment"># 创建求解器</span><br>s = Solver()<br><br><span class="hljs-comment"># 添加加权和的条件</span><br>s.add(<span class="hljs-number">948</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">887</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">410</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">978</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">417</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">908</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">965</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">987</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">141</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">257</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">323</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">931</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">773</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">851</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">758</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">891</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">575</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">616</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">860</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">283</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">913686</span>)<br>s.add( <span class="hljs-number">938</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">490</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">920</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">50</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">568</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">68</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">35</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">708</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">938</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">718</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">589</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">954</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">974</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">62</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">580</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">80</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">111</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">151</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">421</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">148</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">630335</span>)<br>s.add( <span class="hljs-number">908</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">590</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">668</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">222</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">489</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">335</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">778</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">622</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">95</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">920</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">932</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">892</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">409</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">392</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">11</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">113</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">948</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">674</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">506</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">182</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">707525</span>)<br>s.add( <span class="hljs-number">479</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">859</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">410</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">399</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">891</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">266</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">773</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">624</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">34</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">479</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">465</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">728</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">447</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">427</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">890</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">570</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">716</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">180</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">571</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">707</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">724203</span>)<br>s.add( <span class="hljs-number">556</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">798</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">380</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">716</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">71</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">901</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">949</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">304</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">142</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">679</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">459</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">814</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">282</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">49</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">873</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">169</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">437</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">199</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">771</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">807</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">688899</span>)<br>s.add( <span class="hljs-number">465</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">898</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">979</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">198</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">156</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">831</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">856</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">322</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">25</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">35</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">369</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">917</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">522</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">654</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">235</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">385</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">469</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">231</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">496</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">83</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">604784</span>)<br>s.add( <span class="hljs-number">305</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">928</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">260</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">793</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">787</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">708</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">758</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">236</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">688</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">747</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">711</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">195</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">50</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">648</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">787</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">376</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">220</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">33</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">194</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">585</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">665485</span>)<br>s.add( <span class="hljs-number">767</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">573</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">22</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">909</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">598</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">588</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">136</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">848</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">964</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">311</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">701</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">653</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">541</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">443</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">7</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">976</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">803</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">273</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">859</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">727664</span>)<br>s.add( <span class="hljs-number">776</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">59</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">507</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">164</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">397</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">744</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">377</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">768</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">456</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">799</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">9</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">215</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">365</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">181</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">634</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">818</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">81</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">236</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">883</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">95</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">572015</span>)<br>s.add( <span class="hljs-number">873</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">234</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">381</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">423</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">960</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">689</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">617</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">240</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">933</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">300</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">998</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">773</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">484</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">905</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">806</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">792</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">606</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">942</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">422</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">789</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">875498</span>)<br>s.add( <span class="hljs-number">766</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">7</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">283</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">900</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">211</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">305</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">343</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">696</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">590</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">736</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">817</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">603</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">414</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">828</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">114</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">845</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">175</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">212</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">898</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">988</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">714759</span>)<br>s.add( <span class="hljs-number">220</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">30</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">788</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">106</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">574</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">501</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">366</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">952</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">121</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">996</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">735</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">689</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">998</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">689</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">729</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">886</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">860</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">70</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">466</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">961</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">778853</span>)<br>s.add( <span class="hljs-number">313</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">748</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">522</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">864</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">156</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">362</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">283</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">49</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">316</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">79</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">136</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">299</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">271</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">604</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">907</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">540</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">141</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">620</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">701</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">866</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">584591</span>)<br>s.add( <span class="hljs-number">922</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">399</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">425</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">26</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">159</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">224</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">438</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">770</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">144</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">406</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">110</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">991</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">749</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">701</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">646</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">147</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">979</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">674</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">999</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">913</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">717586</span>)<br>s.add( <span class="hljs-number">13</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">537</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">225</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">421</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">153</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">484</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">654</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">743</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">779</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">74</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">325</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">439</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">797</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">41</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">784</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">269</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">454</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">725</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">164</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">537823</span>)<br>s.add( <span class="hljs-number">591</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">210</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">874</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">204</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">485</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">42</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">433</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">176</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">436</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">634</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">82</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">978</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">818</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">683</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">404</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">562</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">41</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">789</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">200</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">220</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">587367</span>)<br>s.add( <span class="hljs-number">584</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">597</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">928</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">532</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">902</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">858</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">820</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">240</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">124</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">899</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">848</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">822</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">409</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">491</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">587</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">715</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">410</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">268</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">721</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">915</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">842245</span>)<br>s.add( <span class="hljs-number">421</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">302</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">327</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">180</span> * a[<span class="hljs-number">17</span>]<br>     + a[<span class="hljs-number">16</span>] * <span class="hljs-number">512</span><br>     + <span class="hljs-number">160</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">623</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">28</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">411</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">53</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">633</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">560</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">623</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">477</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">901</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">287</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">149</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">726</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">934</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">875</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">610801</span>)<br>s.add( <span class="hljs-number">838</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">434</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">792</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">649</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">462</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">170</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">980</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">15</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">295</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">495</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">666</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">934</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">17</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">69</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">367</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">780</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">291</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">834</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">587</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">133</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">653127</span>)<br>s.add( <span class="hljs-number">41</span> * a[<span class="hljs-number">20</span>]<br>     + <span class="hljs-number">422</span> * a[<span class="hljs-number">19</span>]<br>     + <span class="hljs-number">420</span> * a[<span class="hljs-number">18</span>]<br>     + <span class="hljs-number">224</span> * a[<span class="hljs-number">17</span>]<br>     + <span class="hljs-number">475</span> * a[<span class="hljs-number">16</span>]<br>     + <span class="hljs-number">854</span> * a[<span class="hljs-number">15</span>]<br>     + <span class="hljs-number">233</span> * a[<span class="hljs-number">14</span>]<br>     + <span class="hljs-number">179</span> * a[<span class="hljs-number">13</span>]<br>     + <span class="hljs-number">620</span> * a[<span class="hljs-number">12</span>]<br>     + <span class="hljs-number">69</span> * a[<span class="hljs-number">11</span>]<br>     + <span class="hljs-number">42</span> * a[<span class="hljs-number">10</span>]<br>     + <span class="hljs-number">684</span> * a[<span class="hljs-number">9</span>]<br>     + <span class="hljs-number">300</span> * a[<span class="hljs-number">8</span>]<br>     + <span class="hljs-number">745</span> * a[<span class="hljs-number">7</span>]<br>     + <span class="hljs-number">894</span> * a[<span class="hljs-number">6</span>]<br>     + <span class="hljs-number">554</span> * a[<span class="hljs-number">5</span>]<br>     + <span class="hljs-number">495</span> * a[<span class="hljs-number">4</span>]<br>     + <span class="hljs-number">66</span> * a[<span class="hljs-number">3</span>]<br>     + <span class="hljs-number">316</span> * a[<span class="hljs-number">2</span>]<br>     + <span class="hljs-number">391</span> * a[<span class="hljs-number">1</span>] == <span class="hljs-number">533470</span> )<br><br><span class="hljs-comment"># 在求解器中添加字节的范围限制：0到255</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">21</span>):<br>    s.add(a[i] &gt;= <span class="hljs-number">0</span>, a[i] &lt;= <span class="hljs-number">255</span>)<br><br><span class="hljs-comment"># 检查是否有解</span><br><span class="hljs-keyword">if</span> s.check() == sat:<br>    model = s.model()<br>    result = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(model[a[i]].as_long()) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">21</span>)])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解是:&quot;</span>, result)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有解&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>flag:  BaseCTF{CDBBDCAAABBDBCCBCCAC}</p><h2 id="8-喝杯下午茶"><a href="#8-喝杯下午茶" class="headerlink" title="8.喝杯下午茶"></a>8.喝杯下午茶</h2><p>主函数可以在这里找：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250707180931063.png" alt="image-20250707180931063"></p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250707180956066.png" alt="image-20250707180956066"></p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250707181011691.png" alt="image-20250707181011691"></p><p>大概是这样：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250707181159001.png" alt="image-20250707181159001"></p><p>v5是key，v6是密文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_block</span>(<span class="hljs-params">left, right, key</span>):<br>    k0, k1, k2, k3 = key<br>    delta = <span class="hljs-number">1131796</span><br>    total_delta = <span class="hljs-number">32</span> * delta<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        right = (right - ((k3 + (left &gt;&gt; <span class="hljs-number">5</span>)) ^ (left + total_delta) ^ (k2 + (left &lt;&lt; <span class="hljs-number">4</span>)))) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        left = (left - ((k1 + (right &gt;&gt; <span class="hljs-number">5</span>)) ^ (right + total_delta) ^ (k0 + (right &lt;&lt; <span class="hljs-number">4</span>)))) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        total_delta -= delta<br>    <span class="hljs-keyword">return</span> left, right<br><br><span class="hljs-comment"># Key and ciphertext</span><br>key = [<span class="hljs-number">0x11223344</span>, <span class="hljs-number">0x55667788</span>, <span class="hljs-number">0x99AABBCC</span>, <span class="hljs-number">0xDDEEFF11</span>]<br>ciphertext = [<br>    <span class="hljs-number">0x94B1F1E7</span>, <span class="hljs-number">0x21D5D352</span>,<br>    <span class="hljs-number">0x5247793D</span>, <span class="hljs-number">0x040D1C97</span>,<br>    <span class="hljs-number">0xF36E7F74</span>, <span class="hljs-number">0x9C53F70F</span>,<br>    <span class="hljs-number">0x6AEACFD8</span>, <span class="hljs-number">0x6F9F06F4</span>,<br>    <span class="hljs-number">0xEAFD9E2E</span>, <span class="hljs-number">0x32B655F7</span><br>]<br><br><span class="hljs-comment"># Decrypt each block</span><br>flag = <span class="hljs-string">b&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>):<br>    left, right = ciphertext[i], ciphertext[i+<span class="hljs-number">1</span>]<br>    dec_left, dec_right = decrypt_block(left, right, key)<br>    flag += dec_left.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;little&#x27;</span>)<br>    flag += dec_right.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;little&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(flag.decode())<br></code></pre></td></tr></table></figure><p>flag: BaseCTF{h3r3_4_cuP_0f_734_f0R_y0U!!!!!!}</p><h2 id="9-Ezpy"><a href="#9-Ezpy" class="headerlink" title="9.Ezpy"></a>9.Ezpy</h2><p>可以用网址：<a href="https://tool.lu/">https://tool.lu/</a>   这个里的来解pyc</p><p>先转exe为pyc，再把pyc反编译成py。<strong>使用方法放到G:\Agent\Cybersecurity\reverse\un_python_gui了</strong></p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250715172853547.png" alt="image-20250715172853547"></p><p>一个简单的RC4加密解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">key = <span class="hljs-string">&#x27;yOU_f1nd_m3&#x27;</span><br>keykey = [<span class="hljs-number">66</span>, <span class="hljs-number">97</span>, <span class="hljs-number">115</span>, <span class="hljs-number">101</span>]  <span class="hljs-comment"># 对应 &#x27;Base&#x27; 的 ASCII 码</span><br><br>enc = <span class="hljs-string">b&#x27;\xe6\xaeC~F\xf2\xe3\xbb\xac\x9a-\x02U\x85p\xeb\x19\xd1\xe4\xc93sG\xb0\xeb1\xb5\x05\x05\xc3\xd7\x00\x18+D\xbc\x0cO\x9em\xf1\xbd&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_Sbox</span>(<span class="hljs-params">seed</span>):<br>    k_b = [<span class="hljs-built_in">ord</span>(seed[i % <span class="hljs-built_in">len</span>(seed)]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)]<br>    s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s[i] + k_b[i]) % <span class="hljs-number">256</span><br>        s[i], s[j] = s[j], s[i]<br>    <span class="hljs-keyword">return</span> s<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">KeyStream</span>(<span class="hljs-params">length, Sbox</span>):<br>    s = Sbox.copy()<br>    i, j = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    k = [<span class="hljs-number">0</span>] * length<br>    <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + s[i]) % <span class="hljs-number">256</span><br>        s[i], s[j] = s[j], s[i]<br>        t = (s[i] + s[j]) % <span class="hljs-number">256</span><br>        k[r] = s[t] ^ keykey[r % <span class="hljs-built_in">len</span>(keykey)]<br>    <span class="hljs-keyword">return</span> k<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">ciphertext, seed</span>):<br>    Sbox = init_Sbox(seed)<br>    key = KeyStream(<span class="hljs-built_in">len</span>(ciphertext), Sbox)<br>    dec = [ciphertext[i] ^ key[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ciphertext))]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(dec)<br><br><span class="hljs-comment"># 执行解密</span><br>flag_bytes = decrypt(enc, key)<br><span class="hljs-keyword">try</span>:<br>    flag = flag_bytes.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag:&quot;</span>, flag)<br><span class="hljs-keyword">except</span> UnicodeDecodeError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无法以UTF-8解码，原始字节:&quot;</span>, flag_bytes)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;尝试其他编码或查看字节内容...&quot;</span>)<br></code></pre></td></tr></table></figure><p>flag：BaseCTF{Y0u_kn0W_d3C0Mp1l4710N_PY_4ND_rC4}</p><h2 id="10-最简单的编码"><a href="#10-最简单的编码" class="headerlink" title="10.最简单的编码"></a>10.最简单的编码</h2><p>先看主要逻辑：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250707233826969.png" alt="image-20250707233826969"></p><p>base换表和编码索引值+</p><p>获得魔改base，编码索引值+了那我们就减回去就行了</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250707233755702.png" alt="image-20250707233755702"></p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250707234720598.png" alt="image-20250707234720598"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">table = <span class="hljs-string">&quot;CDABGHEFKLIJOPMNSTQRWXUVabYZefcdijghmnklqropuvstyzwx23016745+/89&quot;</span><br>enc = <span class="hljs-string">&quot;TqK1YUSaQryEMHaLMnWhYU+Fe0WPenqhRXahfkV6WE2fa3iRW197Za62eEaD&quot;</span><br>index = []<br>number = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    tmp = table.index(enc[i]) - number[i % <span class="hljs-number">4</span>]<br>    <span class="hljs-keyword">if</span> tmp &gt;= <span class="hljs-number">0</span>:<br>        index.append(tmp)<br>    <span class="hljs-keyword">else</span>:<br>        index.append(tmp + <span class="hljs-number">64</span>)<br><span class="hljs-built_in">print</span>(index)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(index),<span class="hljs-number">4</span>):<br>    a = index[i]<br>    b = index[i + <span class="hljs-number">1</span>]<br>    c = index[i + <span class="hljs-number">2</span>]<br>    d = index[i + <span class="hljs-number">3</span>]<br>    <span class="hljs-built_in">sum</span> = a &lt;&lt; <span class="hljs-number">18</span> | b &lt;&lt; <span class="hljs-number">12</span> | c &lt;&lt; <span class="hljs-number">6</span> | d<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">sum</span> &gt;&gt; ((<span class="hljs-number">2</span> - j) * <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xff</span>),end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>flag：  BaseCTF{B45E64_eNCoDIn9_I5_rE4LLY_7OO_5implE}</p><p><strong><u><em>&#x3D;&#x3D;最终这个题我还是没做出来，因为环境问题：&#x3D;&#x3D;</em></u></strong></p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250708150946361.png" alt="image-20250708150946361"></p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250708151005928.png" alt="image-20250708151005928"></p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250708150921288.png" alt="image-20250708150921288"></p><h2 id="11-neuro爱数学"><a href="#11-neuro爱数学" class="headerlink" title="11.neuro爱数学"></a>11.neuro爱数学</h2><p>主要逻辑：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250708235335543.png" alt="image-20250708235335543"></p><p>逆向这个就可以了，然后我们扔给ai得到：x1到x9，然后再喂一下子就可以：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 定义多项式的根</span><br>    roots = [<span class="hljs-number">44</span>, <span class="hljs-number">58</span>, <span class="hljs-number">17</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">37</span>]<br>    <br>    <span class="hljs-comment"># 从根构建多项式</span><br>    poly_coeffs = np.poly(roots)<br>    <br>    <span class="hljs-comment"># 将系数四舍五入为整数</span><br>    integer_coeffs = [<span class="hljs-built_in">int</span>(<span class="hljs-built_in">round</span>(coeff)) <span class="hljs-keyword">for</span> coeff <span class="hljs-keyword">in</span> poly_coeffs]<br>    <br>    <span class="hljs-comment"># 验证关键系数</span><br>    <span class="hljs-keyword">assert</span> integer_coeffs[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>, <span class="hljs-string">f&quot;i^8 系数应为 1，实际为 <span class="hljs-subst">&#123;integer_coeffs[<span class="hljs-number">0</span>]&#125;</span>&quot;</span><br>    <span class="hljs-keyword">assert</span> integer_coeffs[<span class="hljs-number">1</span>] == -<span class="hljs-number">80</span>, <span class="hljs-string">f&quot;i^7 系数应为 -80，实际为 <span class="hljs-subst">&#123;integer_coeffs[<span class="hljs-number">1</span>]&#125;</span>&quot;</span><br>    <span class="hljs-keyword">assert</span> integer_coeffs[<span class="hljs-number">2</span>] == -<span class="hljs-number">358</span>, <span class="hljs-string">f&quot;i^6 系数应为 -358，实际为 <span class="hljs-subst">&#123;integer_coeffs[<span class="hljs-number">2</span>]&#125;</span>&quot;</span><br>    <br>    <span class="hljs-comment"># 反转后的系数</span><br>    reversed_coeffs = integer_coeffs[::-<span class="hljs-number">1</span>]<br>    <br>    <span class="hljs-comment"># 打印多项式信息</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;多项式根:&quot;</span>, roots)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;多项式形式: P(i) = (i-44)(i-58)(i-17)(i-6)(i-5)(i+4)(i+9)(i+37)&quot;</span>)<br>    <br>    <span class="hljs-comment"># 打印原始系数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n多项式系数 (从最高次项到常数项):&quot;</span>)<br>    <span class="hljs-keyword">for</span> i, coeff <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(integer_coeffs):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;i^<span class="hljs-subst">&#123;<span class="hljs-number">8</span>-i&#125;</span> 的系数: <span class="hljs-subst">&#123;coeff&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-comment"># 打印反转后的系数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n反转后的多项式系数 (从常数项到最高次项):&quot;</span>)<br>    <span class="hljs-keyword">for</span> i, coeff <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(reversed_coeffs):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;i^<span class="hljs-subst">&#123;i&#125;</span> 的系数: <span class="hljs-subst">&#123;coeff&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-comment"># 输出原始顺序的九个整数输入</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n原始顺序的九个整数输入:&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">str</span>(coeff) <span class="hljs-keyword">for</span> coeff <span class="hljs-keyword">in</span> integer_coeffs))<br>    <br>    <span class="hljs-comment"># 输出反转顺序的九个整数输入</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n反转顺序的九个整数输入:&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">str</span>(coeff) <span class="hljs-keyword">for</span> coeff <span class="hljs-keyword">in</span> reversed_coeffs))<br>    <br>    <span class="hljs-comment"># 提供复制方便的格式</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n复制以下内容直接输入到程序中 (原始顺序):&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;integer_coeffs[<span class="hljs-number">0</span>]&#125;</span> <span class="hljs-subst">&#123;integer_coeffs[<span class="hljs-number">1</span>]&#125;</span> <span class="hljs-subst">&#123;integer_coeffs[<span class="hljs-number">2</span>]&#125;</span> <span class="hljs-subst">&#123;integer_coeffs[<span class="hljs-number">3</span>]&#125;</span> <span class="hljs-subst">&#123;integer_coeffs[<span class="hljs-number">4</span>]&#125;</span> <span class="hljs-subst">&#123;integer_coeffs[<span class="hljs-number">5</span>]&#125;</span> <span class="hljs-subst">&#123;integer_coeffs[<span class="hljs-number">6</span>]&#125;</span> <span class="hljs-subst">&#123;integer_coeffs[<span class="hljs-number">7</span>]&#125;</span> <span class="hljs-subst">&#123;integer_coeffs[<span class="hljs-number">8</span>]&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n复制以下内容直接输入到程序中 (反转顺序):&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;reversed_coeffs[<span class="hljs-number">0</span>]&#125;</span> <span class="hljs-subst">&#123;reversed_coeffs[<span class="hljs-number">1</span>]&#125;</span> <span class="hljs-subst">&#123;reversed_coeffs[<span class="hljs-number">2</span>]&#125;</span> <span class="hljs-subst">&#123;reversed_coeffs[<span class="hljs-number">3</span>]&#125;</span> <span class="hljs-subst">&#123;reversed_coeffs[<span class="hljs-number">4</span>]&#125;</span> <span class="hljs-subst">&#123;reversed_coeffs[<span class="hljs-number">5</span>]&#125;</span> <span class="hljs-subst">&#123;reversed_coeffs[<span class="hljs-number">6</span>]&#125;</span> <span class="hljs-subst">&#123;reversed_coeffs[<span class="hljs-number">7</span>]&#125;</span> <span class="hljs-subst">&#123;reversed_coeffs[<span class="hljs-number">8</span>]&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250708235659056.png" alt="image-20250708235659056"></p><p>期间遇到了怎么绕过反反调试的问题，目前知道的解决办法：</p><p>1、改rax为0</p><p>2、在<a href="https://github.com/notify-bibi/ScyllaHide-IDA7.5/tree/0.2">https://github.com/notify-bibi/ScyllaHide-IDA7.5/tree/0.2</a> 下载绕过反反调试的插件</p><p>flag： BaseCTF{neuro_11AdD8_result_21_filtered_ajar_boxfan}</p><h2 id="12-RivestCipher"><a href="#12-RivestCipher" class="headerlink" title="12.RivestCipher"></a>12.RivestCipher</h2><p>主函数：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250709181739320.png" alt="image-20250709181739320"></p><p>加密：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250709181856243.png" alt="image-20250709181856243"></p><p>解密：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250709181921476.png" alt="image-20250709181921476"></p><p>注意，这个题用的ida9.1，之前的题用的ida7.6</p><p>flag: BaseCTF{go1@ng_!S_RuNNin9_RC4}</p><h2 id="13-ezAndroid"><a href="#13-ezAndroid" class="headerlink" title="13.ezAndroid"></a>13.ezAndroid</h2><p>用jadx工具反编译apk得到Java程序：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250710021743441.png" alt="image-20250710021743441"></p><p>读懂这一部分发现是调其他的部分，过程大概是这样：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250710021838015.png" alt="image-20250710021838015"></p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250710021914322.png" alt="image-20250710021914322"></p><p>然后放到ida发现，是取地址然后异或运算：相同为零，不同为一</p><p>提取一下，然后py代码逆一下：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250710022355836.png" alt="image-20250710022355836"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>f=a.read()<br>m=[<span class="hljs-number">97</span>, <span class="hljs-number">54</span>, <span class="hljs-number">98</span>, <span class="hljs-number">52</span>, <span class="hljs-number">100</span>, <span class="hljs-number">52</span>, <span class="hljs-number">102</span>, <span class="hljs-number">101</span>, <span class="hljs-number">51</span>, <span class="hljs-number">52</span>, <span class="hljs-number">54</span>, <span class="hljs-number">49</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(f)):<br>     <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(f[i]^m[i%<span class="hljs-built_in">len</span>(m)]),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>也可以用这种方法：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250710031436642.png" alt="image-20250710031436642"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">Java.perform(()=&gt;&#123;<br>  <span class="hljs-type">let</span> <span class="hljs-variable">MainActivity</span> <span class="hljs-operator">=</span> Java.use(<span class="hljs-string">&quot;com.example.hello.MainActivity&quot;</span>);<br>MainActivity[<span class="hljs-string">&quot;loadFlagFile&quot;</span>].implementation = function (str) &#123;<br>    console.log(`MainActivity.loadFlagFile is called: str=$&#123;str&#125;`);<br>    <span class="hljs-type">let</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>[<span class="hljs-string">&quot;loadFlagFile&quot;</span>](str);<br>    console.log(`MainActivity.loadFlagFile result=$&#123;result&#125;`);<br>    <span class="hljs-keyword">var</span> A=Java.array(<span class="hljs-string">&#x27;byte&#x27;</span>,result);<br>    <span class="hljs-type">var</span> <span class="hljs-variable">B</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>[<span class="hljs-string">&quot;Base64encode&quot;</span>](A);<br>    console.log(`MainActivity.loadFlagFile Base64encode result=$&#123;B&#125;`);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;;<br>&#125;)<br></code></pre></td></tr></table></figure><p>flag:  BaseCTF{28e1bf5b-5a8e-4f7d-9afd-3991dfb28453}</p><h2 id="13-1额外知识点mobile"><a href="#13-1额外知识点mobile" class="headerlink" title="13.1额外知识点mobile"></a>13.1额外知识点mobile</h2><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250710163848041.png" alt="image-20250710163848041"></p><p>开启雷电模拟器root权限，启动frida服务（在mobile里）</p><p>然后运行上面那个脚本：<br><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250710164036511.png" alt="image-20250710164036511"></p><p>hook脚本是运行到包里的</p><p>然后用雷神模拟器输入任意内容就能出：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250710164143029.png" alt="image-20250710164143029"></p><p>然后ASCII查一下就可以了：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250710164210014.png" alt="image-20250710164210014"></p><p>flag:  BaseCTF{28e1bf5b-5a8e-4f7d-9afd-3991dfb28453}</p><h2 id="14-出题人已疯"><a href="#14-出题人已疯" class="headerlink" title="14.出题人已疯"></a>14.出题人已疯</h2><p>用die发现是c++编译的.net：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250710185653410.png" alt="image-20250710185653410"></p><p>然后：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250710185721527.png" alt="image-20250710185721527"></p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250710185753927.png" alt="image-20250710185753927"></p><p>找到关键方法，发现是三重异或</p><p>然后解密</p><p>解题逻辑：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs excel">我们已知以下信息：<br><span class="hljs-number">1</span>. 密钥字符串 key_str 是由 sentences 数组中的所有字符串连接而成。<br><span class="hljs-number">2</span>. 目标数组 array3 是一个 uint 数组，实际存储的是字符的 <span class="hljs-built_in">Unicode</span> 编码（因为后面被转换为 <span class="hljs-built_in">char</span> 数组）。<br><span class="hljs-number">3</span>. 用户输入经过变换后与 array3 转换成的字符串进行比较。<br>变换过程：<br>   array[i] = (<span class="hljs-built_in">char</span>)( ( (array[i] * array[i]) ) ^ i ^ (<span class="hljs-built_in">int</span>)array2[i % array2.Length] )<br>逆向过程：<br>  设 <span class="hljs-built_in">T</span> = array3 中第 i 个元素转换成的字符的 <span class="hljs-built_in">Unicode</span> 值（即 target_chars[i] 的 ord）。<br>  变换后的值 <span class="hljs-built_in">T</span> 满足：<br>      <span class="hljs-built_in">T</span> = ( (input_char)² ) ^ i ^ key_char<br>因此，我们需要计算：<br>      (input_char)² = <span class="hljs-built_in">T</span> ^ i ^ key_char<br>然后开平方得到 input_char。<br>注意：由于 input_char 是一个 <span class="hljs-built_in">char</span> 类型，所以它的值在 <span class="hljs-number">0</span> 到 <span class="hljs-number">65535</span> 之间。开平方后取整，然后取整后的数值的平方应该等于计算出的值（否则可能出错，但根据算法，原始输入应该是可打印字符，所以通常不会超出范围）。<br>步骤：<br><span class="hljs-number">1</span>. 构造密钥字符串（key_str）。<br><span class="hljs-number">2</span>. 将 array3 中的每个 uint 转换为字符，然后获取其 <span class="hljs-built_in">Unicode</span> 码点（即整数）。<br><span class="hljs-number">3</span>. 对于每个位置 i：<br>      xor_triple = T_i ^ i ^ (key_str[i % <span class="hljs-built_in">len</span>(key_str)] 的码点)<br>      然后计算 <span class="hljs-built_in">sqrt</span>(xor_triple)，四舍五入取整，得到原始字符的码点。<br><span class="hljs-number">4</span>. 将码点转换为字符，连接起来得到 flag。<br>注意：由于平方操作，原始字符的码点必须是一个整数，并且其平方必须在 <span class="hljs-number">0</span> 到 <span class="hljs-number">65535</span> 之间，所以原始字符的码点范围在 <span class="hljs-number">0</span> 到 <span class="hljs-number">255</span> 之间（因为 <span class="hljs-number">256</span>*<span class="hljs-number">256</span>=<span class="hljs-number">65536</span>，超出 <span class="hljs-built_in">char</span> 范围，所以实际上原始字符应该是 ASCII 或 Latin-<span class="hljs-number">1</span> 字符，因为中文字符的码点较大，平方会溢出）。但实际上，array3 中的值都是小于 <span class="hljs-number">65536</span> 的，所以原始字符的码点不会超过 <span class="hljs-number">255</span>（因为平方后最大为 <span class="hljs-number">255</span>^<span class="hljs-number">2</span>=<span class="hljs-number">65025</span>，小于<span class="hljs-number">65536</span>）。因此，我们只需要考虑 <span class="hljs-number">0</span>~<span class="hljs-number">255</span> 的字符。<br>但是，注意：变换后的值 <span class="hljs-built_in">T</span> 是 <span class="hljs-built_in">char</span>，所以 <span class="hljs-built_in">T</span> 在 <span class="hljs-number">0</span>~<span class="hljs-number">65535</span> 之间，而 key_char 也是 <span class="hljs-built_in">char</span>（<span class="hljs-number">0</span>~<span class="hljs-number">65535</span>），所以计算出的平方值（即 xor_triple）可能很大，但实际在逆向时，我们得到 xor_triple 后开平方，然后取整，再检查取整后的数值的平方是否等于 xor_triple（因为平方取整会有精度损失）。如果不相等，则说明该位置无解。但根据算法，正确的输入应该是有解的。<br>编写完整代码：<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><br><span class="hljs-comment"># 定义干扰字符串数组（sentences）</span><br>sentences = [<br>    <span class="hljs-string">&quot;你以为我还会在乎吗？\ud83d\ude2c\ud83d\ude2c\ud83d\ude2c我在昆仑山练了六年的剑\ud83d\ude1f\ud83d\ude1f\ud83d\ude1f我的心早就和昆仑山的雪一样冷了\ud83d\ude10\ud83d\ude10\ud83d\ude10我在大润发杀了十年的鱼\ud83d\ude2b\ud83d\ude2b\ud83d\ude2b我以为我的心早已跟我的刀一样冷了\ud83d\ude29\ud83d\ude29\ud83d\ude29&quot;</span>,<br>    <span class="hljs-string">&quot;我早上坐公交滴卡的时候和司机大叔说“两个人”，司机惊讶地看着我“你明明就是一个人，为什么要滴两个人的卡？”我回他，“我心中还有一个叫Kengwang的。”司机回我说，“天使是不用收钱的。”&quot;</span>,<br>    <span class="hljs-string">&quot;（尖叫）（扭曲）（阴暗的爬行）（扭动）（阴暗地蠕动）（翻滚）（激烈地爬动）（痉挛）（嘶吼）（蠕动）（阴森的低吼）（爬行）（分裂）（走上岸）（扭曲的行走）（不分对象攻击）&quot;</span>,<br>    <span class="hljs-string">&quot;地球没我照样转？硬撑罢了！地球没我照样转？硬撑罢了！地球没我照样转？硬撑罢了！地球没我照样转？硬撑罢了！地球没我照样转？硬撑罢了！地球没我照样转？硬撑罢了！&quot;</span>,<br>    <span class="hljs-string">&quot;扭曲上勾拳！阴暗的下勾拳！尖叫左勾拳！右勾拳爬行！扭动扫堂腿！分裂回旋踢！这是蜘蛛阴暗的吃耳屎，这是龙卷风翻滚停车场！乌鸦痉挛！老鼠嘶吼！大象蠕动！愤怒的章鱼！无差别攻击！无差别攻击！无差别攻击！&quot;</span><br>]<br><br><span class="hljs-comment"># 连接所有干扰字符串形成密钥</span><br>key_str = <span class="hljs-string">&#x27;&#x27;</span>.join(sentences)<br>key_chars = <span class="hljs-built_in">list</span>(key_str)  <span class="hljs-comment"># 转换为字符数组</span><br>key_length = <span class="hljs-built_in">len</span>(key_chars)<br><br><span class="hljs-comment"># 目标验证数据（从 array3 复制）</span><br>target_uint = [<br>    <span class="hljs-number">24164</span>, <span class="hljs-number">27173</span>, <span class="hljs-number">32145</span>, <span class="hljs-number">17867</span>, <span class="hljs-number">40533</span>, <span class="hljs-number">21647</span>, <span class="hljs-number">17418</span>, <span class="hljs-number">30032</span>, <span class="hljs-number">27950</span>, <span class="hljs-number">62998</span>,<br>    <span class="hljs-number">60750</span>, <span class="hljs-number">64870</span>, <span class="hljs-number">52680</span>, <span class="hljs-number">61797</span>, <span class="hljs-number">49234</span>, <span class="hljs-number">59762</span>, <span class="hljs-number">16704</span>, <span class="hljs-number">19200</span>, <span class="hljs-number">32132</span>, <span class="hljs-number">24038</span>,<br>    <span class="hljs-number">21764</span>, <span class="hljs-number">30130</span>, <span class="hljs-number">28113</span>, <span class="hljs-number">23070</span>, <span class="hljs-number">27413</span>, <span class="hljs-number">27917</span>, <span class="hljs-number">28938</span>, <span class="hljs-number">50207</span>, <span class="hljs-number">64834</span>, <span class="hljs-number">60132</span>,<br>    <span class="hljs-number">64832</span>, <span class="hljs-number">63334</span>, <span class="hljs-number">55103</span>, <span class="hljs-number">22176</span>, <span class="hljs-number">21991</span>, <span class="hljs-number">20073</span>, <span class="hljs-number">22281</span>, <span class="hljs-number">19476</span>, <span class="hljs-number">28302</span>, <span class="hljs-number">24336</span>,<br>    <span class="hljs-number">24720</span>, <span class="hljs-number">19544</span>, <span class="hljs-number">23018</span>, <span class="hljs-number">43976</span><br>]<br><br><span class="hljs-comment"># 将目标 uint 数组转换为字符数组</span><br>target_chars = [<span class="hljs-built_in">chr</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> target_uint]<br><br><span class="hljs-comment"># 逆向计算 flag</span><br>flag_chars = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(target_chars)):<br>    <span class="hljs-comment"># 获取目标字符的 Unicode 码点</span><br>    transformed_val = <span class="hljs-built_in">ord</span>(target_chars[i])<br>    <br>    <span class="hljs-comment"># 获取对应位置的密钥字符</span><br>    key_val = <span class="hljs-built_in">ord</span>(key_chars[i % key_length])<br>    <br>    <span class="hljs-comment"># 逆向计算三重异或</span><br>    <span class="hljs-comment"># 原始公式: transformed_val = (input_char²) ^ i ^ key_val</span><br>    <span class="hljs-comment"># 因此: input_char² = transformed_val ^ i ^ key_val</span><br>    xor_result = transformed_val ^ i ^ key_val<br>    <br>    <span class="hljs-comment"># 开平方逆向计算原始字符值</span><br>    <span class="hljs-comment"># 由于字符值必须是整数，四舍五入后取整</span><br>    original_val = <span class="hljs-built_in">round</span>(math.sqrt(xor_result))<br>    <br>    <span class="hljs-comment"># 验证计算结果是否有效</span><br>    <span class="hljs-keyword">if</span> original_val * original_val != xor_result:<br>        <span class="hljs-comment"># 如果验证失败，尝试寻找最接近的整数解</span><br>        candidates = []<br>        <span class="hljs-keyword">for</span> candidate <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, original_val - <span class="hljs-number">2</span>), <span class="hljs-built_in">min</span>(<span class="hljs-number">0xFFFF</span>, original_val + <span class="hljs-number">3</span>)):<br>            <span class="hljs-keyword">if</span> candidate * candidate == xor_result:<br>                candidates.append(candidate)<br>        <br>        <span class="hljs-keyword">if</span> candidates:<br>            <span class="hljs-comment"># 优先选择可打印字符</span><br>            <span class="hljs-keyword">for</span> cand <span class="hljs-keyword">in</span> candidates:<br>                <span class="hljs-keyword">if</span> <span class="hljs-number">32</span> &lt;= cand &lt;= <span class="hljs-number">126</span>:  <span class="hljs-comment"># ASCII 可打印字符范围</span><br>                    original_val = cand<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                original_val = candidates[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 没有可打印字符则取第一个解</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 没有精确解时使用近似值（这种情况在正确输入下不应发生）</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;警告: 位置 <span class="hljs-subst">&#123;i&#125;</span> 无精确解，使用近似值 <span class="hljs-subst">&#123;original_val&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-comment"># 将数值转换回字符</span><br>    flag_chars.append(<span class="hljs-built_in">chr</span>(original_val))<br><br><span class="hljs-comment"># 组合最终 flag</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join(flag_chars)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密后的 Flag:&quot;</span>, flag)<br></code></pre></td></tr></table></figure><p>flag： BaseCTF{y0u_KnOw_UTF16_6uT_U_r_n0t_Cr@zym@n}</p><h2 id="15-UPX-PRO"><a href="#15-UPX-PRO" class="headerlink" title="15.UPX PRO"></a>15.UPX PRO</h2><p>有壳，脱壳失败，010看一下，改4F为F4：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250710204754663.png" alt="image-20250710204754663"></p><p>看加密逻辑：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250713203309949.png" alt="image-20250713203309949"></p><p> 基本确定就是RC4，不过是把加密的轮数从256改成了128了。那么有了密钥，以及加密结果，就可以写解密脚本了。</p><p> 这里还需要注意的是在写解密脚本的时候，ida反汇编出来的加密数据是小端序排列，我们在写解密脚本的时候需要用大端序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>(<span class="hljs-params">s, k2, Len_k2</span>):<br>    k = [<span class="hljs-number">0</span>] * <span class="hljs-number">128</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>):<br>        s[i] = i<br>        <span class="hljs-comment"># 完全匹配 C++ 代码的写法：k[i] = k[i % Len_k2]</span><br>        <span class="hljs-comment"># 在 Python 中，由于 k 初始化为全零，这等同于 k[i] = 0</span><br>        k[i] = k[i % Len_k2]<br>    <br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>):<br>        j = (j + s[i] + k[i]) % <span class="hljs-number">128</span><br>        s[i], s[j] = s[j], s[i]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">c4_decrypt</span>(<span class="hljs-params">Data, Len_D, k1, Len_k1</span>):<br>    s = [<span class="hljs-number">0</span>] * <span class="hljs-number">128</span><br>    init(s, k1, Len_k1)<br>    i = j = <span class="hljs-number">0</span><br>    <br>    decrypted = <span class="hljs-built_in">bytearray</span>()<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Len_D):<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">128</span><br>        j = (j + s[i]) % <span class="hljs-number">128</span><br>        s[i], s[j] = s[j], s[i]<br>        t = (s[i] + s[j]) % <span class="hljs-number">128</span><br>        <span class="hljs-comment"># 直接修改 Data 中的字节</span><br>        Data[k] ^= s[t]<br>    <br>    <span class="hljs-keyword">return</span> Data<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 密钥（必须与C++完全一致）</span><br>    key = <span class="hljs-string">b&quot;B2a0s2e40815&quot;</span><br>    <span class="hljs-built_in">print</span>(key.decode(<span class="hljs-string">&#x27;ascii&#x27;</span>))<br>    <br>    key_len = <span class="hljs-built_in">len</span>(key)<br>    <span class="hljs-comment"># 加密数据（与C++代码完全一致）</span><br>    encrypted_data = <span class="hljs-built_in">bytearray</span>([<br>        <span class="hljs-number">0x16</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x21</span>,<br>        <span class="hljs-number">0x08</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x5a</span>,<br>        <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x7c</span>,<br>        <span class="hljs-number">0x64</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x74</span><br>    ])<br>    <br>    <span class="hljs-comment"># 解密</span><br>    decrypted = c4_decrypt(encrypted_data, <span class="hljs-built_in">len</span>(encrypted_data), key, key_len)<br>    <br>    <span class="hljs-comment"># 输出结果（逐字符打印，与C++完全一致）</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密结果：&quot;</span>)<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> decrypted:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(b), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br>    <br>    <span class="hljs-comment"># 十六进制输出</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n十六进制形式：&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;b:02x&#125;</span>&#x27;</span> <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> decrypted))<br></code></pre></td></tr></table></figure><p>flag： BaseCTF{Rc4_1$_@_G0od_3nCrypt!on_MethOd}</p><h2 id="16-Dont-debug-me"><a href="#16-Dont-debug-me" class="headerlink" title="16.Dont-debug-me"></a>16.Dont-debug-me</h2><p>下断点动调一下：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250715153611861.png" alt="image-20250715153611861"></p><p>读读函数然后发现会按反调试走，那我们就可以：到了这，0000000000401F7D这一行的jz语句下方的两个箭头，右边这个在闪动，意思是下一步程序会往箭头所指的方向运行，那就是结束程序了，那么我们可以选择修改标志位寄存器，ZF，来进行绕过，</p><p>双击ZF的值，就可以修改了，修改为0就好了</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250715153522505.png" alt="image-20250715153522505"></p><p>flag：  BaseCTF{8ea2710a717f89d83af695d312fe3b625df14a6ba6b3a74e15ed1e2d35cb10}</p><h2 id="17-UPX-PRO-MAX"><a href="#17-UPX-PRO-MAX" class="headerlink" title="17.UPX PRO MAX"></a>17.UPX PRO MAX</h2><p>发现加壳且标志位被改为0：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250715220300501.png" alt="image-20250715220300501"></p><p>x64dbg打开程序，先F9运行，</p><p>再按几次F8，可以看到很明显就是ESP定律</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250715221505935.png" alt="image-20250715221505935"></p><p>鼠标光标放到RSP寄存器上，右键，</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250715231411811.png" alt="image-20250715231411811">点击在内存窗口中转到，然后右键，选择断点-&gt;硬件，访问-&gt;4字节，接着按几次F9运行，可以看到，</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250715231444015.png" alt="image-20250715231444015"></p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250715231509964.png" alt="image-20250715231509964"></p><p>第一个红色方框中的多个pop就说明解压已经结束，正要恢复现场，第二个红色方框中就是OEP了，然后我们只需F8通过jmp跳到正确有效函数的入口，</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250715231530613.png" alt="image-20250715231530613"></p><p>跳转到这，我们就可以使用插件 <strong>scylla</strong> 进行脱壳了，</p><p>好像可以在这里直接改：</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250715231607081.png" alt="image-20250715231607081"></p><p>可以看到使用插件，进程已经填好，OEP也填好了，我们只需点击Dump，然后保存好文件，</p><p>再点击IAT Autosearch,</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250715231632359.png" alt="image-20250715231632359"></p><p>看到IAT已找到，再点击Get Imports，</p><p><img src="/2025/07/15/2024basectf%EF%BC%88re%EF%BC%89/image-20250715231649626-1752592610441-1.png" alt="image-20250715231649626"></p><p>那个打叉的函数不管，另外三个是正常的，最后点击Fix Dump，选择我们刚才Dump下来的文件就可以了。最后分析的时候我们分析的是修复好的文件，<strong>UPX PRO MAX_dump_SCY.exe</strong></p><p>然后剩下的正常逆，发现是一个异或运算，直接套：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从C++代码中提取的加密数组</span><br>enc = [<span class="hljs-number">0x22</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x5C</span>,<br>       <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x34</span>,<br>       <span class="hljs-number">0x64</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x6D</span>,<br>       <span class="hljs-number">0x43</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x52</span>,<br>       <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x29</span>]<br><br><span class="hljs-comment"># 第一步：执行累积异或操作（从后向前）</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">41</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    enc[i - <span class="hljs-number">1</span>] ^= enc[i]<br><br><span class="hljs-comment"># 第二步：执行最终异或操作并构建flag</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(enc[j] ^ j ^ <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;&#125;&#x27;</span>)) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">42</span>)])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解出的flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">flag:   BaseCTF&#123;W3lC0M3_2_ReV3r$e_xOr_1s_$O_e<span class="hljs-symbol">@S</span>|!&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>逆向</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-2025一学年的总结</title>
    <link href="/2025/06/27/2024-2025%E4%B8%80%E5%AD%A6%E5%B9%B4%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <url>/2025/06/27/2024-2025%E4%B8%80%E5%AD%A6%E5%B9%B4%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="2024-2025一学年的总结"><a href="#2024-2025一学年的总结" class="headerlink" title="2024-2025一学年的总结"></a>2024-2025一学年的总结</h1><h2 id="9月"><a href="#9月" class="headerlink" title="9月"></a>9月</h2><p>加入网安社，突觉天地之无穷，宇宙之浩渺，我还是太菜了。打了basectf，启蒙比赛，u1s1题比较适合我，学了点密码，会了点python，哦思绪回到现在，密码水平，以我已知的密码水平为100的话，我现在的密码水平大概三四十吧，会一些简单的题罢了。</p><h2 id="10月"><a href="#10月" class="headerlink" title="10月"></a>10月</h2><p>学了Javaweb，继续学了密码</p><h2 id="11月"><a href="#11月" class="headerlink" title="11月"></a>11月</h2><p>打了金盾，继续学了密码</p><h2 id="12月"><a href="#12月" class="headerlink" title="12月"></a>12月</h2><p>学了某马经典xx外卖</p><h2 id="1月"><a href="#1月" class="headerlink" title="1月"></a>1月</h2><p>期末了，说结果吧，最后计组挂科，其他踩线过，得到了2.4的超低绩点</p><h2 id="2月、3月"><a href="#2月、3月" class="headerlink" title="2月、3月"></a>2月、3月</h2><p>寒假，用websocket写了个实时聊天的demo</p><h2 id="4月"><a href="#4月" class="headerlink" title="4月"></a>4月</h2><p>自己写了个类似论坛的网页，详情之前发过。学了点算法，蓝桥杯拿了个省二，对不起guoql神，给您丢脸了。痛失三百块</p><h2 id="5月"><a href="#5月" class="headerlink" title="5月"></a>5月</h2><p>iscc和御网，结果双双败北，让我感觉CTF比赛没那么有意思了，但解题还是很好玩的，只是比赛的话，额，其实还是因为我太菜了</p><h2 id="6月"><a href="#6月" class="headerlink" title="6月"></a>6月</h2><p>某点评写完了。又写了个rabbitMQ的demo，另外，我Apex白金了。</p>]]></content>
    
    
    <categories>
      
      <category>-日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rabbitMQ下载配置与demo测试</title>
    <link href="/2025/06/17/rabbitMQ%E4%B8%8B%E8%BD%BD%E9%85%8D%E7%BD%AE%E4%B8%8Edemo%E6%B5%8B%E8%AF%95/"/>
    <url>/2025/06/17/rabbitMQ%E4%B8%8B%E8%BD%BD%E9%85%8D%E7%BD%AE%E4%B8%8Edemo%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="rabbitMQ下载配置与demo测试"><a href="#rabbitMQ下载配置与demo测试" class="headerlink" title="rabbitMQ下载配置与demo测试"></a>rabbitMQ下载配置与demo测试</h1><h2 id="下载与配置文件"><a href="#下载与配置文件" class="headerlink" title="下载与配置文件"></a>下载与配置文件</h2><p>先下载Erlang  <a href="https://www.erlang.org/downloads">https://www.erlang.org/downloads</a>  ，找到符合自己windows的版本下载就好。</p><p>为什么要先下载这个东西，因为rabbitmq没法直接在windows上直接运行，因为我是windows，所以找到的方法就是这个，其他系统可以自行寻找方法。</p><p>下载之后安装，记住安装路径然后配置到环境变量，各位到rabbitmq了估计已经配过Java，MySQL和redis之类的了，方法差不多，但是注意：<strong>下载好的Erlang OTP中间是有空格的要改为ErlangOTP再添加到环境变量。</strong>（环境变量是不识别空格和中文的）</p><p>然后下载rabbitmq，<a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a>  ，选择 “Windows Installer” (.exe) 版本下载。然后安装，配置环境变量，注意：<strong>rabbitmq的不是bin而是sbin</strong></p><p>然后就能启动服务了：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 安装rabbitmq的服务</span><br>rabbitmq-service <span class="hljs-keyword">install</span><br><span class="hljs-comment"># 启动rabbitmq的服务</span><br>rabbitmq-service start<br><br></code></pre></td></tr></table></figure><p>RabbitMQ 自带 Web 管理页面，需要安装插件:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_management<br><br></code></pre></td></tr></table></figure><p>访问地址：</p><ul><li><a href="http://localhost:15672/">http://localhost:15672</a></li><li>默认账号密码为：guest &#x2F; guest</li></ul><p><strong>如果打不开可以尝试刷新几次，如果还是打不开清理一下换从重新启动服务即可</strong></p><h2 id="demo测试"><a href="#demo测试" class="headerlink" title="demo测试"></a>demo测试</h2><p>额，其实我不会rabbitmq，只知道她大概是个什么东西，所以扒了一个demo：</p><p>该项目实现了一个基于Spring Boot和RabbitMQ的消息队列基本功能，主要包括：</p><ol><li><p>RabbitMQ配置 <code>RabbitMQConfig</code> ：</p><ul><li>创建持久化队列 demo.queue</li><li>定义直连交换机 demo.exchange</li><li>绑定队列与交换机使用路由键 demo.key</li></ul></li><li><p>消息生产者 <code>MessageProducer</code> ：</p></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">send</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> message</span>) &#123;<br>    rabbitTemplate.<span class="hljs-title function_">convertAndSend</span>(<br>        <span class="hljs-title class_">RabbitMQConfig</span>.<span class="hljs-property">EXCHANGE_NAME</span>,<br>        <span class="hljs-title class_">RabbitMQConfig</span>.<span class="hljs-property">ROUTING_KEY</span>,<br>        message<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p> 消息消费者 <code>MessageConsumer</code> ：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RabbitListener</span>(queues = <span class="hljs-title class_">RabbitMQConfig</span>.<span class="hljs-property">QUEUE_NAME</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">receive</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> message</span>) &#123;<br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot; [x] Received: &quot;</span> + message);<br>&#125;<br></code></pre></td></tr></table></figure><p>启动时自动发送测试消息 <code>RabbitMqDemoTestApplication</code> ：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>... args</span>) &#123;<br>    messageProducer.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Hello from Spring Boot and RabbitMQ!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>当前实现功能：</p><ul><li>基本的消息生产消费流程</li><li>Spring Boot与RabbitMQ集成</li><li>直连交换机模式的消息路由</li><li>控制台打印发送&#x2F;接收记录</li></ul>]]></content>
    
    
    <categories>
      
      <category>-java -技术栈 -rabbitMQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>-java -技术栈 -rabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>这是一次测试</title>
    <link href="/2025/06/02/%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
    <url>/2025/06/02/%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><img src="/2025/06/02/%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87%E7%9A%84%E8%AE%BE%E7%BD%AE/test.png" alt="test"></p><p>shishi</p><p><a href="https://i-blog.csdnimg.cn/blog_migrate/b35fbbc13e7eb8df543f6ab255f0319b.jpeg">https://i-blog.csdnimg.cn/blog_migrate/b35fbbc13e7eb8df543f6ab255f0319b.jpeg</a></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/b35fbbc13e7eb8df543f6ab255f0319b.jpeg"></p><p><img src="/2025/06/02/%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8E%E5%9B%BE%E7%89%87%E7%9A%84%E8%AE%BE%E7%BD%AE/test.png" alt="test"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/06/01/hello-world/"/>
    <url>/2025/06/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025litCTF</title>
    <link href="/2025/05/30/2025litctf/"/>
    <url>/2025/05/30/2025litctf/</url>
    
    <content type="html"><![CDATA[<h1 id="2025litctf-这位师傅的wp好：-2025LitCTF–Crypto–WriteUp-litctf2025-CSDN博客"><a href="#2025litctf-这位师傅的wp好：-2025LitCTF–Crypto–WriteUp-litctf2025-CSDN博客" class="headerlink" title="2025litctf  这位师傅的wp好：    2025LitCTF–Crypto–WriteUp_litctf2025-CSDN博客"></a>2025litctf  这位师傅的wp好：    <a href="https://blog.csdn.net/2301_81161051/article/details/148230231">2025LitCTF–Crypto–WriteUp_litctf2025-CSDN博客</a></h1><h2 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> enc <span class="hljs-keyword">import</span> flag <br><br>m = bytes_to_long(flag)<br>n = getPrime(<span class="hljs-number">1024</span>)<br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 150624321883406825203208223877379141248303098639178939246561016555984711088281599451642401036059677788491845392145185508483430243280649179231349888108649766320961095732400297052274003269230704890949682836396267905946735114062399402918261536249386889450952744142006299684134049634061774475077472062182860181893</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 22100249806368901850308057097325161014161983862106732664802709096245890583327581696071722502983688651296445646479399181285406901089342035005663657920475988887735917901540796773387868189853248394801754486142362158369380296905537947192318600838652772655597241004568815762683630267295160272813021037399506007505</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>一个简单的欧拉函数题，直接n-1得到phi剩下的正常解就好了：</p><p>wp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># from enc import flag </span><br><br>n = <span class="hljs-number">150624321883406825203208223877379141248303098639178939246561016555984711088281599451642401036059677788491845392145185508483430243280649179231349888108649766320961095732400297052274003269230704890949682836396267905946735114062399402918261536249386889450952744142006299684134049634061774475077472062182860181893</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">22100249806368901850308057097325161014161983862106732664802709096245890583327581696071722502983688651296445646479399181285406901089342035005663657920475988887735917901540796773387868189853248394801754486142362158369380296905537947192318600838652772655597241004568815762683630267295160272813021037399506007505</span><br><br>e = <span class="hljs-number">65537</span><br><span class="hljs-comment"># c = pow(m,e,n)</span><br>phi=n-<span class="hljs-number">1</span><br>d=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br><br>LitCTF&#123;ee2c30dfe684f13a6e6c07b9ec90cc2c&#125;<br></code></pre></td></tr></table></figure><h2 id="ez-math（不会"><a href="#ez-math（不会" class="headerlink" title="ez_math（不会"></a>ez_math（不会</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> uuid <span class="hljs-keyword">import</span> uuid4<br><br>flag = <span class="hljs-string">b&#x27;LitCTF&#123;&#x27;</span>+ <span class="hljs-built_in">str</span>(uuid4()).encode() + <span class="hljs-string">b&#x27;&#125;&#x27;</span><br>flag = bytes_to_long(flag)<br>len_flag = flag.bit_length()<br>e = <span class="hljs-number">65537</span><br>p = getPrime(<span class="hljs-number">512</span>)<br>P = GF(p)<br>A = [[flag,                 getPrime(len_flag)],<br>     [getPrime(len_flag),   getPrime(len_flag)]]<br>A = matrix(P, A)<br>B = A ** e<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;B = <span class="hljs-subst">&#123;<span class="hljs-built_in">list</span>(B)&#125;</span>&quot;</span>.replace(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>).replace(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>))<br><br><span class="hljs-comment"># e = 65537</span><br><span class="hljs-comment"># p = 8147594556101158967571180945694180896742294483544853070485096002084187305007965554901340220135102394516080775084644243545680089670612459698730714507241869</span><br><span class="hljs-comment"># B = [[2155477851953408309667286450183162647077775173298899672730310990871751073331268840697064969968224381692698267285466913831393859280698670494293432275120170, 4113196339199671283644050914377933292797783829068402678379946926727565560805246629977929420627263995348168282358929186302526949449679561299204123214741547], [3652128051559825585352835887172797117251184204957364197630337114276860638429451378581133662832585442502338145987792778148110514594776496633267082169998598, 2475627430652911131017666156879485088601207383028954405788583206976605890994185119936790889665919339591067412273564551745588770370229650653217822472440992]]</span><br><br></code></pre></td></tr></table></figure><p>ai一把梭的</p><p>wp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>e = <span class="hljs-number">65537</span><br>p = <span class="hljs-number">8147594556101158967571180945694180896742294483544853070485096002084187305007965554901340220135102394516080775084644243545680089670612459698730714507241869</span><br>B = [[<span class="hljs-number">2155477851953408309667286450183162647077775173298899672730310990871751073331268840697064969968224381692698267285466913831393859280698670494293432275120170</span>, <span class="hljs-number">4113196339199671283644050914377933292797783829068402678379946926727565560805246629977929420627263995348168282358929186302526949449679561299204123214741547</span>], [<span class="hljs-number">3652128051559825585352835887172797117251184204957364197630337114276860638429451378581133662832585442502338145987792778148110514594776496633267082169998598</span>, <span class="hljs-number">2475627430652911131017666156879485088601207383028954405788583206976605890994185119936790889665919339591067412273564551745588770370229650653217822472440992</span>]]<br><br>Fp = GF(p)<br>B_matrix = matrix(Fp, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, B)<br><br>det_B = B_matrix.determinant()<br>tr_B = B_matrix.trace()<br><br>R.&lt;x&gt; = PolynomialRing(Fp, <span class="hljs-string">&#x27;x&#x27;</span>)<br>poly = x^<span class="hljs-number">2</span> - tr_B * x + det_B<br>roots = poly.roots()<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(roots) != <span class="hljs-number">2</span>:<br>    <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;B矩阵在GF(p)上没有两个特征值，无法解密。&quot;</span>)<br><br>mu1, _ = roots[<span class="hljs-number">0</span>]<br>mu2, _ = roots[<span class="hljs-number">1</span>]<br><br>d = inverse_mod(e, p-<span class="hljs-number">1</span>)  <span class="hljs-comment"># RSA解密指数</span><br><br>lambda1 = mu1 ** d  <span class="hljs-comment"># 直接幂运算</span><br>lambda2 = mu2 ** d<br><br>t = lambda1 + lambda2<br>det_A = lambda1 * lambda2<br><br><span class="hljs-comment"># 修正点：使用 ** (-1) 求逆</span><br>lambda1_e_minus_1 = mu1 * (lambda1 ** (-<span class="hljs-number">1</span>))  <span class="hljs-comment"># 等价于 lambda1^(e-1)</span><br>lambda2_e_minus_1 = mu2 * (lambda2 ** (-<span class="hljs-number">1</span>))<br><br>numerator_m = lambda1_e_minus_1 - lambda2_e_minus_1<br>denominator_k = lambda1 - lambda2<br><br>k_e = (mu1 - mu2) / denominator_k<br>m_e = -(det_A * numerator_m) / denominator_k<br><br>A00 = (B_matrix[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] - m_e) / k_e<br>A01 = B_matrix[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] / k_e<br>A10 = B_matrix[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] / k_e<br>A11 = (B_matrix[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] - m_e) / k_e<br><br><span class="hljs-keyword">assert</span> A00 + A11 == t, <span class="hljs-string">&quot;迹不匹配&quot;</span><br><span class="hljs-keyword">assert</span> A00 * A11 - A01 * A10 == det_A, <span class="hljs-string">&quot;行列式不匹配&quot;</span><br><br>flag = long_to_bytes(<span class="hljs-built_in">int</span>(A00))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag:&quot;</span>, flag.decode())<br></code></pre></td></tr></table></figure><p>看了眼大佬的：</p><p><a href="https://blog.csdn.net/2301_81161051/article/details/148230231">2025LitCTF–Crypto–WriteUp_litctf2025-CSDN博客</a></p><p><img src="/2025/05/30/2025litctf/QQ_1748581409954.png" alt="QQ_1748581409954"></p><h2 id="math"><a href="#math" class="headerlink" title="math"></a>math</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> enc <span class="hljs-keyword">import</span> flag<br><br>m = bytes_to_long(flag)<br>e = <span class="hljs-number">65537</span><br>p,q = getPrime(<span class="hljs-number">1024</span>),getPrime(<span class="hljs-number">1024</span>)<br>n = p*q<br>noise = getPrime(<span class="hljs-number">40</span>)<br>tmp1 = noise*p+noise*q<br>tmp2 = noise*noise<br>hint = p*q+tmp1+tmp2<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;hint = <span class="hljs-subst">&#123;hint&#125;</span>&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565066224724927142875488372745811265526082952677738164529563954987228906850399133238995317510054164641775620492640261304545177255239344267408541100183257566363663184114386155791750269054370153318333985294770328952530538998873255288249682710758780563400912097941615526239960620378046855974566511497666396320752739097426013141</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 1443781085228809103260687286964643829663045712724558803386592638665188285978095387180863161962724216167963654290035919557593637853286347618612161170407578261345832596144085802169614820425769327958192208423842665197938979924635782828703591528369967294598450115818251812197323674041438116930949452107918727347915177319686431081596379288639254670818653338903424232605790442382455868513646425376462921686391652158186913416425784854067607352211587156772930311563002832095834548323381414409747899386887578746299577314595641345032692386684834362470575165392266454078129135668153486829723593489194729482511596288603515252196</span><br><span class="hljs-string">hint = 17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565315879035806034866363781260326863226820493638303543900551786806420978685834963920605455531498816171226961859405498825422799670404315599803610007692517859020686506546933013150302023167306580068646104886750772590407299332549746317286972954245335810093049085813683948329319499796034424103981702702886662008367017860043529164</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>wp：素数分解delta一下就能得到noise进而求的p+q。详细大概是这样：</p><p><img src="/2025/05/30/2025litctf/QQ_1748253569490.png" alt="QQ_1748253569490"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">import</span> gmpy2<br><br>n = <span class="hljs-number">17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565066224724927142875488372745811265526082952677738164529563954987228906850399133238995317510054164641775620492640261304545177255239344267408541100183257566363663184114386155791750269054370153318333985294770328952530538998873255288249682710758780563400912097941615526239960620378046855974566511497666396320752739097426013141</span><br>hint = <span class="hljs-number">17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565315879035806034866363781260326863226820493638303543900551786806420978685834963920605455531498816171226961859405498825422799670404315599803610007692517859020686506546933013150302023167306580068646104886750772590407299332549746317286972954245335810093049085813683948329319499796034424103981702702886662008367017860043529164</span><br><br>delta = hint - n<br>noise = <span class="hljs-number">942430120937</span><br>s_pq_plus_num = delta // noise  <span class="hljs-comment"># 重新计算正确的因子组合</span><br><br><span class="hljs-comment"># 验证分解正确性</span><br><span class="hljs-keyword">if</span> noise * s_pq_plus_num != delta:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;错误: 因子乘积不等于delta&quot;</span>)<br>    exit()<br><br>s_pq = s_pq_plus_num - noise<br><br><span class="hljs-comment"># 计算二次方程判别式</span><br>D = s_pq**<span class="hljs-number">2</span> - <span class="hljs-number">4</span>*n<br>root, is_square = gmpy2.iroot(D, <span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_square:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;错误: 判别式D不是完全平方数&quot;</span>)<br>    exit()<br><br>p = (s_pq + root) // <span class="hljs-number">2</span><br>q = (s_pq - root) // <span class="hljs-number">2</span><br><br><span class="hljs-keyword">if</span> p * q != n:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;错误: p*q不等于n&quot;</span>)<br>    exit()<br><br><span class="hljs-comment"># 解密流程</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">1443781085228809103260687286964643829663045712724558803386592638665188285978095387180863161962724216167963654290035919557593637853286347618612161170407578261345832596144085802169614820425769327958192208423842665197938979924635782828703591528369967294598450115818251812197323674041438116930949452107918727347915177319686431081596379288639254670818653338903424232605790442382455868513646425376462921686391652158186913416425784854067607352211587156772930311563002832095834548323381414409747899386887578746299577314595641345032692386684834362470575165392266454078129135668153486829723593489194729482511596288603515252196</span><br><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密成功！Flag:&quot;</span>, long_to_bytes(m).decode())<br><br>LitCTF&#123;db6f52b9265971910b306754b9df8b76&#125;<br></code></pre></td></tr></table></figure><h2 id="baby"><a href="#baby" class="headerlink" title="baby"></a>baby</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> enc <span class="hljs-keyword">import</span> flag<br><br><br>m = bytes_to_long(flag)<br>g = getPrime(<span class="hljs-number">512</span>)<br>t = getPrime(<span class="hljs-number">150</span>)<br>data = (t * gmpy2.invert(m, g)) % g<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;g = <span class="hljs-subst">&#123;g&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;data = <span class="hljs-subst">&#123;data&#125;</span>&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">g = 7835965640896798834809247993719156202474265737048568647376673642017466116106914666363462292416077666356578469725971587858259708356557157689066968453881547</span><br><span class="hljs-string">data = 2966297990428234518470018601566644093790837230283136733660201036837070852272380968379055636436886428180671888655884680666354402224746495312632530221228498</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>wp：</p><p><img src="/2025/05/30/2025litctf/QQ_1748530244744.png" alt="QQ_1748530244744"></p><p><img src="/2025/05/30/2025litctf/QQ_1748530270354.png" alt="QQ_1748530270354"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fractions <span class="hljs-keyword">import</span> Fraction<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse, long_to_bytes<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-comment"># 已知数据</span><br>g = <span class="hljs-number">7835965640896798834809247993719156202474265737048568647376673642017466116106914666363462292416077666356578469725971587858259708356557157689066968453881547</span><br>data = <span class="hljs-number">2966297990428234518470018601566644093790837230283136733660201036837070852272380968379055636436886428180671888655884680666354402224746495312632530221228498</span><br><br><span class="hljs-comment"># 手动实现连分数系数生成（基于欧几里得算法）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_continued_fraction</span>(<span class="hljs-params">a, b</span>):<br>    coeffs = []<br>    <span class="hljs-keyword">while</span> b != <span class="hljs-number">0</span>:<br>        q, r = <span class="hljs-built_in">divmod</span>(a, b)<br>        coeffs.append(q)<br>        a, b = b, r<br>    <span class="hljs-keyword">return</span> coeffs<br><br><span class="hljs-comment"># 生成连分数系数</span><br>coeffs = generate_continued_fraction(data, g)<br><br><span class="hljs-comment"># 手动实现收敛项生成</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_convergents</span>(<span class="hljs-params">coeffs</span>):<br>    convergents = []<br>    h1, h2 = <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    k1, k2 = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> coeffs:<br>        h = c * h1 + h2<br>        k = c * k1 + k2<br>        convergents.append(Fraction(h, k))<br>        h2, h1 = h1, h<br>        k2, k1 = k1, k<br>    <span class="hljs-keyword">return</span> convergents<br><br>conv_list = get_convergents(coeffs)<br><br><span class="hljs-comment"># 枚举收敛项</span><br><span class="hljs-keyword">for</span> conv <span class="hljs-keyword">in</span> conv_list:<br>    h, k = conv.numerator, conv.denominator<br>    t_candidate = data * k - g * h<br>    <span class="hljs-keyword">if</span> t_candidate &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> t_candidate.bit_length() == <span class="hljs-number">150</span>:<br>        <span class="hljs-keyword">if</span> gmpy2.is_prime(t_candidate):<br>            <span class="hljs-keyword">try</span>:<br>                inv_m = inverse(k, g)<br>                <span class="hljs-keyword">if</span> (t_candidate * inv_m) % g == data:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Found valid m:&quot;</span>, k)<br>                    flag = long_to_bytes(k)<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag:&quot;</span>, flag.decode())<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">pass</span><br>            <br>Found valid m: <span class="hljs-number">637558173724466419510759412644075143734813144557473543913639658885806728973294110666447896405373</span><br>Flag: LitCTF&#123;56008a819331c9f3608a718327b7e6ce&#125;<br></code></pre></td></tr></table></figure><h2 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> enc <span class="hljs-keyword">import</span> flag<br><br>m = bytes_to_long(flag)<br>p,q,e = getPrime(<span class="hljs-number">1024</span>),getPrime(<span class="hljs-number">1024</span>),getPrime(<span class="hljs-number">101</span>)<br>n = p*q<br>temp = gmpy2.invert(e,p-<span class="hljs-number">1</span>)<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br>hint = temp&gt;&gt;<span class="hljs-number">180</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;hint = <span class="hljs-subst">&#123;hint&#125;</span>&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">e = 1915595112993511209389477484497</span><br><span class="hljs-string">n = 12058282950596489853905564906853910576358068658769384729579819801721022283769030646360180235232443948894906791062870193314816321865741998147649422414431603039299616924238070704766273248012723702232534461910351418959616424998310622248291946154911467931964165973880496792299684212854214808779137819098357856373383337861864983040851365040402759759347175336660743115085194245075677724908400670513472707204162448675189436121439485901172477676082718531655089758822272217352755724670977397896215535981617949681898003148122723643223872440304852939317937912373577272644460885574430666002498233608150431820264832747326321450951</span><br><span class="hljs-string">c = 5408361909232088411927098437148101161537011991636129516591281515719880372902772811801912955227544956928232819204513431590526561344301881618680646725398384396780493500649993257687034790300731922993696656726802653808160527651979428360536351980573727547243033796256983447267916371027899350378727589926205722216229710593828255704443872984334145124355391164297338618851078271620401852146006797653957299047860900048265940437555113706268887718422744645438627302494160620008862694047022773311552492738928266138774813855752781598514642890074854185464896060598268009621985230517465300289580941739719020511078726263797913582399</span><br><span class="hljs-string">hint = 10818795142327948869191775315599184514916408553660572070587057895748317442312635789407391509205135808872509326739583930473478654752295542349813847128992385262182771143444612586369461112374487380427668276692719788567075889405245844775441364204657098142930</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p><img src="/2025/05/30/2025litctf/QQ_1748584867976.png" alt="QQ_1748584867976"></p><p>wp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> itertools<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">small_roots</span>(<span class="hljs-params">f, bounds, m=<span class="hljs-number">1</span>, d=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> d:<br>        d = f.degree()<br><br>    R = f.base_ring()<br>    N = R.cardinality()<br><br>    f /= f.coefficients().pop(<span class="hljs-number">0</span>)<br>    f = f.change_ring(ZZ)<br><br>    G = <span class="hljs-type">Sequence</span>([], f.parent())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m + <span class="hljs-number">1</span>):<br>        base = N ^ (m - i) * f ^ i<br>        <span class="hljs-keyword">for</span> shifts <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(d), repeat=f.nvariables()):<br>            g = base * prod(<span class="hljs-built_in">map</span>(power, f.variables(), shifts))<br>            G.append(g)<br><br>    B, monomials = G.coefficient_matrix()<br>    monomials = vector(monomials)<br><br>    factors = [monomial(*bounds) <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> monomials]<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, factor)<br><br>    B = B.dense_matrix().LLL()<br><br>    B = B.change_ring(QQ)<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, <span class="hljs-number">1</span> / factor)<br><br>    H = <span class="hljs-type">Sequence</span>([], f.parent().change_ring(QQ))<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, B * monomials):<br>        H.append(h)<br>        I = H.ideal()<br>        <span class="hljs-keyword">if</span> I.dimension() == -<span class="hljs-number">1</span>:<br>            H.pop()<br>        <span class="hljs-keyword">elif</span> I.dimension() == <span class="hljs-number">0</span>:<br>            roots = []<br>            <span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> I.variety(ring=ZZ):<br>                root = <span class="hljs-built_in">tuple</span>(R(root[var]) <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> f.variables())<br>                roots.append(root)<br>            <span class="hljs-keyword">return</span> roots<br><br>    <span class="hljs-keyword">return</span> []<br><br><br>e = <span class="hljs-number">1915595112993511209389477484497</span><br>n = <span class="hljs-number">12058282950596489853905564906853910576358068658769384729579819801721022283769030646360180235232443948894906791062870193314816321865741998147649422414431603039299616924238070704766273248012723702232534461910351418959616424998310622248291946154911467931964165973880496792299684212854214808779137819098357856373383337861864983040851365040402759759347175336660743115085194245075677724908400670513472707204162448675189436121439485901172477676082718531655089758822272217352755724670977397896215535981617949681898003148122723643223872440304852939317937912373577272644460885574430666002498233608150431820264832747326321450951</span><br>c = <span class="hljs-number">5408361909232088411927098437148101161537011991636129516591281515719880372902772811801912955227544956928232819204513431590526561344301881618680646725398384396780493500649993257687034790300731922993696656726802653808160527651979428360536351980573727547243033796256983447267916371027899350378727589926205722216229710593828255704443872984334145124355391164297338618851078271620401852146006797653957299047860900048265940437555113706268887718422744645438627302494160620008862694047022773311552492738928266138774813855752781598514642890074854185464896060598268009621985230517465300289580941739719020511078726263797913582399</span><br>hint = <span class="hljs-number">10818795142327948869191775315599184514916408553660572070587057895748317442312635789407391509205135808872509326739583930473478654752295542349813847128992385262182771143444612586369461112374487380427668276692719788567075889405245844775441364204657098142930</span><br><br>R.&lt;dp_low, k&gt;=PolynomialRing(Zmod(n))<br><br>f = e * (hint * <span class="hljs-number">2</span> ** <span class="hljs-number">180</span> + dp_low) + k - <span class="hljs-number">1</span><br><br>ans, k=small_roots(f, [<span class="hljs-number">2</span> ** <span class="hljs-number">180</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">100</span>], <span class="hljs-number">1</span>, <span class="hljs-number">3</span>)[<span class="hljs-number">0</span>]<br><br>dp = hint * <span class="hljs-number">2</span> ** <span class="hljs-number">180</span> + ans<br>p = (e * dp - <span class="hljs-number">1</span>) // k + <span class="hljs-number">1</span><br><br>d = inverse(e, <span class="hljs-built_in">int</span>(p - <span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">pow</span>(c, d, p)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(m)))<br><span class="hljs-comment"># b&#x27;LitCTF&#123;03ecda15d1a89b06454c6050c1bd489f&#125;&#x27;</span><br><br></code></pre></td></tr></table></figure><h2 id="new-bag"><a href="#new-bag" class="headerlink" title="new_bag"></a>new_bag</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag</span>(<span class="hljs-params">length</span>):<br>    characters = string.ascii_letters + string.digits + <span class="hljs-string">&#x27;_&#x27;</span><br>    flag = <span class="hljs-string">&#x27;LitCTF&#123;&#x27;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(characters) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length)) + <span class="hljs-string">&#x27;&#125;&#x27;</span><br>    <span class="hljs-keyword">return</span> flag.encode()<br><br>flag = get_flag(<span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(flag)<br>flag = <span class="hljs-built_in">bin</span>(bytes_to_long(flag))[<span class="hljs-number">2</span>:]<br><br>p = getPrime(<span class="hljs-number">128</span>)<br>pubkey = [getPrime(<span class="hljs-number">128</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag))]<br>enc = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    enc += pubkey[i] * <span class="hljs-built_in">int</span>(flag[i])<br>    enc %= p<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br>f.write(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>\n&quot;</span>)<br>f.write(<span class="hljs-string">f&quot;pubkey = <span class="hljs-subst">&#123;pubkey&#125;</span>\n&quot;</span>)<br>f.write(<span class="hljs-string">f&quot;enc = <span class="hljs-subst">&#123;enc&#125;</span>\n&quot;</span>)<br>f.close()<br><br></code></pre></td></tr></table></figure><p>数据：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">p</span> = <span class="hljs-number">173537234562263850990112795836487093439</span><br><span class="hljs-attr">pubkey</span> = [<span class="hljs-number">184316235755254907483728080281053515467</span>, <span class="hljs-number">301753295242660201987730522100674059399</span>, <span class="hljs-number">214746865948159247109907445342727086153</span>, <span class="hljs-number">190710765981032078577562674498245824397</span>, <span class="hljs-number">331594659178887289573546882792969306963</span>, <span class="hljs-number">325241251857446530306000904015122540537</span>, <span class="hljs-number">183138087354043440402018216471847480597</span>, <span class="hljs-number">184024660891182404534278014517267677121</span>, <span class="hljs-number">221852419056451630727726571924370029193</span>, <span class="hljs-number">252122782233143392994310666727549089119</span>, <span class="hljs-number">175886223097788623718858806338121455451</span>, <span class="hljs-number">275410728642596840638045777234465661687</span>, <span class="hljs-number">251664694235514793799312335012668142813</span>, <span class="hljs-number">218645272462591891220065928162159215543</span>, <span class="hljs-number">312223630454310643034351163568776055567</span>, <span class="hljs-number">246969281206041998865813427647656760287</span>, <span class="hljs-number">314861458279166374375088099707870061461</span>, <span class="hljs-number">264293021895772608566300156292334238719</span>, <span class="hljs-number">300802209357110221724717494354120213867</span>, <span class="hljs-number">293825386566202476683406032420716750733</span>, <span class="hljs-number">280164880535680245461599240490036536891</span>, <span class="hljs-number">223138633045675121340315815489781884671</span>, <span class="hljs-number">194958151408670059556476901479795911187</span>, <span class="hljs-number">180523100489259027750075460231138785329</span>, <span class="hljs-number">180425435626797251881104654861163883059</span>, <span class="hljs-number">313871202884226454316190668965524324023</span>, <span class="hljs-number">184833541398593696671625353250714719537</span>, <span class="hljs-number">217497008601504809464374671355532403921</span>, <span class="hljs-number">246589067140439936215888566305171004301</span>, <span class="hljs-number">289015788017956436490096615142465503023</span>, <span class="hljs-number">301775305365100149653555500258867275677</span>, <span class="hljs-number">185893637147914858767269807046039030871</span>, <span class="hljs-number">319328260264390422708186053639594729851</span>, <span class="hljs-number">196198701308135383224057395173059054757</span>, <span class="hljs-number">231185775704496628532348037721799493511</span>, <span class="hljs-number">243973313872552840389840048418558528537</span>, <span class="hljs-number">213140279661565397451805047456032832611</span>, <span class="hljs-number">310386296949148370235845491986451639013</span>, <span class="hljs-number">228492979916155878048849684460007011451</span>, <span class="hljs-number">240557187581619139147592264130657066299</span>, <span class="hljs-number">187388364905654342761169670127101032713</span>, <span class="hljs-number">305292765113810142043496345097024570233</span>, <span class="hljs-number">303823809595161213886303993298011013599</span>, <span class="hljs-number">227663140954563126349665813092551336597</span>, <span class="hljs-number">257833881948992845466919654910838972461</span>, <span class="hljs-number">291249161813309696736659661907363469657</span>, <span class="hljs-number">228470133121759300620143703381920625589</span>, <span class="hljs-number">337912208888617180835513160742872043511</span>, <span class="hljs-number">252639095930536359128379880984347614689</span>, <span class="hljs-number">306613178720695137374121633131944714277</span>, <span class="hljs-number">328627523443531702430603855075960220403</span>, <span class="hljs-number">283995291614222889691668376952473718279</span>, <span class="hljs-number">185992200035693404743830210660606140043</span>, <span class="hljs-number">175575945935802771832062328390060568381</span>, <span class="hljs-number">239709736751531517044198331233711541211</span>, <span class="hljs-number">325191992201185112802734343474281930993</span>, <span class="hljs-number">285825734319916654888050222626163129503</span>, <span class="hljs-number">260820892372814862728958615462018022903</span>, <span class="hljs-number">271109638409686342632742230596810197399</span>, <span class="hljs-number">195432366301516284662210689868561107229</span>, <span class="hljs-number">252351678712166898804432075801905414141</span>, <span class="hljs-number">175869608753229067314866329908981554323</span>, <span class="hljs-number">212291732707466211705141589249474157597</span>, <span class="hljs-number">299891357045144243959903067354676661051</span>, <span class="hljs-number">271237385422923460052644584552894282763</span>, <span class="hljs-number">268702576849722796315440463412052409241</span>, <span class="hljs-number">198273535005705777854651218089804228523</span>, <span class="hljs-number">177684355989910045168511400849036259973</span>, <span class="hljs-number">189237944200991357454773904466163557789</span>, <span class="hljs-number">175427967765368330787115337317676160499</span>, <span class="hljs-number">270446056495616077936737430232108222303</span>, <span class="hljs-number">243318639972702711024520926308402316247</span>, <span class="hljs-number">223872107662231922057872197123261908053</span>, <span class="hljs-number">268995355861070998347238198063073079851</span>, <span class="hljs-number">244478236168888494353493404999149985963</span>, <span class="hljs-number">230731375083676409248450208772518041369</span>, <span class="hljs-number">231630208287176700035265642824425872113</span>, <span class="hljs-number">187649298194887119502654724235771449423</span>, <span class="hljs-number">264924369987111619306245625770849264491</span>, <span class="hljs-number">327092811483332202721992798797117253283</span>, <span class="hljs-number">274967838920225995524024619709213673571</span>, <span class="hljs-number">313836314009366857157961838519499192671</span>, <span class="hljs-number">181860768653760352435352944732117309357</span>, <span class="hljs-number">184011200837375425882494435177626368109</span>, <span class="hljs-number">246455975565763627776562816894916143559</span>, <span class="hljs-number">262208917125258935991543552004318662109</span>, <span class="hljs-number">334006940602786701813813048552124976177</span>, <span class="hljs-number">241119397420390120456580389194328607351</span>, <span class="hljs-number">255370083166310325724283692646412327547</span>, <span class="hljs-number">280056982387584554076672702548437488901</span>, <span class="hljs-number">190822826881447578202544631446213911541</span>, <span class="hljs-number">206119293866065537243159766877834200177</span>, <span class="hljs-number">289535246575130471484249052043282790337</span>, <span class="hljs-number">222004375767927951747133364917437739627</span>, <span class="hljs-number">186041951615746748538744491355290007923</span>, <span class="hljs-number">299120276948597373232905692530626175519</span>, <span class="hljs-number">268645812049699572580085139845553457511</span>, <span class="hljs-number">231990902203442306941381714523426756489</span>, <span class="hljs-number">259677531562170067444672097354970172129</span>, <span class="hljs-number">232573792063456357545735601063504090387</span>, <span class="hljs-number">268451806037215206985127877726665463011</span>, <span class="hljs-number">324266632324016349795115268035757999593</span>, <span class="hljs-number">323952615081869295386415078624753400501</span>, <span class="hljs-number">302316593553669781596237136546083536339</span>, <span class="hljs-number">235576231941572491681115931798290883659</span>, <span class="hljs-number">202271277470197960243533508432663735031</span>, <span class="hljs-number">172391954991101354275650988921310984563</span>, <span class="hljs-number">215333185856183701105529790905068832303</span>, <span class="hljs-number">335916893044781805453250006520700519353</span>, <span class="hljs-number">217268288923298532517983372665872329797</span>, <span class="hljs-number">265455575922780577837866687874732212733</span>, <span class="hljs-number">182194442259001995170676842797322170297</span>, <span class="hljs-number">180222796978664332193987060700843734759</span>, <span class="hljs-number">332629077640484670095070754759241249101</span>, <span class="hljs-number">238815683708676274248277883404136375767</span>, <span class="hljs-number">246167709707533867216616011486975023679</span>, <span class="hljs-number">188375282015595301232040104228085154549</span>, <span class="hljs-number">230675799347049231846866057019582889423</span>, <span class="hljs-number">290911573230654740468234181613682439691</span>, <span class="hljs-number">173178956820933028868714760884278201561</span>, <span class="hljs-number">340087079300305236498945763514358009773</span>, <span class="hljs-number">215775253913162994758086261347636015049</span>, <span class="hljs-number">286306008278685809877266756697807931889</span>, <span class="hljs-number">175231652202310718229276393280541484041</span>, <span class="hljs-number">230887015177563361309867021497576716609</span>, <span class="hljs-number">306478031708687513424095160106047572447</span>, <span class="hljs-number">172289054804425429042492673052057816187</span>]<br><span class="hljs-attr">enc</span> = <span class="hljs-number">82516114905258351634653446232397085739</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>密码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>密码</tag>
      
      <tag>校赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025XYCTFCTF</title>
    <link href="/2025/04/17/2025XYCTF/"/>
    <url>/2025/04/17/2025XYCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="连接端口"><a href="#连接端口" class="headerlink" title="连接端口"></a>连接端口</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io = remote(<span class="hljs-string">&#x27;gz.imxbt.cn&#x27;</span>, <span class="hljs-number">20611</span>)<br><span class="hljs-built_in">print</span>(io.recv().decode())  <span class="hljs-comment"># 打印欢迎信息</span><br>io.interactive()          <span class="hljs-comment"># 进入交互模式（手动输入）</span><br></code></pre></td></tr></table></figure><h1 id="Division"><a href="#Division" class="headerlink" title="Division"></a>Division</h1><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">@File    :   server.py</span><br><span class="hljs-string">@Time    :   2025/03/20 12:25:03</span><br><span class="hljs-string">@Author  :   LamentXU </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> random <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----Welcome to my division calc----&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">menu:</span><br><span class="hljs-string">      [1]  Division calc</span><br><span class="hljs-string">      [2]  Get flag</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    choose = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;: &gt;&gt;&gt; &#x27;</span>)<br>    <span class="hljs-keyword">if</span> choose == <span class="hljs-string">&#x27;1&#x27;</span>:<br>        <span class="hljs-keyword">try</span>:<br>            denominator = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;input the denominator: &gt;&gt;&gt; &#x27;</span>))<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;INPUT NUMBERS&#x27;</span>)<br>            <span class="hljs-keyword">continue</span><br>        nominator = random.getrandbits(<span class="hljs-number">32</span>)<br>        <span class="hljs-keyword">if</span> denominator == <span class="hljs-string">&#x27;0&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NO YOU DONT&#x27;</span>)<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;nominator&#125;</span>//<span class="hljs-subst">&#123;denominator&#125;</span> = <span class="hljs-subst">&#123;nominator//denominator&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> choose == <span class="hljs-string">&#x27;2&#x27;</span>:<br>        <span class="hljs-keyword">try</span>:<br>            ans = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;input the answer: &gt;&gt;&gt; &#x27;</span>)<br>            rand1 = random.getrandbits(<span class="hljs-number">11000</span>)<br>            rand2 = random.getrandbits(<span class="hljs-number">10000</span>)<br>            correct_ans = rand1 // rand2<br>            <span class="hljs-keyword">if</span> correct_ans == <span class="hljs-built_in">int</span>(ans):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;WOW&#x27;</span>)<br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Here is your flag: <span class="hljs-subst">&#123;f.read()&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;NOPE, the correct answer is <span class="hljs-subst">&#123;correct_ans&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;INPUT NUMBERS&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Invalid choice&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这是一个伪随机数加密类的题，他是通过除输入的分母1，进行624次，得出内部结构，因此可以预测接下来的数。又由于是11000位和10000位相除，所以精度不必那么高（可以是32的n倍直接求，当然切割也行）<br>注意要精确截取，ai生成的有点小问题，但这位师傅的没问题，稳得一批</p><p>文章参考：[<a href="https://blog.csdn.net/qq_42557115/article/details/128228201?spm=1001.2014.3001.5502">CTF&#x2F;randcrack]python随机数预测模块分析及改进方案_random.getrandbits(32)-CSDN博客</a></p><p>wp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *       <span class="hljs-comment"># 用于网络交互的基础库</span><br><span class="hljs-keyword">from</span> randcrack <span class="hljs-keyword">import</span> RandCrack  <span class="hljs-comment"># MT19937预测器库</span><br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> trange  <span class="hljs-comment"># 进度条显示</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    主函数：实现完整的攻击流程</span><br><span class="hljs-string">    原理：</span><br><span class="hljs-string">    1. MT19937伪随机数生成器基于624个32位内部状态</span><br><span class="hljs-string">    2. 收集624个连续生成的随机数即可重建完整状态</span><br><span class="hljs-string">    3. 利用重建的状态可以预测后续所有随机数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <br>    <span class="hljs-comment"># ==================== 初始化阶段 ====================</span><br>    <span class="hljs-comment"># 初始化预测器对象</span><br>    rc = RandCrack()  <span class="hljs-comment"># 创建MT19937状态预测器</span><br>    <br>    <span class="hljs-comment"># 建立与服务器的连接（重要：确认端口正确性）</span><br>    <span class="hljs-comment"># 注意：这里使用pwntools的remote函数连接指定IP和端口</span><br>    p = remote(<span class="hljs-string">&quot;39.106.69.240&quot;</span>, <span class="hljs-number">24578</span>)  <span class="hljs-comment"># 题目给定的服务器地址和端口</span><br><br>    <span class="hljs-comment"># ================== 状态收集阶段 ====================</span><br>    <span class="hljs-comment"># 需要收集624个连续生成的32位随机数</span><br>    <span class="hljs-comment"># 进度条显示增强交互体验（trange是tqdm的进度条封装）</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> trange(<span class="hljs-number">624</span>, desc=<span class="hljs-string">&quot;Collecting states&quot;</span>):<br>        <span class="hljs-comment"># 发送选项1进入除法计算模式</span><br>        p.sendlineafter(<span class="hljs-string">b&quot;: &gt;&gt;&gt;&quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>)  <span class="hljs-comment"># 当接收到&quot;: &gt;&gt;&gt;&quot;提示时发送选项1</span><br>        <br>        <span class="hljs-comment"># 发送分母1（关键：确保每次计算的分母为1）</span><br>        p.sendlineafter(<span class="hljs-string">b&quot;denominator: &gt;&gt;&gt;&quot;</span>, <span class="hljs-string">b&quot;1&quot;</span>)  <span class="hljs-comment"># 分母设置为1使结果等于分子</span><br>        <br>        <span class="hljs-comment"># 接收服务器响应并解析分子值</span><br>        <span class="hljs-comment"># 响应格式示例：&quot;4294967295//1 = 4294967295&quot;</span><br>        line = p.recvline().decode()     <span class="hljs-comment"># 接收完整响应行</span><br>        numerator = <span class="hljs-built_in">int</span>(line.split(<span class="hljs-string">&#x27;//&#x27;</span>)[<span class="hljs-number">0</span>].strip())  <span class="hljs-comment"># 提取&#x27;//&#x27;前的分子部分</span><br>        <br>        <span class="hljs-comment"># 将分子提交给预测器重建内部状态</span><br>        rc.submit(numerator)  <span class="hljs-comment"># 每次submit会更新预测器的内部状态</span><br><br>    <span class="hljs-comment"># ================ 随机数预测阶段 ====================</span><br>    <span class="hljs-comment"># 生成第一个大整数（11000位）</span><br>    <span class="hljs-comment"># 原理：</span><br>    <span class="hljs-comment"># 1. predict_getrandbits(n)会自动计算需要生成多少次32位随机数</span><br>    <span class="hljs-comment"># 2. 11000位需要344次32位生成（344*32=11008位），然后截取前11000位</span><br>    rand1 = rc.predict_getrandbits(<span class="hljs-number">11000</span>)  <span class="hljs-comment"># 预测11000位随机整数</span><br>    <br>    <span class="hljs-comment"># 生成第二个大整数（10000位）</span><br>    <span class="hljs-comment"># 同理需要313次32位生成（313*32=10016位），截取前10000位</span><br>    rand2 = rc.predict_getrandbits(<span class="hljs-number">10000</span>)  <span class="hljs-comment"># 预测10000位随机整数</span><br>    <br>    <span class="hljs-comment"># 计算整除结果（服务器验证的核心）</span><br>    ans = rand1 // rand2  <span class="hljs-comment"># 大整数除法，Python天然支持高精度计算</span><br><br>    <span class="hljs-comment"># ================== 答案提交阶段 ====================</span><br>    <span class="hljs-comment"># 发送选项2进入答案提交模式</span><br>    p.sendlineafter(<span class="hljs-string">b&quot;: &gt;&gt;&gt;&quot;</span>, <span class="hljs-string">b&quot;2&quot;</span>)  <span class="hljs-comment"># 当出现提示时发送选项2</span><br>    <br>    <span class="hljs-comment"># 提交计算结果（必须转换为字符串格式）</span><br>    p.sendlineafter(<span class="hljs-string">b&quot;answer: &gt;&gt;&gt;&quot;</span>, <span class="hljs-built_in">str</span>(ans).encode())  <span class="hljs-comment"># 编码为字节流发送</span><br><br>    <span class="hljs-comment"># ================== 获取Flag阶段 ====================</span><br>    <span class="hljs-comment"># 进入交互模式查看服务器返回结果</span><br>    <span class="hljs-comment"># 成功时会返回包含flag的信息，失败则显示错误提示</span><br>    p.interactive()  <span class="hljs-comment"># 保持连接交互，直到手动退出</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 执行主函数</span><br>    main()<br></code></pre></td></tr></table></figure><h1 id="Complex-signin"><a href="#Complex-signin" class="headerlink" title="Complex_signin"></a>Complex_signin</h1><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ChaCha20<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, re, im</span>):<br>        <span class="hljs-variable language_">self</span>.re = re<br>        <span class="hljs-variable language_">self</span>.im = im<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__mul__</span>(<span class="hljs-params">self, c</span>):<br>        re_ = <span class="hljs-variable language_">self</span>.re * c.re - <span class="hljs-variable language_">self</span>.im * c.im<br>        im_ = <span class="hljs-variable language_">self</span>.re * c.im + <span class="hljs-variable language_">self</span>.im * c.re<br>        <span class="hljs-keyword">return</span> Complex(re_, im_)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, c</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.re == c.re <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.im == c.im<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__rshift__</span>(<span class="hljs-params">self, m</span>):<br>        <span class="hljs-keyword">return</span> Complex(<span class="hljs-variable language_">self</span>.re &gt;&gt; m, <span class="hljs-variable language_">self</span>.im &gt;&gt; m)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__lshift__</span>(<span class="hljs-params">self, m</span>):<br>        <span class="hljs-keyword">return</span> Complex(<span class="hljs-variable language_">self</span>.re &lt;&lt; m, <span class="hljs-variable language_">self</span>.im &lt;&lt; m)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.im == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(<span class="hljs-variable language_">self</span>.re)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>.re == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(<span class="hljs-variable language_">self</span>.im) == <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">if</span> self.im &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span>&#125;</span>i&quot;</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.im&#125;</span>i&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;self.re&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-string">&#x27;+&#x27;</span> <span class="hljs-keyword">if</span> self.im &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;-&#x27;</span>&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-built_in">abs</span>(self.im)&#125;</span>i&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tolist</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> [<span class="hljs-variable language_">self</span>.re, <span class="hljs-variable language_">self</span>.im]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">complex_pow</span>(<span class="hljs-params">c, exp, n</span>):<br>    result = Complex(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">while</span> exp &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> exp &amp; <span class="hljs-number">1</span>:<br>            result = result * c<br>            result.re = result.re % n<br>            result.im = result.im % n<br>        c = c * c<br>        c.re = c.re % n<br>        c.im = c.im % n<br>        exp &gt;&gt;= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> result<br><br>bits = <span class="hljs-number">128</span><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>m = Complex(getRandomRange(<span class="hljs-number">1</span>, n), getRandomRange(<span class="hljs-number">1</span>, n))<br>e = <span class="hljs-number">3</span><br>c = complex_pow(m, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;mh = <span class="hljs-subst">&#123;(m &gt;&gt; bits &lt;&lt; bits).tolist()&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;C = <span class="hljs-subst">&#123;c.tolist()&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;enc = <span class="hljs-subst">&#123;ChaCha20.new(key=hashlib.sha256(<span class="hljs-built_in">str</span>(m.re + m.im).encode()).digest(), nonce=<span class="hljs-string">b&#x27;Pr3d1ctmyxjj&#x27;</span>).encrypt(flag)&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753</span><br><span class="hljs-string">mh = [3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016, 15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552]</span><br><span class="hljs-string">C = [5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760, 21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752]</span><br><span class="hljs-string">enc = b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>题解：</p><p><img src="/2025/04/17/2025XYCTF/5E283890C76F7FF717066E073BA880D8.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sage</span><br><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *  <span class="hljs-comment"># 导入SageMath的数学库</span><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ChaCha20  <span class="hljs-comment"># 导入ChaCha20加密库</span><br><span class="hljs-keyword">import</span> hashlib  <span class="hljs-comment"># 导入哈希函数库</span><br><span class="hljs-keyword">import</span> itertools  <span class="hljs-comment"># 导入迭代工具库</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">small_roots</span>(<span class="hljs-params">f, bounds, m=<span class="hljs-number">1</span>, d=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    使用Coppersmith方法求解多项式的小根</span><br><span class="hljs-string">    参数：</span><br><span class="hljs-string">        f: 需要求解的多项式</span><br><span class="hljs-string">        bounds: 变量的上界（如(2^128, 2^128)）</span><br><span class="hljs-string">        m: LLL算法的参数（影响格的构造）</span><br><span class="hljs-string">        d: 多项式的最大次数（默认为多项式次数）</span><br><span class="hljs-string">    返回：</span><br><span class="hljs-string">        满足条件的根列表</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> d:<br>        d = f.degree()  <span class="hljs-comment"># 若未指定d，取多项式次数</span><br><br>    R = f.base_ring()  <span class="hljs-comment"># 获取多项式系数的环（如Zmod(n)）</span><br>    N = R.cardinality()  <span class="hljs-comment"># 环的基数（如n）</span><br><br>    <span class="hljs-comment"># 正规化多项式：将首项系数归一化为1</span><br>    f /= f.coefficients().pop(<span class="hljs-number">0</span>)  <br>    f = f.change_ring(ZZ)  <span class="hljs-comment"># 将多项式转换为整数环上的多项式</span><br><br>    G = <span class="hljs-type">Sequence</span>([], f.parent())  <span class="hljs-comment"># 初始化格基向量列表</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m + <span class="hljs-number">1</span>):<br>        base = N^(m - i) * f^i  <span class="hljs-comment"># 构造基础多项式（用于格的构造）</span><br>        <span class="hljs-keyword">for</span> shifts <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(d), repeat=f.nvariables()):<br>            <span class="hljs-comment"># 枚举所有可能的指数组合（构造格的列）</span><br>            g = base * prod(<span class="hljs-built_in">map</span>(power, f.variables(), shifts))<br>            G.append(g)<br><br>    B, monomials = G.coefficient_matrix()  <span class="hljs-comment"># 提取系数矩阵和单项式</span><br>    monomials = vector(monomials)  <span class="hljs-comment"># 转换为向量形式</span><br><br>    factors = [monomial(*bounds) <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> monomials]  <span class="hljs-comment"># 计算缩放因子</span><br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, factor)  <span class="hljs-comment"># 缩放矩阵列</span><br><br>    B = B.dense_matrix().LLL()  <span class="hljs-comment"># 应用LLL算法进行格规约</span><br><br>    B = B.change_ring(QQ)  <span class="hljs-comment"># 转换为有理数环</span><br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, <span class="hljs-number">1</span> / factor)  <span class="hljs-comment"># 反缩放矩阵列</span><br><br>    H = <span class="hljs-type">Sequence</span>([], f.parent().change_ring(QQ))  <span class="hljs-comment"># 初始化新多项式列表</span><br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, B * monomials):  <span class="hljs-comment"># 生成新多项式</span><br>        H.append(h)<br>        I = H.ideal()  <span class="hljs-comment"># 构造理想</span><br>        <span class="hljs-keyword">if</span> I.dimension() == -<span class="hljs-number">1</span>:  <span class="hljs-comment"># 理想维度不为0，移除最后一个多项式</span><br>            H.pop()<br>        <span class="hljs-keyword">elif</span> I.dimension() == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 理想维度为0，存在解</span><br>            roots = []<br>            <span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> I.variety(ring=ZZ):  <span class="hljs-comment"># 求解整数解</span><br>                root = <span class="hljs-built_in">tuple</span>(R(root[var]) <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> f.variables())<br>                roots.append(root)<br>            <span class="hljs-keyword">return</span> roots  <span class="hljs-comment"># 返回第一个解集</span><br>    <span class="hljs-keyword">return</span> []  <span class="hljs-comment"># 无解时返回空列表</span><br><br><span class="hljs-comment"># RSA模数n（大素数的乘积）</span><br>n = <span class="hljs-number">24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753</span><br><br><span class="hljs-comment"># 已知的m的高位部分（mh_re为实部高位，mh_im为虚部高位）</span><br>mh = [<br>    <span class="hljs-number">3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016</span>,<br>    <span class="hljs-number">15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552</span><br>]<br><br><span class="hljs-comment"># 密文C的实部和虚部</span><br>C = [<br>    <span class="hljs-number">5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760</span>,<br>    <span class="hljs-number">21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752</span><br>]<br><br>enc = <span class="hljs-string">b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span>  <span class="hljs-comment"># 密文</span><br><br><span class="hljs-comment"># 提取m的实部和虚部高位</span><br>mh_re, mh_im = mh<br>C_re, C_im = C  <span class="hljs-comment"># 提取密文的实部和虚部</span><br><br><span class="hljs-comment"># 构造多项式环（模n）</span><br>PR.&lt;x,y&gt; = PolynomialRing(Zmod(n))<br><br><span class="hljs-comment"># 构造多项式方程：(mh_re + x)^3 - 3*(mh_re + x)*(mh_im + y)^2 ≡ C_re mod n</span><br><span class="hljs-comment"># 该方程基于复数m = (mh_re + x) + (mh_im + y)i的立方模n等于C_re + C_im i的实部</span><br>f = (mh_re + x)**<span class="hljs-number">3</span> - <span class="hljs-number">3</span>*(mh_re + x)*(mh_im + y)**<span class="hljs-number">2</span> - C_re<br><br><span class="hljs-comment"># 求解多项式的小根（x和y的绝对值小于2^128）</span><br>res = small_roots(f, (<span class="hljs-number">2</span>^<span class="hljs-number">128</span>, <span class="hljs-number">2</span>^<span class="hljs-number">128</span>), m=<span class="hljs-number">2</span>, d=<span class="hljs-number">3</span>)  <br><br><span class="hljs-comment"># 计算真实的m_re和m_im</span><br>m_re = mh_re + <span class="hljs-built_in">int</span>(res[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>m_im = mh_im + <span class="hljs-built_in">int</span>(res[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># 生成密钥：将m_re + m_im的字符串哈希为32字节的密钥</span><br>key = hashlib.sha256(<span class="hljs-built_in">str</span>(m_re + m_im).encode()).digest()<br><br><span class="hljs-comment"># 解密密文（ChaCha20要求nonce为12字节）</span><br>cipher = ChaCha20.new(key=key, nonce=<span class="hljs-string">b&#x27;Pr3d1ctmyxjj&#x27;</span>)<br>flag = cipher.decrypt(enc).decode()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag:&quot;</span>, flag)<br><span class="hljs-comment"># XYCTF&#123;Welcome_to_XYCTF_Now_let_us_together_play_Crypto_challenge&#125;</span><br></code></pre></td></tr></table></figure><h1 id="reed"><a href="#reed" class="headerlink" title="reed"></a>reed</h1><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag  <span class="hljs-comment"># 从secret模块导入flag</span><br><br><span class="hljs-comment"># 验证flag格式是否正确（必须以&#x27;XYCTF&#123;&#x27;开头，&#x27;&#125;&#x27;结尾）</span><br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">&#x27;XYCTF&#123;&#x27;</span>) <span class="hljs-keyword">and</span> flag.endswith(<span class="hljs-string">&#x27;&#125;&#x27;</span>)<br><br><span class="hljs-comment"># 去除flag的外层包装，获取核心内容</span><br>flag = flag.rstrip(<span class="hljs-string">&#x27;&#125;&#x27;</span>).lstrip(<span class="hljs-string">&#x27;XYCTF&#123;&#x27;</span>)<br><br><span class="hljs-comment"># 定义字符表 - 包含所有大小写字母和数字（a-z, A-Z, 0-9）</span><br>table = string.ascii_letters + string.digits<br><br><span class="hljs-comment"># 确保flag中的所有字符都在字符表中</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">all</span>(i <span class="hljs-keyword">in</span> table <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag)<br><br><span class="hljs-comment"># 创建随机数生成器实例</span><br>r = random.Random()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PRNG</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;自定义伪随机数生成器，带有特殊的种子更新机制&quot;&quot;&quot;</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed</span>):<br>        <span class="hljs-comment"># 定义随机数生成范围</span><br>        <span class="hljs-variable language_">self</span>.a = <span class="hljs-number">1145140</span>      <span class="hljs-comment"># 最小值</span><br>        <span class="hljs-variable language_">self</span>.b = <span class="hljs-number">19198100</span>     <span class="hljs-comment"># 最大值</span><br>        <span class="hljs-comment"># 初始化随机种子</span><br>        random.seed(seed)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;生成下一个随机数并基于该数更新种子&quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 在固定范围内生成随机数</span><br>        x = random.randint(<span class="hljs-variable language_">self</span>.a, <span class="hljs-variable language_">self</span>.b)<br>        <span class="hljs-comment"># 用该数的平方+1作为新种子（关键特性）</span><br>        random.seed(x ** <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> x<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">round</span>(<span class="hljs-params">self, k</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;生成k个随机数并返回最后一个&quot;&quot;&quot;</span><br>        x = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>            x = <span class="hljs-variable language_">self</span>.<span class="hljs-built_in">next</span>()<br>        <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">msg, a, b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;使用线性同余算法加密消息&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 对消息中的每个字符：</span><br>    <span class="hljs-comment"># 1. 找到它在字符表中的索引</span><br>    <span class="hljs-comment"># 2. 应用公式 (a * 索引 + b) mod 19198111</span><br>    c = [(a * table.index(m) + b) % <span class="hljs-number">19198111</span> <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> msg]<br>    <span class="hljs-keyword">return</span> c<br><br><span class="hljs-comment"># 获取用户输入的种子值</span><br>seed = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入种子: &#x27;</span>))<br><br><span class="hljs-comment"># 用用户提供的种子初始化PRNG</span><br>prng = PRNG(seed)<br><br><span class="hljs-comment"># 生成加密参数a和b：</span><br><span class="hljs-comment"># - 每个参数都是通过PRNG运行随机轮次得到的</span><br><span class="hljs-comment"># - 轮次数范围是0到65535（2^16-1）</span><br>a = prng.<span class="hljs-built_in">round</span>(r.randrange(<span class="hljs-number">2</span>**<span class="hljs-number">16</span>))<br>b = prng.<span class="hljs-built_in">round</span>(r.randrange(<span class="hljs-number">2</span>**<span class="hljs-number">16</span>))<br><br><span class="hljs-comment"># 用生成的参数加密flag</span><br>enc = encrypt(flag, a, b)<br><br><span class="hljs-comment"># 输出加密结果</span><br><span class="hljs-built_in">print</span>(enc)<br></code></pre></td></tr></table></figure><p>我们知道她的加密过程：    c &#x3D; [(a * table.index(m) + b) % 19198111 for m in msg]，这是同余式。</p><p>然后，我们输入随机种子可以得到密文c，我们要想得到明文m，就需要得到a和b，而明文m的范围为ASCII值0到61，也就是说我们：<br>$$<br>c<br>0<br>​<br> ≡a∗m<br>0<br>​<br> +b%p<br>$$</p><p>$$<br>c<br>1<br>​<br> ≡a∗m<br>1<br>​<br> +b%p<br>$$</p><p>$$<br>a≡(c<br>0<br>​<br> −c<br>1<br>​<br> )∗(m<br>0<br>​<br> −m<br>1<br>​<br> )<br>−1<br> %p<br>$$</p><p>$$<br>只要GCD(m<br>0<br>​<br> −m<br>1<br>​<br> ,p)&#x3D;1，逆元即存在<br>$$</p><p>其实我们只要m循环取0到61，满足公式条件就能得出a和b，进而得出明文m为什么。</p><p>至于为什么GCD&#x3D;1,逆元存在：X*X-1&#x3D;1 modp,当且仅当GCD（X，p)&#x3D;1时，X-1才存在（乘法逆元）</p><p>遍历两遍m,判断得出的a，b是不是满足范围：</p><p><a href="https://hvang10.github.io/2025/04/08/XYCTF2025-WriteUp/index.html">XYCTF2025-WriteUp | HvAng’s Nests</a></p><p>代码（直接搬了上面这位师傅的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> json<br><br>io = remote(<span class="hljs-string">&quot;39.106.48.123&quot;</span>, <span class="hljs-number">34301</span>)<br><br>table = string.ascii_letters + string.digits<br>p = <span class="hljs-number">19198111</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">egcd</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">if</span> a == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> (b, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        g, y, x = egcd(b % a, a)<br>        <span class="hljs-keyword">return</span> (g, x - (b // a) * y, y)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">modinv</span>(<span class="hljs-params">a, mod</span>):<br>    g, x, y = egcd(a, mod)<br>    <span class="hljs-keyword">if</span> g != <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> x % mod<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">enc</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(enc)):<br>            c0 = enc[i]<br>            c1 = enc[j]<br>            <span class="hljs-keyword">for</span> m0 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(table)):<br>                <span class="hljs-keyword">for</span> m1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(table)):<br>                    <span class="hljs-keyword">if</span> m0 == m1:<br>                        <span class="hljs-keyword">continue</span><br>                    delta_m = m1 - m0<br>                    delta_c = (c1 - c0) % p<br>                    inv = modinv(delta_m, p)<br>                    <span class="hljs-keyword">if</span> inv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                        <span class="hljs-keyword">continue</span><br>                    a = (delta_c * inv) % p<br>                    b = (c0 - a * m0) % p<br>                    <span class="hljs-comment"># Check if a and b are within PRNG&#x27;s output range</span><br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-number">1145140</span> &lt;= a &lt;= <span class="hljs-number">19198100</span>):<br>                        <span class="hljs-keyword">continue</span><br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-number">1145140</span> &lt;= b &lt;= <span class="hljs-number">19198100</span>):<br>                        <span class="hljs-keyword">continue</span><br>                    valid = <span class="hljs-literal">True</span><br>                    decrypted = []<br>                    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> enc:<br>                        numerator = (c - b) % p<br>                        inv_a = modinv(a, p)<br>                        <span class="hljs-keyword">if</span> inv_a <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                            valid = <span class="hljs-literal">False</span><br>                            <span class="hljs-keyword">break</span><br>                        m = (numerator * inv_a) % p<br>                        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-number">0</span> &lt;= m &lt; <span class="hljs-built_in">len</span>(table)):<br>                            valid = <span class="hljs-literal">False</span><br>                            <span class="hljs-keyword">break</span><br>                        decrypted.append(table[m])<br>                    <span class="hljs-keyword">if</span> valid:<br>                        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(decrypted)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;解密失败&quot;</span><br><br><br>io.recvuntil(<span class="hljs-string">b&#x27;give me seed: &#x27;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">114514</span>))<br>enc = json.loads(io.recvline().decode())<br>flag = decrypt(enc)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密后的Flag:&quot;</span>, <span class="hljs-string">f&#x27;XYCTF&#123;&#123;<span class="hljs-subst">&#123;flag&#125;</span>&#125;&#125;&#x27;</span>)<br><span class="hljs-comment"># 解密后的Flag: XYCTF&#123;114514fixedpointissodangerous1919810&#125;</span><br></code></pre></td></tr></table></figure><p>然后还有一个题解：</p><p>上面那个题解据出题人languag3说是自己脑子抽了加了个仿射加密，实际上算是非预期了，预期题解是输入不同的seed找循环的规律得出，然后枚举a和b来计算flag，此话在Initialization的wp中亦有分析：<a href="https://collectcrop.github.io/blog/2025/04/08/2025xyctf-wp/#%E4%B8%80%E6%88%98%E9%98%9F%E4%BF%A1%E6%81%AF">2025xyctf wp | Collectcrop’s Blog</a></p><p>1.看题目。大概就是用户提供一个种子，使用该种子初始化PRNG生成两个参数a和b，然后使用线性同余加密方式加密flag，(a * table.index(m) + b) % 19198111。</p><p>2.nc上之后可以看到，虽然每次得到的密文组不同，但是固定的几个位置上的数一定是相同的，比如1，2，5…。说明这几个位置上的明文是相同的，如果可以先猜测这些位置上的明文，就可以列方程组解a,b，由此再去解剩余的密文。（说实话是遍历试的明文，代码总是有点问题改了很久，答案出来之后只能说哎，这怎么能没看出来，这相同的位置，这提示，哎）</p><p>随便一组数据测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> combinations<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse</span>(<span class="hljs-params">a, m</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extended_gcd</span>(<span class="hljs-params">a, b</span>):<br>        <span class="hljs-keyword">if</span> a == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> b, <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            gcd, x, y = extended_gcd(b % a, a)<br>            <span class="hljs-keyword">return</span> gcd, y - (b // a) * x, x<br><br>    gcd, x, _ = extended_gcd(a, m)<br>    <span class="hljs-keyword">if</span> gcd != <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;a在模m下没有逆&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> x % m<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">cipher, table, m</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;解密cipher&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 找到重复值</span><br>    repeated = [c <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>(cipher) <span class="hljs-keyword">if</span> cipher.count(c) &gt; <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(repeated) &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Not enough repeated values to solve&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-comment"># 遍历可能的重复值组合</span><br>    <span class="hljs-keyword">for</span> c0, c1 <span class="hljs-keyword">in</span> combinations(cipher, <span class="hljs-number">2</span>):<br>        pos0 = cipher.index(c0)<br>        pos1 = cipher.index(c1)<br><br>        <span class="hljs-comment"># 遍历可能的字符组合</span><br>        <span class="hljs-keyword">for</span> i0 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(table)):<br>            <span class="hljs-keyword">for</span> i1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(table)):<br>                <span class="hljs-keyword">if</span> i0 == i1:<br>                    <span class="hljs-keyword">continue</span><br><br>                <span class="hljs-keyword">try</span>:<br>                    a = (c1 - c0) * inverse(i1 - i0, m) % m<br>                    b = (c0 - a * i0) % m<br>                <span class="hljs-keyword">except</span>:<br>                    <span class="hljs-keyword">continue</span><br><br>                <span class="hljs-comment"># 检查a和b范围</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-number">1145140</span> &lt;= a &lt;= <span class="hljs-number">19198100</span>):<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-number">1145140</span> &lt;= b &lt;= <span class="hljs-number">19198100</span>):<br>                    <span class="hljs-keyword">continue</span><br><br>                <span class="hljs-comment"># 解密全部</span><br>                <span class="hljs-keyword">try</span>:<br>                    inv_a = inverse(a, m)<br>                    flag = []<br>                    valid = <span class="hljs-literal">True</span><br>                    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> cipher:<br>                        numerator = (c - b) % m<br>                        m_idx = (numerator * inv_a) % m<br>                        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-number">0</span> &lt;= m_idx &lt; <span class="hljs-built_in">len</span>(table)):<br>                            valid = <span class="hljs-literal">False</span><br>                            <span class="hljs-keyword">break</span><br>                        flag.append(table[m_idx])<br>                    <span class="hljs-keyword">if</span> valid:<br>                        flag_str = <span class="hljs-string">&#x27;&#x27;</span>.join(flag)<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Possible flag: <span class="hljs-subst">&#123;flag_str&#125;</span>&quot;</span>)<br>                        <span class="hljs-keyword">return</span><br>                <span class="hljs-keyword">except</span>:<br>                    <span class="hljs-keyword">continue</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to decrypt&quot;</span>)<br><br><span class="hljs-comment"># 测试</span><br>table = string.ascii_letters + string.digits<br>m = <span class="hljs-number">19198111</span><br><br><span class="hljs-comment"># 测试数据</span><br>cipher = [<span class="hljs-number">13690524</span>, <span class="hljs-number">13690524</span>, <span class="hljs-number">8208775</span>, <span class="hljs-number">19180266</span>, <span class="hljs-number">13690524</span>, <span class="hljs-number">8208775</span>, <span class="hljs-number">5407953</span>, <span class="hljs-number">19124315</span>, <span class="hljs-number">10913681</span>, <span class="hljs-number">13634573</span>, <span class="hljs-number">2663082</span>, <span class="hljs-number">19132308</span>, <span class="hljs-number">8160817</span>, <span class="hljs-number">19124315</span>, <span class="hljs-number">16387437</span>, <span class="hljs-number">5423939</span>, <span class="hljs-number">19124315</span>, <span class="hljs-number">13650559</span>, <span class="hljs-number">13650559</span>, <span class="hljs-number">8160817</span>, <span class="hljs-number">2663082</span>, <span class="hljs-number">8144831</span>, <span class="hljs-number">16387437</span>, <span class="hljs-number">16379444</span>, <span class="hljs-number">13634573</span>, <span class="hljs-number">2679068</span>, <span class="hljs-number">8160817</span>, <span class="hljs-number">16395430</span>, <span class="hljs-number">13650559</span>, <span class="hljs-number">13690524</span>, <span class="hljs-number">5471897</span>, <span class="hljs-number">13690524</span>, <span class="hljs-number">5471897</span>, <span class="hljs-number">13698517</span>, <span class="hljs-number">13690524</span>, <span class="hljs-number">2719033</span>]<br>solve(cipher, table, m)<br><br><br><br></code></pre></td></tr></table></figure><h1 id="choice"><a href="#choice" class="headerlink" title="choice"></a>choice</h1><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> Random<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">b&#x27;XYCTF&#123;&#x27;</span>) <span class="hljs-keyword">and</span> flag.endswith(<span class="hljs-string">b&#x27;&#125;&#x27;</span>)<br>flag = flag[<span class="hljs-number">6</span>:-<span class="hljs-number">1</span>]<br><br>msg = bytes_to_long(flag)<br>rand = Random()<br>test = <span class="hljs-built_in">bytes</span>([i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">255</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>)])<br><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.py&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>).write(<span class="hljs-string">f&#x27;enc = <span class="hljs-subst">&#123;msg ^ rand.getrandbits(msg.bit_length())&#125;</span>\nr = <span class="hljs-subst">&#123;[rand.choice(test) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2496</span>)]&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>题中还给了一份random.py的附件，改了第246行，变成了k&#x3D;n.bit_length()-1</p><p>这意味着什么？意味着他会输出8位的随机数，也就是0到255，其实还是MT19937，看来得抽空系统的学学这个了，并且到明出几个题玩玩</p><p>回到正题：至于为什么变成8位就好解密的多，那是因为题中说了0到255的索引，并且是2496次，那意味着我们</p><p>可以得出624位已知数，这样就能破解次伪随机数，进而解密。哦，对了，要饭转一下才能推出已知数，然后破解：</p><p>这里还是<strong>MT19937</strong>，伪随机数算法的缺陷，<strong>2496*8&#x3D;19968</strong>刚好够一轮<code>state</code>，注意到我们这里需要的是<strong>逆推</strong>上一个<code>state</code>(相当于反向预测吧)</p><p><a href="https://picx.zhimg.com/80/v2-4cd29979ffa498905e34d294cc0fc69a_1440w.png"><img src="https://picx.zhimg.com/80/v2-4cd29979ffa498905e34d294cc0fc69a_1440w.png" alt="img"></a><br>所以<code>r</code>需要取反处理一下</p><p>参考：<a href="https://hvang10.github.io/2025/04/08/XYCTF2025-WriteUp/index.html">XYCTF2025-WriteUp | HvAng’s Nests</a></p><p>题解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sage</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-comment"># https://github.com/JuliaPoo/MT19937-Symbolic-Execution-and-Solver</span><br>sys.path.append(<span class="hljs-string">&#x27;MT19937-Symbolic-Execution-and-Solver-master/source&#x27;</span>)<br><br><span class="hljs-keyword">from</span> MT19937 <span class="hljs-keyword">import</span> MT19937<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>enc = <span class="hljs-number">5042764371819053176884777909105310461303359296255297</span><br>length = enc.bit_length()<br><span class="hljs-built_in">print</span>(length)<br>r = []<br>r = [<span class="hljs-number">255</span>-i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r]<br>rng_clone = MT19937(state_from_data = (r, <span class="hljs-number">8</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getrandbits</span>(<span class="hljs-params">n</span>):<br>    num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n//<span class="hljs-number">32</span>):<br>        num = (rng_clone() &lt;&lt; (<span class="hljs-number">32</span> * i)) | num<br>    num = rng_clone() &gt;&gt; (<span class="hljs-number">32</span> - (n % <span class="hljs-number">32</span>)) &lt;&lt; n//<span class="hljs-number">32</span>*<span class="hljs-number">32</span> | num<br>    <span class="hljs-keyword">return</span> num<br><br>rng_clone.reverse_states(length//<span class="hljs-number">32</span>+<span class="hljs-number">1</span>)  <span class="hljs-comment"># 回退到生成前n个随机数之前的状态</span><br>flag = enc ^^ getrandbits(<span class="hljs-number">176</span>-<span class="hljs-number">1</span>)    <span class="hljs-comment"># 172/8=21.5,22*8=176,可能存在误差所以减1试试</span><br>flag = <span class="hljs-string">b&#x27;XYCTF&#123;&#x27;</span>+long_to_bytes(flag)+<span class="hljs-string">b&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag.decode())<br><span class="hljs-comment"># XYCTF&#123;___0h_51mple_r@nd0m___&#125;</span><br></code></pre></td></tr></table></figure><h1 id="复复复数"><a href="#复复复数" class="headerlink" title="复复复数"></a>复复复数</h1><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ComComplex</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, value=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]</span>):<br>        <span class="hljs-variable language_">self</span>.value = value<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        s = <span class="hljs-built_in">str</span>(<span class="hljs-variable language_">self</span>.value[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">for</span> k,i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-variable language_">self</span>.value[<span class="hljs-number">1</span>:]):<br>            <span class="hljs-keyword">if</span> i &gt;= <span class="hljs-number">0</span>:<br>                s += <span class="hljs-string">&#x27;+&#x27;</span><br>            s += <span class="hljs-built_in">str</span>(i) +<span class="hljs-string">&#x27;ijk&#x27;</span>[k]<br>        <span class="hljs-keyword">return</span> s<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__add__</span>(<span class="hljs-params">self,x</span>):<br>        <span class="hljs-keyword">return</span> ComComplex([i+j <span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(<span class="hljs-variable language_">self</span>.value,x.value)])<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__mul__</span>(<span class="hljs-params">self,x</span>):<br>        a = <span class="hljs-variable language_">self</span>.value[<span class="hljs-number">0</span>]*x.value[<span class="hljs-number">0</span>]-<span class="hljs-variable language_">self</span>.value[<span class="hljs-number">1</span>]*x.value[<span class="hljs-number">1</span>]-<span class="hljs-variable language_">self</span>.value[<span class="hljs-number">2</span>]*x.value[<span class="hljs-number">2</span>]-<span class="hljs-variable language_">self</span>.value[<span class="hljs-number">3</span>]*x.value[<span class="hljs-number">3</span>]<br>        b = <span class="hljs-variable language_">self</span>.value[<span class="hljs-number">0</span>]*x.value[<span class="hljs-number">1</span>]+<span class="hljs-variable language_">self</span>.value[<span class="hljs-number">1</span>]*x.value[<span class="hljs-number">0</span>]+<span class="hljs-variable language_">self</span>.value[<span class="hljs-number">2</span>]*x.value[<span class="hljs-number">3</span>]-<span class="hljs-variable language_">self</span>.value[<span class="hljs-number">3</span>]*x.value[<span class="hljs-number">2</span>]<br>        c = <span class="hljs-variable language_">self</span>.value[<span class="hljs-number">0</span>]*x.value[<span class="hljs-number">2</span>]-<span class="hljs-variable language_">self</span>.value[<span class="hljs-number">1</span>]*x.value[<span class="hljs-number">3</span>]+<span class="hljs-variable language_">self</span>.value[<span class="hljs-number">2</span>]*x.value[<span class="hljs-number">0</span>]+<span class="hljs-variable language_">self</span>.value[<span class="hljs-number">3</span>]*x.value[<span class="hljs-number">1</span>]<br>        d = <span class="hljs-variable language_">self</span>.value[<span class="hljs-number">0</span>]*x.value[<span class="hljs-number">3</span>]+<span class="hljs-variable language_">self</span>.value[<span class="hljs-number">1</span>]*x.value[<span class="hljs-number">2</span>]-<span class="hljs-variable language_">self</span>.value[<span class="hljs-number">2</span>]*x.value[<span class="hljs-number">1</span>]+<span class="hljs-variable language_">self</span>.value[<span class="hljs-number">3</span>]*x.value[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">return</span> ComComplex([a,b,c,d])<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__mod__</span>(<span class="hljs-params">self,x</span>):<br>        <span class="hljs-keyword">return</span> ComComplex([i % x <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.value])<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__pow__</span>(<span class="hljs-params">self, x, n=<span class="hljs-literal">None</span></span>):<br>        tmp = ComComplex(<span class="hljs-variable language_">self</span>.value)<br>        a = ComComplex([<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">while</span> x:<br>            <span class="hljs-keyword">if</span> x &amp; <span class="hljs-number">1</span>:<br>                a *= tmp<br>            tmp *= tmp<br>            <span class="hljs-keyword">if</span> n:<br>                a %= n<br>                tmp %= n<br>            x &gt;&gt;= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> a<br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag, hint<br><br>p = getPrime(<span class="hljs-number">256</span>)<br>q = getPrime(<span class="hljs-number">256</span>)<br>r = getPrime(<span class="hljs-number">256</span>)<br>n = p * q * r<br><br>P = getPrime(<span class="hljs-number">512</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(hint) == <span class="hljs-number">20</span><br>hints = ComComplex([bytes_to_long(hint[i:i+<span class="hljs-number">5</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">20</span>,<span class="hljs-number">5</span>)])<br>keys = ComComplex([<span class="hljs-number">0</span>, p, q, r])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hint =&#x27;</span>,hints)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gift =&#x27;</span>,hints*keys%P)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;P =&#x27;</span>,P)<br><br>e = <span class="hljs-number">65547</span><br>m = ComComplex([bytes_to_long(flag[i:i+<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">4</span>+<span class="hljs-number">1</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(flag),<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">4</span>+<span class="hljs-number">1</span>)])<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n =&#x27;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>, c)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">hint = 375413371936+452903063925i+418564633198j+452841062207k</span><br><span class="hljs-string">gift = 8123312244520119413231609191866976836916616973013918670932199631084038015924368317077919454611785179950870055560079987034735836668109705445946887481003729+20508867471664499348708768798854433383217801696267611753941328714877299161068885700412171i+22802458968832151777449744120185122420871929971817937643641589637402679927558503881707868j+40224499597522456323122179021760594618350780974297095023316834212332206526399536884102863k</span><br><span class="hljs-string">P = 8123312244520119413231609191866976836916616973013918670932199631182724263362174895104545305364960781233690810077210539091362134310623408173268475389315109</span><br><span class="hljs-string">n = 408713495380933615345467409596399184629824932933932227692519320046890365817329617301604051766392980053993030281090124694858194866782889226223493799859404283664530068697313752856923001112586828837146686963124061670340088332769524367</span><br><span class="hljs-string">c = 212391106108596254648968182832931369624606731443797421732310126161911908195602305474921714075911012622738456373731638115041135121458776339519085497285769160263024788009541257401354037620169924991531279387552806754098200127027800103+24398526281840329222660628769015610312084745844610670698920371305353888694519135578269023873988641161449924124665731242993290561874625654977013162008430854786349580090169988458393820787665342793716311005178101342140536536153873825i+45426319565874516841189981758358042952736832934179778483602503215353130229731883231784466068253520728052302138781204883495827539943655851877172681021818282251414044916889460602783324944030929987991059211909160860125047647337380125j+96704582331728201332157222706704482771142627223521415975953255983058954606417974983056516338287792260492498273014507582247155218239742778886055575426154960475637748339582574453542182586573424942835640846567809581805953259331957385k</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>这个题，先看这个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gift =&#x27;</span>,hints*keys%P)<br></code></pre></td></tr></table></figure><p>将数据联系起来。</p><p>看它定义的四元数的加减乘除运算规则。我们在只有未知量keys不知道的情况下可以，通过运算求出keys，进而求出pqr，然后就是求四数RSA了，u1s1我不咋会，大概有个印象，好像就是要开根，贴贴别人的文章</p><p>[2025 XYCTF - weyung](<a href="https://blog.weyung.cc/2025/04/04/2025">https://blog.weyung.cc/2025/04/04/2025</a> XYCTF&#x2F;#Crypto)</p><p><a href="https://triodelzx.github.io/2025/04/10/XYCTF-2025-%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEWrite-Up/index.html#%E5%A4%8D%E5%A4%8D%E5%A4%8D%E5%A4%8D%E6%95%B0">XYCTF 2025 部分题目Write Up | Triode Field</a></p><p>题解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>h = [<span class="hljs-number">375413371936</span>, <span class="hljs-number">452903063925</span>, <span class="hljs-number">418564633198</span>, <span class="hljs-number">452841062207</span>]<br>g = [<span class="hljs-number">8123312244520119413231609191866976836916616973013918670932199631084038015924368317077919454611785179950870055560079987034735836668109705445946887481003729</span>, <span class="hljs-number">20508867471664499348708768798854433383217801696267611753941328714877299161068885700412171</span>, <span class="hljs-number">22802458968832151777449744120185122420871929971817937643641589637402679927558503881707868</span>, <span class="hljs-number">40224499597522456323122179021760594618350780974297095023316834212332206526399536884102863</span>]<br>P = <span class="hljs-number">8123312244520119413231609191866976836916616973013918670932199631182724263362174895104545305364960781233690810077210539091362134310623408173268475389315109</span><br>n = <span class="hljs-number">408713495380933615345467409596399184629824932933932227692519320046890365817329617301604051766392980053993030281090124694858194866782889226223493799859404283664530068697313752856923001112586828837146686963124061670340088332769524367</span><br><br>H = matrix(Zmod(P),<br>[[h[<span class="hljs-number">0</span>], h[<span class="hljs-number">1</span>], h[<span class="hljs-number">2</span>], h[<span class="hljs-number">3</span>]],<br>[-h[<span class="hljs-number">1</span>], h[<span class="hljs-number">0</span>], -h[<span class="hljs-number">3</span>], h[<span class="hljs-number">2</span>]],<br>[-h[<span class="hljs-number">2</span>], h[<span class="hljs-number">3</span>], h[<span class="hljs-number">0</span>], -h[<span class="hljs-number">1</span>]],<br>[-h[<span class="hljs-number">3</span>], -h[<span class="hljs-number">2</span>], h[<span class="hljs-number">1</span>], h[<span class="hljs-number">0</span>]]])<br><br>G = matrix(Zmod(P),<br>[[g[<span class="hljs-number">0</span>], g[<span class="hljs-number">1</span>], g[<span class="hljs-number">2</span>], g[<span class="hljs-number">3</span>]],<br>[-g[<span class="hljs-number">1</span>], g[<span class="hljs-number">0</span>], -g[<span class="hljs-number">3</span>], g[<span class="hljs-number">2</span>]],<br>[-g[<span class="hljs-number">2</span>], g[<span class="hljs-number">3</span>], g[<span class="hljs-number">0</span>], -g[<span class="hljs-number">1</span>]],<br>[-g[<span class="hljs-number">3</span>], -g[<span class="hljs-number">2</span>], g[<span class="hljs-number">1</span>], g[<span class="hljs-number">0</span>]]])<br><br>K = H^-<span class="hljs-number">1</span> * G<br>_, p, q, r = K[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">assert</span> ZZ(p) * ZZ(q) * ZZ(r) == n<br><br>p, q, r = ZZ(p), ZZ(q), ZZ(r)<br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-built_in">print</span>(q)<br><span class="hljs-built_in">print</span>(r)<br>c = [<span class="hljs-number">212391106108596254648968182832931369624606731443797421732310126161911908195602305474921714075911012622738456373731638115041135121458776339519085497285769160263024788009541257401354037620169924991531279387552806754098200127027800103</span>, <span class="hljs-number">24398526281840329222660628769015610312084745844610670698920371305353888694519135578269023873988641161449924124665731242993290561874625654977013162008430854786349580090169988458393820787665342793716311005178101342140536536153873825</span>, <span class="hljs-number">45426319565874516841189981758358042952736832934179778483602503215353130229731883231784466068253520728052302138781204883495827539943655851877172681021818282251414044916889460602783324944030929987991059211909160860125047647337380125</span>, <span class="hljs-number">96704582331728201332157222706704482771142627223521415975953255983058954606417974983056516338287792260492498273014507582247155218239742778886055575426154960475637748339582574453542182586573424942835640846567809581805953259331957385</span>]<br><br>C = matrix(Zmod(n),<br>[[c[<span class="hljs-number">0</span>], c[<span class="hljs-number">1</span>], c[<span class="hljs-number">2</span>], c[<span class="hljs-number">3</span>]],<br>[-c[<span class="hljs-number">1</span>], c[<span class="hljs-number">0</span>], -c[<span class="hljs-number">3</span>], c[<span class="hljs-number">2</span>]],<br>[-c[<span class="hljs-number">2</span>], c[<span class="hljs-number">3</span>], c[<span class="hljs-number">0</span>], -c[<span class="hljs-number">1</span>]],<br>[-c[<span class="hljs-number">3</span>], -c[<span class="hljs-number">2</span>], c[<span class="hljs-number">1</span>], c[<span class="hljs-number">0</span>]]])<br><br>e = <span class="hljs-number">65547</span><br>phi = (p**<span class="hljs-number">4</span> - <span class="hljs-number">1</span>)*(q**<span class="hljs-number">4</span> - <span class="hljs-number">1</span>)*(r**<span class="hljs-number">4</span> - <span class="hljs-number">1</span>)//<span class="hljs-number">27</span><br><br>d = inverse_mod(e, phi)<br>M = C^d<br><br>res = M[<span class="hljs-number">0</span>]<br>flag = <span class="hljs-string">b&quot;&quot;</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> res:<br>    flag += long_to_bytes(ZZ(x))<br><br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-string">b&#x27;flag&#123;Quaternion_15_ComComComComplexXXX!!!?&#125;&#x27;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>密码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>密码</tag>
      
      <tag>好题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSA系列</title>
    <link href="/2025/03/19/RSA%E7%B3%BB%E5%88%97/"/>
    <url>/2025/03/19/RSA%E7%B3%BB%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="RSA系列"><a href="#RSA系列" class="headerlink" title="RSA系列"></a>RSA系列</h1><h2 id="1-最简单的rsa"><a href="#1-最简单的rsa" class="headerlink" title="1.最简单的rsa"></a>1.最简单的rsa</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p*q<br>e = <span class="hljs-number">65537</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br>m = bytes_to_long(flag)<br><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;q = <span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">p = 10554915510546378513140074459658086644656654144905337809416976066414771647836950941616441505897207397834928781511863699153349798682451297889979721668885951</span><br><span class="hljs-string">q = 8246403321715011123191410826902524505032643184038566851264109473851746507405534573077909160292816825514872584170252311902322051822644609979417178306809223</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 40005881669517895877352756665523238535105922590962714344556374248977905431683140065629966778249773228248201807844489945346731806741025157651474530811920115794270396320935022110691338083709019538562205165553541077855422953438117902279834449006455379382431883650004540282758907332683496655914597029545677184720</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>wp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>p = <span class="hljs-number">10554915510546378513140074459658086644656654144905337809416976066414771647836950941616441505897207397834928781511863699153349798682451297889979721668885951</span><br>q = <span class="hljs-number">8246403321715011123191410826902524505032643184038566851264109473851746507405534573077909160292816825514872584170252311902322051822644609979417178306809223</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">40005881669517895877352756665523238535105922590962714344556374248977905431683140065629966778249773228248201807844489945346731806741025157651474530811920115794270396320935022110691338083709019538562205165553541077855422953438117902279834449006455379382431883650004540282758907332683496655914597029545677184720</span><br><br>n=p*q<br><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-string">b&#x27;NSSCTF&#123;now!you_know_rsa&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="2-已知n（简单）"><a href="#2-已知n（简单）" class="headerlink" title="2.已知n（简单）"></a>2.已知n（简单）</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><br>p = getPrime(<span class="hljs-number">256</span>)<br>q = getPrime(<span class="hljs-number">256</span>)<br>n = p*q<br>e = <span class="hljs-number">65537</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br>m = bytes_to_long(flag)<br><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 7382582015733895208810490097582153009797420348201515356767397357174775587237553842395468027650317457503579404097373070312978350435795210286224491315941881</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 6511001389892474870028836129813814173158254564777610289284056550272120510686249909340499673868720839756059423749304765055919251717618117507007046973023557</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>直接factor（n）就好，但yafu太慢，用的在线网站，不晓得离线咋弄，问问</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><br>p=<span class="hljs-number">70538125404512947763739093348083497980212021962975762144416432920656660487657</span><br>q=<span class="hljs-number">104660876276442216612517835199819767034152013287345576481899196023866133215633</span><br><br>n = <span class="hljs-number">7382582015733895208810490097582153009797420348201515356767397357174775587237553842395468027650317457503579404097373070312978350435795210286224491315941881</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">6511001389892474870028836129813814173158254564777610289284056550272120510686249909340499673868720839756059423749304765055919251717618117507007046973023557</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-string">b&#x27;NSSCTF&#123;factordb_is_useful&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="3-yafu使用"><a href="#3-yafu使用" class="headerlink" title="3.yafu使用"></a>3.yafu使用</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><br>p = getPrime(<span class="hljs-number">128</span>)<br>q = getPrime(<span class="hljs-number">128</span>)<br>n = p*q<br>e = <span class="hljs-number">65537</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br>m = bytes_to_long(flag)<br><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 53690629441472827148854210396580805205350972614395425306316047967905824330731</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 22130296334673852790451396673112575082637108306697684532954477845025885087040</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>这个直接用yafu能解，因为数不是很大</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><br>n = <span class="hljs-number">53690629441472827148854210396580805205350972614395425306316047967905824330731</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">22130296334673852790451396673112575082637108306697684532954477845025885087040</span><br><br>p = <span class="hljs-number">277349599849597463956171076348973750041</span><br>q = <span class="hljs-number">193584665240506752994134779660255197091</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br>d=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br><span class="hljs-comment">#NSSCTF&#123;yafu!yafu!yafu!&#125;</span><br></code></pre></td></tr></table></figure><h2 id="4-nextprime"><a href="#4-nextprime" class="headerlink" title="4.nextprime"></a>4.nextprime</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = gmpy2.next_prime(p)<br>n = p*q<br>e = <span class="hljs-number">65537</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br>m = bytes_to_long(flag)<br><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 115637000420176820831322601039129424406844427046456738651883381559357542765613732363445112111006849040385859313572091386802534464534403117787314180179562651607533039692795522388596550968316951090748054495960090527479954143448774136390568881020918710834542819900918984139672802889774720153267841255456602500057</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 98161406745910866780822530171878255235776133393411573803496865047700715941955255328757920065032397556905095591171977170479344602512244671081108703687450560269408412671849929423399172588599903975793985819498354819305128607934552101433664794909855378636055525016664559476808490723554481335856183927702549281730</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>wp：</p><p>p和q相邻，对n求根然后nextprime得出p即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> nextprime, root<br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br>n = <span class="hljs-number">115637000420176820831322601039129424406844427046456738651883381559357542765613732363445112111006849040385859313572091386802534464534403117787314180179562651607533039692795522388596550968316951090748054495960090527479954143448774136390568881020918710834542819900918984139672802889774720153267841255456602500057</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">98161406745910866780822530171878255235776133393411573803496865047700715941955255328757920065032397556905095591171977170479344602512244671081108703687450560269408412671849929423399172588599903975793985819498354819305128607934552101433664794909855378636055525016664559476808490723554481335856183927702549281730</span><br><br>pq=root(n,<span class="hljs-number">2</span>)<br>q=nextprime(pq)<br>p=n//q<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-string">b&#x27;NSSCTF&#123;so_closed&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="5-可以factor直接出，也可以费马"><a href="#5-可以factor直接出，也可以费马" class="headerlink" title="5.可以factor直接出，也可以费马"></a>5.可以factor直接出，也可以费马</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = gmpy2.next_prime(p - getPrime(<span class="hljs-number">256</span>))<br>n = p*q<br>e = <span class="hljs-number">65537</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 148841588941490812589697505975986386226158446072049530534135525236572105309550985274214825612079495930267744452266230141871521931612761645600600201983605957650711248808703757693378777706453580124982526368706977258199152469200838211055230241296139605912607613807871432800586045262879581100319519318390454452117</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 69038543593219231496623016705860610154255535760819426453485115089535439537440188692852514795648297200067103841434646958466720891016026061658602312900242658759575613625726750416539176437174502082858413122020981274672260498423684555063381678387696096811975800995242962853092582362805345713900308205654744774932</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>wp：</p><p>方法一，factor直接出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br>n = <span class="hljs-number">148841588941490812589697505975986386226158446072049530534135525236572105309550985274214825612079495930267744452266230141871521931612761645600600201983605957650711248808703757693378777706453580124982526368706977258199152469200838211055230241296139605912607613807871432800586045262879581100319519318390454452117</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">69038543593219231496623016705860610154255535760819426453485115089535439537440188692852514795648297200067103841434646958466720891016026061658602312900242658759575613625726750416539176437174502082858413122020981274672260498423684555063381678387696096811975800995242962853092582362805345713900308205654744774932</span><br><br>p = <span class="hljs-number">12200065120379104459630695224710181907653841921369674962900093531339421658815375891425102591939094029941691738405035324548070063226677838530633694428729829</span><br>q = <span class="hljs-number">12200065120379104459630695224710181907653841921369674962900093531339421658815305905822146210878434959851438079877557401145694064756239882458467901042367473</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-string">b&#x27;NSSCTF&#123;fermat_factor&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>方法二：使用费马分解,因为p和q中间间隔较小<br>1.将n开根号<br>2.分别赋值到a和b</p><ol start="3"><li>b^2&#x3D;a^2-n 最后得出的结果需要能开根号</li></ol><p>4.丢到while循环中去，a&#x3D;a+1将开根号后的结果加一，一个一个试，直到最后得出的结果需要能开根号。<br>5.p&#x3D;a+b q&#x3D;a-b</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fermat_attack</span>(<span class="hljs-params">n</span>):<br>    a=gmpy2.isqrt(n) <span class="hljs-comment">#首先分解n，把分解后的小数点之后抛弃掉</span><br>    b_squared=a*a-n <span class="hljs-comment">#b^2=a^2-n</span><br>    b=gmpy2.isqrt(n)<br>    <span class="hljs-keyword">while</span> b*b != b_squared:<br>        a=a+<span class="hljs-number">1</span> <span class="hljs-comment">#将分解n后的a,叠加1</span><br>        b_squared = a*a-n <span class="hljs-comment">#b^2=(a+1)^2-n，将叠加后的a平方并减一</span><br>        b=gmpy2.isqrt(b_squared) <span class="hljs-comment">#开根号，观察得数是否可以开根号，并且将开根号后的b^2赋值给b</span><br>    p=a+b <span class="hljs-comment">#若可以，则将n开根号后的a加上b，得出结果就是p,将n开根号后的a减b，得出结果就是q</span><br>    q=a-b<br>    <span class="hljs-keyword">assert</span> n == p*q<br>    <span class="hljs-keyword">return</span> p,q<br>n = <span class="hljs-number">148841588941490812589697505975986386226158446072049530534135525236572105309550985274214825612079495930267744452266230141871521931612761645600600201983605957650711248808703757693378777706453580124982526368706977258199152469200838211055230241296139605912607613807871432800586045262879581100319519318390454452117</span><br><br>p,q=fermat_attack(n)<br><br>e = <span class="hljs-number">65537</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=inverse(e,phi)<br>c = <span class="hljs-number">69038543593219231496623016705860610154255535760819426453485115089535439537440188692852514795648297200067103841434646958466720891016026061658602312900242658759575613625726750416539176437174502082858413122020981274672260498423684555063381678387696096811975800995242962853092582362805345713900308205654744774932</span><br>msg=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(msg))<br></code></pre></td></tr></table></figure><h2 id="6-共因数"><a href="#6-共因数" class="headerlink" title="6.共因数"></a>6.共因数</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><br>p1 = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>p2 = getPrime(<span class="hljs-number">512</span>)<br><br>n1 = p1*q<br>n2 = p2*q<br><br>e = <span class="hljs-number">65537</span><br><br>m = bytes_to_long(flag)<br>c1 = <span class="hljs-built_in">pow</span>(m, e, n1)<br>c2 = <span class="hljs-built_in">pow</span>(m, e, n2)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n1 = <span class="hljs-subst">&#123;n1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n2 = <span class="hljs-subst">&#123;n2&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c1 = <span class="hljs-subst">&#123;c1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c2 = <span class="hljs-subst">&#123;c2&#125;</span>&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n1 = 143348646254804947818644803938588739009782265465565896704788366218178523508874903492905378927641178487821742289009401873633609987818871281146199303052141439575438691652893995423962176259643151111739185844059243400387734688275416379337335777994990138009973618431459431410429980866760075387393812720247541406893</span><br><span class="hljs-string">n2 = 138110854441015362783564250048191029327770295545362614687087481715680856350219966472039006526758450117969049316234863489558254565946242898336924686721846675826468588471046162610143748100096038583426519355288325214365299329095841907207926280081868726568947436076663762493891291276498567791697978693639037765169</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c1 = 54957154834913405861345262613986460384513988240935244315981524013378872930144117440787175357956479768211180412158274730449811947349624843965933828130932856052315165316154486515277625404352272475136003785605985702495858150662789554694910771308456687676791434476722168247882078861234982509648037033827107552029</span><br><span class="hljs-string">c2 = 122221335585005390437769701090707585780333874638519916373585594040154234166935881089609641995190534396533473702495240511296379249872039728112248708182969185010334637138777948970821974238214641235158623707766980447918480715835847907220219601467702961667091318910582445444058108454023108157805147341928089334736</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>wp：求出共因数q即可：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(binascii.unhexlify(hex(m2)</span></span><span class="hljs-selector-attr">[2:]</span><span class="hljs-selector-class">.strip</span>(<span class="hljs-string">&quot;L&quot;</span>)))<br>解释：<br><span class="hljs-function"><span class="hljs-title">hex</span><span class="hljs-params">(m2)</span></span> 将 m2 转换为它的十六进制字符串表示（例如，<span class="hljs-number">0</span>x123abcd）。<br><span class="hljs-selector-attr">[2:]</span> 通过切片去掉十六进制表示中的 <span class="hljs-number">0</span>x 前缀（结果是 <span class="hljs-number">123</span>abcd）。<br><span class="hljs-function"><span class="hljs-title">strip</span><span class="hljs-params">(<span class="hljs-string">&quot;L&quot;</span>)</span></span> 用来去掉字符串中的 L（在 Python <span class="hljs-number">2</span> 中，当大整数被表示时会附加一个 L，但在 Python <span class="hljs-number">3</span> 中不再需要）。<br>binascii<span class="hljs-selector-class">.unhexlify</span>() 将十六进制字符串（例如，<span class="hljs-number">123</span>abcd）转换为原始的字节串。<br>目的：这行代码是将整数 m2 先转为十六进制字符串，再通过 <span class="hljs-built_in">unhexlify</span>() 转换为字节串。这样做实际上是将整数转换为字节数据。<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> gcd, invert<br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><br>n1 = <span class="hljs-number">143348646254804947818644803938588739009782265465565896704788366218178523508874903492905378927641178487821742289009401873633609987818871281146199303052141439575438691652893995423962176259643151111739185844059243400387734688275416379337335777994990138009973618431459431410429980866760075387393812720247541406893</span><br>n2 = <span class="hljs-number">138110854441015362783564250048191029327770295545362614687087481715680856350219966472039006526758450117969049316234863489558254565946242898336924686721846675826468588471046162610143748100096038583426519355288325214365299329095841907207926280081868726568947436076663762493891291276498567791697978693639037765169</span><br>e = <span class="hljs-number">65537</span><br>c1 = <span class="hljs-number">54957154834913405861345262613986460384513988240935244315981524013378872930144117440787175357956479768211180412158274730449811947349624843965933828130932856052315165316154486515277625404352272475136003785605985702495858150662789554694910771308456687676791434476722168247882078861234982509648037033827107552029</span><br>c2 = <span class="hljs-number">122221335585005390437769701090707585780333874638519916373585594040154234166935881089609641995190534396533473702495240511296379249872039728112248708182969185010334637138777948970821974238214641235158623707766980447918480715835847907220219601467702961667091318910582445444058108454023108157805147341928089334736</span><br><br>q=gcd(n1,n2)<br>p1=n1//q<br>p2=n2//q<br>phi1 = (p1-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>phi2 = (p2-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br>d1=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,phi1)<br>d2=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,phi2)<br>m1=<span class="hljs-built_in">pow</span>(c1,d1,n1)<br>m2=<span class="hljs-built_in">pow</span>(c2,d2,n2)<br><span class="hljs-built_in">print</span>(long_to_bytes(m1))<br><span class="hljs-built_in">print</span>(long_to_bytes(m2))<br><br><span class="hljs-built_in">print</span>(binascii.unhexlify(<span class="hljs-built_in">hex</span>(m2)[<span class="hljs-number">2</span>:].strip(<span class="hljs-string">&quot;L&quot;</span>)))<br><span class="hljs-built_in">print</span>(binascii.unhexlify(<span class="hljs-built_in">hex</span>(m1)[<span class="hljs-number">2</span>:].strip(<span class="hljs-string">&quot;L&quot;</span>)))<br><span class="hljs-string">b&#x27;NSSCTF&#123;no_share_number&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="7-简单三数的rsa"><a href="#7-简单三数的rsa" class="headerlink" title="7.简单三数的rsa"></a>7.简单三数的rsa</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span> + <span class="hljs-string">b&#x27;1&#x27;</span>*<span class="hljs-number">170</span><br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>r = getPrime(<span class="hljs-number">512</span>)<br>n = p*q*r<br>e = <span class="hljs-number">65537</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)*(r-<span class="hljs-number">1</span>)<br><br>m = bytes_to_long(flag)<br><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;q = <span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;r = <span class="hljs-subst">&#123;r&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>wp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span> + <span class="hljs-string">b&#x27;1&#x27;</span>*<span class="hljs-number">170</span><br><br>p = <span class="hljs-number">10666139331774428325755287635566473140804481321882464031499529816800186578792308674238646794969384836340484775213796013129603472328582005363876462361316357</span><br>q = <span class="hljs-number">8419311673449738061914489023962717718536471719688567807316495262754711350004888752049108347226115000749280146228195893953964759818878155006622123533942989</span><br>r = <span class="hljs-number">12875078327453384158245832541544758526474680184252540739652077682353277702054275525591573258723948221345537075374635382175740236093131628077747126356403959</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">424552463648937499189041230155623101311087334789253159440707211761796081289342164253743235182597460622581134089949035117444838205449163269030784233435435681797627188717450074808905561404960693227573181548281296514743775615606388692910356320667720308219275107443303501165027740512539959960217657836317351146520079753390346207659007421416917274795119021374032194294225350901136669304225010974617136606299060486198480556729770211945777266366417547752798441211059402</span><br><br>n = p*q*r<br><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)*(r-<span class="hljs-number">1</span>)<br><br>d=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,phi)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n)))<br><span class="hljs-string">b&#x27;NSSCTF&#123;3th_number!&#125;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="8-最简单的欧拉函数"><a href="#8-最简单的欧拉函数" class="headerlink" title="8.最简单的欧拉函数"></a>8.最简单的欧拉函数</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span> + <span class="hljs-string">b&#x27;1&#x27;</span>*<span class="hljs-number">100</span><br><br>p = getPrime(<span class="hljs-number">256</span>)<br>q = getPrime(<span class="hljs-number">256</span>)<br>n = (p**<span class="hljs-number">3</span>) * q<br>e = <span class="hljs-number">65537</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br>m = bytes_to_long(flag)<br><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;q = <span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>wp：简单的欧拉函数：</p><p><img src="/2025/03/19/RSA%E7%B3%BB%E5%88%97/d98d41c9a2.jpg" alt="NSSIMAGE"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span> + <span class="hljs-string">b&#x27;1&#x27;</span>*<span class="hljs-number">100</span><br>p = <span class="hljs-number">80505091208742938705306670241621545375764148093711243653439069254008824979403</span><br>q = <span class="hljs-number">67599990875658931406915486208971556223245451500927259766683936131876689508521</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">7958690969908064264211283192959937430539613460471121984649054121171267262097603091410178042319139582772142226087020110084551158367679146616732446561228522673699836019156243452069036383047309578614662564794584927846163157472211089368697387945469398750955336949678910159585015004994620777231073804301249774041</span><br><br>n = (p**<span class="hljs-number">3</span>) * q<br>e = <span class="hljs-number">65537</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)*p*p<br><br>d=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-string">b&#x27;NSSCTF&#123;more_exp&#125;</span><br></code></pre></td></tr></table></figure><h2 id="9-多因子小明文攻击"><a href="#9-多因子小明文攻击" class="headerlink" title="9.多因子小明文攻击"></a>9.多因子小明文攻击</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br><br>e = <span class="hljs-number">65537</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    r = <span class="hljs-number">2</span>*getPrime(<span class="hljs-number">100</span>)*e+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> isPrime(r):<br>        <span class="hljs-keyword">break</span><br><br>n = p*q*r<br><br>m = bytes_to_long(flag)<br><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;q = <span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;r = <span class="hljs-subst">&#123;r&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>wp：</p><p>直接用正常的多因子例如7.简单三数的rsa会出错，因为e和phi不互质</p><p>但我们知道flag并未进行填充，flag相当的小，则m也会很小，甚至比p*q更小，那么我们可以直接mod pq</p><ul><li><p>其实通俗一点的理解就是当m<em>m</em>比较小时，此时就算公钥对应的私钥不存在（逆元不存在），我们可以考虑将公钥转化为其他公钥（用原公钥因子进行重组）再尝试求解私钥进行解密，依然可以得到正确结果。</p><p>这里其实也就解释了为什么P7，P8需要加上大量字符串的填充，就是为了防止使用该方法直接解出，在现实世界的RSA算法应用标准中，明文其实都会用特定算法进行填充来防止这种情况出现。</p></li></ul><p>![](屏幕截图 2025-03-19 222849.png)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br>p = <span class="hljs-number">7478755670255767435237487693415479182290330775502792675052667363676831056436638619069277770540533350723045234676443621124912287506103439704868369839725279</span><br>q = <span class="hljs-number">9232828888049557325429111621080998490274442347556398052322580869768941301413255711626092627273543579067597113958627672298942570149816938335701615759283713</span><br>r = <span class="hljs-number">102909133680612532601801231903654039</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">142893174944324070830219394465469685943669308818639857030565389839224452373848570577201378981080333784852764502832587008270072323948511579823852437852643609820245476634896477031076952735298279618952398460203032125853063235638358942643559551563899381032067185778629120272032518475352761100115057449043142848203976076694124978394099839339406197</span><br><br>n = p*q<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br>d=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-string">b&#x27;NSSCTF&#123;no_inverse!but_decrypt&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="10-x倍的e"><a href="#10-x倍的e" class="headerlink" title="10.x倍的e"></a>10.x倍的e</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br><br>e = <span class="hljs-number">65537</span>*<span class="hljs-number">2</span><br><br>n = p*q<br><br>m = bytes_to_long(flag)<br><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;q = <span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>wp：</p><p>又是e和phi不互素，观察到e为2*65537，猜都能猜一手m最后要开方</p><p><img src="/2025/03/19/RSA%E7%B3%BB%E5%88%97/74cceeb627.jpg" alt="NSSIMAGE"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python">方法一：<br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;NSSCTF&#123;******&#125;&#x27;</span><br>p = <span class="hljs-number">9927950299160071928293508814174740578824022211226572614475267385787727188317224760986347883270504573953862618573051241506246884352854313099453586586022059</span><br>q = <span class="hljs-number">9606476151905841036013578452822151891782938033700390347379468858357928877640534612459734825681004415976431665670102068256547092636766287603818164456689343</span><br>e = <span class="hljs-number">131074</span><br>c = <span class="hljs-number">68145285629092005589126591120307889109483909395989426479108244531402455690717006058397784318664114589567149811644664654952286387794458474073250495807456996723468838094551501146672038892183058042546944692051403972876692350946611736455784779361761930869993818138259781995078436790236277196516800834433299672560</span><br><span class="hljs-comment"># 对大整数开n次方</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">integer_nth_root</span>(<span class="hljs-params">value, n</span>):<br>   <br>    low, high = <span class="hljs-number">0</span>, value<br>    <span class="hljs-keyword">while</span> low &lt;= high:<br>        mid = (low + high) // <span class="hljs-number">2</span><br>        mid_pow = <span class="hljs-built_in">pow</span>(mid, n)<br><br>        <span class="hljs-keyword">if</span> mid_pow == value:<br>            <span class="hljs-keyword">return</span> mid<br>        <span class="hljs-keyword">elif</span> mid_pow &lt; value:<br>            low = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            high = mid - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> high<br><br>e = <span class="hljs-number">65537</span>*<span class="hljs-number">2</span><br>n = p*q<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=<span class="hljs-built_in">pow</span>(e//<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><br>m=integer_nth_root(m,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-string">b&#x27;NSSCTF&#123;inverse_and_root&#125;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">方法二，其实也不算方法，只是表示不同罢了<br><br>d = inverse(e//<span class="hljs-number">2</span>, phi) 求d<br>msg = <span class="hljs-built_in">pow</span>(c,d,n)  解密密文<br>m=gmpy2.iroot(msg,<span class="hljs-number">2</span>)  对明文进行平方处理，获得原始明文<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(m[<span class="hljs-number">0</span>]))) 取出明文<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>密码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024金盾信安杯</title>
    <link href="/2024/11/21/%E9%87%91%E7%9B%BE%E5%AF%86%E7%A0%81/"/>
    <url>/2024/11/21/%E9%87%91%E7%9B%BE%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="金盾密码"><a href="#金盾密码" class="headerlink" title="金盾密码"></a>金盾密码</h1><h2 id="1-Madoka-Runes"><a href="#1-Madoka-Runes" class="headerlink" title="1.Madoka Runes"></a>1.Madoka Runes</h2><p>直接对着表单找就能找到密码：</p><p>![](屏幕截图 2024-11-30 104213.png)</p><p>输入密码直接出：</p><p>![](屏幕截图 2024-11-30 104306.png)</p><h2 id="2-ezrsa"><a href="#2-ezrsa" class="headerlink" title="2.ezrsa"></a>2.ezrsa</h2><p>列好同余式用中国剩余解同余式直接出message然后开九次方再转字节就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> solve_congruence<br><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n_list= [<span class="hljs-number">66713068295640123413518043679913370923560077389016834699625591280879282047385580519245403302207114741281472997841541531287076973224279941649021535158376552494753299204575589142430284284245902413434936761821799053759034189893017134579658955719886273361722719112743586542747088480330917580156612938839250815003</span>, <span class="hljs-number">93220359729942518400923319353609855683086052837300675001244736571202233288801372553449408397689671981434057617518899402068905085286369656470335384345232065925153852793862944459424133537991621353691699611625715366974136180583843591508153614052037629606307298558367556655731098521869053032772401730403014449411</span>, <span class="hljs-number">52202773445480937424957100107218762961120283036868010272682251953657674323304499771956016361962421205773156515507563827756643249104742340232742821376488784769891503342865868526919624818397054897905012127075859262952310097157907061344025347963650086443568680953905161157142612464840961117362620801749842408879</span>, <span class="hljs-number">82553091456291336768427636001211333148350777177895589619884526855175557207820633168970479619932906390584318202289854140553376548714411052752572009881543144730480476077880021537960949338405404958761168462246680451456125133754632997631949332320326017613289694983606666716680033606392964861804003584352680590087</span>, <span class="hljs-number">126128435524890593300334615443194513842505260782298991058088278168395895439505633982038040121402360495508323195308297803504735565186008100115370181050483351447644843345197960248620729714988601407534725902209206970706208957109895421381133644050169949239120391954419828419646235622192096983089233429399798724487</span>, <span class="hljs-number">147720770377839100046936497325485136233566856174851147500154290566277684557076944335857851098373121814105829685203159352831436378953250080092174133899668012220790232079503109510689810335337728388773927584457619779716463492595401880008310538176873629037401466975901825628623051950211929925214837578332196553599</span>, <span class="hljs-number">124745293442434036385822462573709029035838193243455140374004343372128515081182349880050066834995439331895246886612935567956942945644079345244280145073777541185777585728280312507028128615465026099188525829472122192943136139654002445255523350717509722226068753864376920017221041478273347340655965581264836805623</span>, <span class="hljs-number">64656553220163718805421487264999277997892395292051840710229549012813342103500529051439814363514417257605481961558538034337044004386537267801729555014122714842391331402276971310101298482954289819202770742743469979203276082437481909854637859797102334245371638799858873873188431752871644960079701293335747461831</span>, <span class="hljs-number">154462961163638672730309927702785192434305799838715175474990142746477464921396636812042793324143787346439455100764604617253217478519575381751036655163922606997960615852053060424250051534473828208356751768540768480213916080575159287230278791786807130716553816283037177870759790969384364642653232602468977815247</span>]<br>c_list=[<span class="hljs-number">51005516677417731886422613156402193350848583130533301906631992184482032048070107769818228079761720652832901023407822071655421580929907698799917933792960386846321370913559830272810379334182054783031538600198349058002169866824222330811827319616021940546950576540874306599558331332151055146737648080935494708588</span>, <span class="hljs-number">2041821123943473753926018035036127142293912801344695164334852819344638501433889053269955640381265246796708182948891351463478165192547358805280444112021688736247730161578747136357928895397269414940719487328949498438102882593196857341527917555021413367950508316840335830689597383465186358872674808025884021885</span>, <span class="hljs-number">46039089253322895811415983657459035212735944272443483136853555344667290454119007801590490041259097151897732463907281406082335077604849132078446981231884370863820232336507275455767858612185246444188147542289218495584026583448273138219905723711108672612950627623799697592779175874022447423932452148543363787640</span>, <span class="hljs-number">2141453012108157552120303062697739340853570994155675106097651019594420129141220901608419609082415135997293880005773756263389204887711558521855045106895075772213924319456997007171536138494274692890230609458290192980986669338031109788977632895632700245278069147479684426240615061064967367694067860411487423629</span>, <span class="hljs-number">76749087885794868408562971424611464076430009398548197992247726105066117869497135062312665153772469258809032481701272674637826659858835954148415069808346193613807990801293969464455284990574537791095652240744633974209776335844454832745233667455060558077310143770445403006416969005307667369727581132297960295340</span>, <span class="hljs-number">129889778177138425060084420953465203875702152174072537346221842914157406769944362646320734563342499686995626438417203633387851527307925692308799272755919745234368065011417961931673684360135410907645818314090652813758836919104618375252457260402923145245889643621469138808848260838951643210609251572858120327495</span>, <span class="hljs-number">108052613612357352725536091796067255652024419037660964052217185481829734452037779785712215364053116702484384622526267250489021108209478623969497489177944680864365447787229766222546592710250224997176901299205943666999952675444279695627743788911406784072960143874125846847184624670127441248507191247442198460789</span>, <span class="hljs-number">25928340017378545972137564258602345053659415847643859318668245604506696128407382577187489651429812610536514435867501876671515838666597930094267436053423009057513573482499095162969953109513790712156495250568946074742211364960292725805474100283556046328318406696121063618778241916883747109525050277568846023327</span>, <span class="hljs-number">5719067069866090256610955425807298842117899833885283417646439095103501424652337751644977233509637214830422145008935269688470956058326551761160898415661754588089616594231873985715403389476818739027591464587460581924534479591703919621116231727841975375866296368110957023963777324175359081722392018178256892283</span>]<br><br><span class="hljs-comment"># 创建同余方程列表,便于后续求message</span><br>congruences = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">9</span>):<br>    congruences.append((c_list[i], n_list[i]) )<br><br><span class="hljs-comment"># 使用中国剩余定理解同余方程组,得出message</span><br>message, _ = solve_congruence(*congruences)<br><br><span class="hljs-comment"># 定义计算整数 n 次方根的函数,因为直接开九次方开不出来，用这个方法可以对大整数开n次方</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">integer_nth_root</span>(<span class="hljs-params">value, n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;返回 value 的整数 n 次方根&quot;&quot;&quot;</span><br>    low, high = <span class="hljs-number">0</span>, value<br>    <span class="hljs-keyword">while</span> low &lt;= high:<br>        mid = (low + high) // <span class="hljs-number">2</span><br>        mid_pow = <span class="hljs-built_in">pow</span>(mid, n)<br><br>        <span class="hljs-keyword">if</span> mid_pow == value:<br>            <span class="hljs-keyword">return</span> mid<br>        <span class="hljs-keyword">elif</span> mid_pow &lt; value:<br>            low = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            high = mid - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> high<br><br>m = integer_nth_root(<span class="hljs-built_in">int</span>(message), <span class="hljs-number">9</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag:&quot;</span>, long_to_bytes(m))<br><br></code></pre></td></tr></table></figure><h2 id="3-misc-esab"><a href="#3-misc-esab" class="headerlink" title="3.(misc)esab"></a>3.(misc)esab</h2><p>RcBg1cNg9oFgpkdkNodoVoxkhsxsJoxk9kFkBoFglkFghktkxoxc9cFkls5kNodoBoNotg5klcxclgVgZ8BkdklkhkpgBo9o9cFkRopkxgpkdkpkdklcpgFgRoZoVodk5gpktgRg1sFkdk1k9spgdcxk1sBcpktkBc1sdkdoJodsBslotc1sBsxkJgxsBoloBk5ctghk9opgRoFgJoBg5cdo9cFg5c9oVoxsFsBgJgxoxk5oBcpklg5o1kVgdkFgBs9gRoloJ8ZoNoRgpslkVopk</p><p>发现正常情况下无法解码，反转：<br>kpoVklspgRoNoZ8JoloRg9sBgFkdgVk1o5glkpcBo5kxoxgJgBsFsxoVo9c5gFc9odc5gBoJgFoRgpo9khgtc5kBoloBsxgJkxsBs1ctolsBsdoJodkds1cBktkpcBs1kxcdgps9k1kdkFs1gRgtkpg5kdoVoZoRgFgpclkdkpkdkpgxkpoRkFc9o9oBgpkhklkdkB8ZgVglcxclk5gtoNoBodoNk5slkFc9cxoxktkhgFklgFoBkFk9kxoJsxshkxoVodoNkdkpgFo9gNc1gBcR</p><p>![](屏幕截图 2024-11-30 121011.png)</p><p>然后basebasebase解码直接出：</p><p>![](屏幕截图 2024-11-30 121130.png)</p><p>详细的base过程：</p><p>![](屏幕截图 2024-11-30 121226.png)</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>密码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>密码</tag>
      
      <tag>省赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024isCTF</title>
    <link href="/2024/11/15/isctf/"/>
    <url>/2024/11/15/isctf/</url>
    
    <content type="html"><![CDATA[<h1 id="isctf-密码wp"><a href="#isctf-密码wp" class="headerlink" title="isctf 密码wp"></a>isctf 密码wp</h1><p><strong>位（Bit）是最小的数据单位，字节（Byte）由 8 个位组成，字符则是通过字节表示的</strong></p><h2 id="我和小蓝鲨的秘密（rsa图片加密解密"><a href="#我和小蓝鲨的秘密（rsa图片加密解密" class="headerlink" title="我和小蓝鲨的秘密（rsa图片加密解密"></a>我和小蓝鲨的秘密（rsa图片加密解密</h2><p>涉及rsa的图片加密解密</p><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, long_to_bytes<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>n = <span class="hljs-number">29869349657224745144762606999</span><br>e = <span class="hljs-number">65537</span><br><br>original_image_path = <span class="hljs-string">&quot;flag.jpg&quot;</span><br>img = Image.<span class="hljs-built_in">open</span>(original_image_path)<br>img = img.convert(<span class="hljs-string">&quot;RGB&quot;</span>)        <span class="hljs-comment">#将图像转换为 RGB 格式，确保每个像素包含红、绿、蓝三个通道。</span><br><br><span class="hljs-comment">#将图像转换为一个 NumPy 数组，其中 h 和 w 分别代表图像的高度和宽度（像素的行数和列数），_ 是表示颜色通道数，这里应该是 3，因为是 RGB 图像。后续代码也写出是3了</span><br>img_array = np.array(img)<br>h, w, _ = img_array.shape<br><br><span class="hljs-comment">#初始化一个空的 NumPy 数组，用于存储加密后的图像数据。数组的形状是 (h, w, 3)，即和原图像一样的尺寸和颜色通道。dtype=object 表示该数组中的元素将是任意类型的对象，这里存储的是加密后的整数。</span><br>encrypted_array = np.zeros((h, w, <span class="hljs-number">3</span>), dtype=<span class="hljs-built_in">object</span>)<br><br><span class="hljs-comment">#遍历像素点</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        <span class="hljs-comment">#提取当前像素的红、绿、蓝通道的值（每个值范围通常是 0 到 255）</span><br>        r, g, b = <span class="hljs-built_in">int</span>(img_array[i, j, <span class="hljs-number">0</span>]), <span class="hljs-built_in">int</span>(img_array[i, j, <span class="hljs-number">1</span>]), <span class="hljs-built_in">int</span>(img_array[i, j, <span class="hljs-number">2</span>])<br><span class="hljs-comment">#rsa加密</span><br>        encrypted_array[i, j, <span class="hljs-number">0</span>] = <span class="hljs-built_in">pow</span>(r, e, n)<br>        encrypted_array[i, j, <span class="hljs-number">1</span>] = <span class="hljs-built_in">pow</span>(g, e, n)<br>        encrypted_array[i, j, <span class="hljs-number">2</span>] = <span class="hljs-built_in">pow</span>(b, e, n)<br><br>np.save(<span class="hljs-string">&quot;encrypted_image.npy&quot;</span>, encrypted_array)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;图片已加密并保存为 encrypted_image.npy&quot;</span>)<br></code></pre></td></tr></table></figure><p>题解：d可以直接分解n然后得到p和q再得到d，代码没写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-comment"># RSA私钥中的 d 和 n</span><br>d = <span class="hljs-number">114529273505388659836222611033</span> <br>n = <span class="hljs-number">29869349657224745144762606999</span><br>e = <span class="hljs-number">65537</span> <br><br><span class="hljs-comment"># 从文件读取加密后的图像数据</span><br><span class="hljs-comment">#此选项允许加载含有 Python 对象的 .npy 文件，因为加密图像数据的类型可能是 object（例如存储的是整数的加密结果）</span><br>encrypted_array = np.load(<span class="hljs-string">r&quot;E:\edge下载\CTF\isctf\我和小蓝鲨的秘密\我和小蓝鲨的秘密\encrypted_image.npy&quot;</span>, allow_pickle=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#高、宽和3（上面说了，不再赘述）</span><br>h, w, _ = encrypted_array.shape<br><span class="hljs-comment">#用于后续存放解密后的数据</span><br>decrypted_list = []<br><br><span class="hljs-comment"># 对每个像素进行解密</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>    row = []<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        pixel = []<br>        <span class="hljs-keyword">for</span> channel <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):  <span class="hljs-comment"># 红、绿、蓝三个通道</span><br>            <span class="hljs-comment">#获取加密数据</span><br>            encrypted_value = encrypted_array[i, j, channel]<br>            <span class="hljs-comment">#对加密数据进行解密</span><br>            decrypted_value = <span class="hljs-built_in">pow</span>(encrypted_value, d, n)  <span class="hljs-comment"># 使用RSA私钥解密</span><br>            <span class="hljs-comment">#讲解秘数据加入到decrypted_list中，用于后续转为图片</span><br>            pixel.append(decrypted_value)<br>        row.append(pixel)<br>    decrypted_list.append(row)<br><br><span class="hljs-comment"># 将解密后的像素值转换为 numpy 数组</span><br>decrypted_array = np.array(decrypted_list, dtype=<span class="hljs-built_in">object</span>)<br><br><span class="hljs-comment"># 将解密后的数据转换为图像</span><br>decrypted_array = np.clip(decrypted_array, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>).astype(np.uint8)  <span class="hljs-comment"># 确保像素值在有效范围内</span><br>decrypted_img = Image.fromarray(decrypted_array)<br><br><span class="hljs-comment"># 保存解密后的图片</span><br>decrypted_img.save(<span class="hljs-string">&quot;decrypted_image.jpg&quot;</span>)<br>decrypted_img.show()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;图片已解密并保存为 decrypted_image.jpg&quot;</span>)<br></code></pre></td></tr></table></figure><p>![屏幕截图 2024-11-10 130024](屏幕截图 2024-11-10 130024.png)</p><h2 id="ChaCha20-Poly1305"><a href="#ChaCha20-Poly1305" class="headerlink" title="ChaCha20-Poly1305"></a>ChaCha20-Poly1305</h2><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs tap">ChaCha20-Poly1305加密解密原理<br>ChaCha20 和 Poly1305 是现代密码学中两种常用的加密算法。它们被设计为高效且安全的算法，常用于保障数据的隐私性和完整性。它们可以联合使用，组成一种“认证加密算法” (Authenticated Encryption with Associated Data, AEAD)，既提供加密（保密性）又提供完整性验证（认证性）。ChaCha20-Poly1305的组合方式是在加密数据时确保其不仅是保密的，而且可以检测是否被篡改。<br><br>1. ChaCha20 加密算法<br>ChaCha20 是一种流密码算法，它的设计基于 ChaCha 算法，ChaCha 是 Salsa20（另一种流密码算法）的一个变种。ChaCha20 每次操作生成<span class="hljs-number"> 256 </span>位的伪随机输出，常用于加密数据流。<br><br>ChaCha20的工作原理：<br>ChaCha20 的加密过程可以分为以下几个步骤：<br><br>输入：它需要一个<span class="hljs-number"> 256 </span>位的密钥、一个<span class="hljs-number"> 64 </span>位的随机初始值（nonce）和一个<span class="hljs-number"> 32 </span>位的计数器。<br>状态初始化：ChaCha20 从密钥和其他信息（如nonce、计数器等）创建一个 4x4 的矩阵（共<span class="hljs-number"> 16 </span>个<span class="hljs-number"> 32 </span>位的字），这些数据用于初始化算法的内部状态。<br>流密码生成：通过不断迭代应用非线性操作（包括加法、异或和循环移位等），生成伪随机数流。<br>加密过程：生成的伪随机数流与明文数据按位异或，从而完成加密。<br>ChaCha20 的加密过程包括<span class="hljs-number"> 20 </span>轮迭代，并且每一轮迭代都使用对称的操作，确保最终输出是高度随机的。<br><br>2. Poly1305 消息认证码（MAC）<br>Poly1305 是一种基于单一密钥的消息认证码 (MAC)，用来提供数据完整性和认证。它通过对消息进行加密生成唯一的签名，使接收方可以验证消息是否被篡改。<br><br>Poly1305的工作原理：<br>输入：Poly1305 接受一个<span class="hljs-number"> 256 </span>位的密钥和一段消息（数据块）。<br>算法：Poly1305 将消息划分成固定大小的块（通常为<span class="hljs-number"> 16 </span>字节），然后使用密钥对这些块进行加密、处理。<br>认证码生成：每个数据块经过加密后生成一个认证码，最后生成的认证码可以用来验证消息是否在传输过程中被篡改。<br>Poly1305 是一个高效的认证码生成算法，其安全性基于大数分解的困难性。<br><br>ChaCha20-Poly1305 组合<br>ChaCha20 和 Poly1305 结合在一起，提供了 认证加密（Authenticated Encryption，AE）。在这种组合中，ChaCha20 提供加密功能，确保数据的机密性；而 Poly1305 提供消息认证功能，确保数据没有在传输过程中被篡改。<br><br>工作流程：<br>加密：<br>使用 ChaCha20 对数据进行加密，生成密文。<br>生成认证码：<br>使用 Poly1305 对密文及相关数据（如头部信息、nonce 等）生成认证码（MAC）。<br>传输：<br>将密文和认证码一起传输到接收方。<br>验证与解密：<br>接收方使用相同的密钥和nonce对密文进行解密。如果认证码验证成功，说明数据没有被篡改，接收方就可以得到明文数据；如果认证码验证失败，数据被认为已经被篡改或丢失完整性。<br>ChaCha20-Poly1305 的安全性<br>保密性：ChaCha20 是一个高质量的流密码，具有强大的加密能力。<br>完整性：Poly1305 作为认证码生成器，可以检测出数据是否在传输过程中被篡改。<br>抗攻击性：ChaCha20-Poly1305 组合抗受多种攻击，包括重放攻击和密钥恢复攻击。<br>由于 ChaCha20 的高效性和 Poly1305 的简单性，该组合算法非常适合在需要快速加密且对安全性有较高要求的场景中使用，如 TLS、VPN 和加密通信协议。<br><br>名字的由来<br>1. ChaCha20<br>“ChaCha20” 中的 ChaCha 是该算法的名字来源。ChaCha 是 Salsa20（由 Daniel J. Bernstein 提出的流密码算法）的一个变种，ChaCha 在 Salsa20 的基础上做了一些增强，使其更安全且更易于分析。<br><br>“ChaCha” 这个名字来自于 Salsa20 的“舞蹈”名称（Salsa 是一种舞蹈，而 ChaCha 是 Salsa 的一种变体），这种名称可能暗示着 ChaCha20 的变化和增强。<br>数字<span class="hljs-number"> 20 </span>表示该算法执行的迭代次数为<span class="hljs-number"> 20 </span>轮，保证了更强的安全性。<br>2. Poly1305<br>Poly1305 是由 Daniel J. Bernstein 提出的消息认证码（MAC）。这个名字来源于它的数学基础：它基于一个多项式（poly）的计算。<br><br>数字<span class="hljs-number"> 1305 </span>代表了 Poly1305 使用的一个具体的多项式，通常是一个在有限域上进行计算的多项式。<br>结合起来，ChaCha20-Poly1305 代表了这两种算法的结合体，其中：<br><br>ChaCha20 是加密算法的名称，基于 ChaCha 的变种。<br>Poly1305 是消息认证码的名称，基于一个多项式的计算。<br>这个名字简洁地表达了该加密组合的两个核心算法，并标明了其关键的安全特性：加密与认证。<br><br>总结<br>ChaCha20 提供流密码加密，确保数据的机密性。<br>Poly1305 提供消息认证码（MAC），确保数据的完整性和认证。<br>ChaCha20-Poly1305 组合提供了高效、安全的认证加密功能，广泛用于现代网络安全协议中，如 TLS 1.3。<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ChaCha20-Poly1305 解释<br>ChaCha20：一种流密码算法，用于生成伪随机密钥流。其优点包括速度较快和抗破解能力强。<br>Poly1305：一种认证码算法，用于生成数据完整性和认证的哈希值，确保数据在传输过程中没有被篡改。<br><br>在 PyCryptodome 或类似的加密库中，ChaCha20-Poly1305 模式通常通过 ChaCha20_Poly1305 类来实现。cipher<span class="hljs-selector-class">.encrypt_and_digest</span>() 方法会同时加密数据并生成认证码。<br><br>生成密钥和nonce：<br><br>key = <span class="hljs-built_in">get_random_bytes</span>(<span class="hljs-number">32</span>)：生成一个<span class="hljs-number">32</span>字节的随机密钥，这是 ChaCha20-Poly1305 所需要的密钥长度。<br>nonce = <span class="hljs-built_in">get_random_bytes</span>(<span class="hljs-number">12</span>)：生成一个<span class="hljs-number">12</span>字节的随机数（nonce），这是 ChaCha20-Poly1305 模式要求的长度，通常 nonce 必须是唯一的，不能重复。<br>创建 ChaCha20_Poly1305 对象：<br><br>使用 ChaCha20_Poly1305<span class="hljs-selector-class">.new</span>() 创建一个新的加密对象，传入密钥和 nonce。<br>加密和生成认证码：<br><br>cipher<span class="hljs-selector-class">.encrypt_and_digest</span>(plaintext)：这个方法既加密数据，也计算出一个认证码（tag）。认证码可以用来验证数据在传输过程中是否被篡改。<br>输出密文和认证码：<br><br>ciphertext：加密后的数据。<br>tag：Poly1305 算法生成的认证码，用来保证数据的完整性和真实性。<br><br>ChaCha20-Poly1305 提供了 认证加密（AEAD），它不仅确保了数据的 机密性（通过加密）还确保了数据的 完整性（通过认证码）。<br>cipher<span class="hljs-selector-class">.encrypt_and_digest</span>() 同时执行加密和认证操作，返回加密后的数据和认证码（tag）。<br>解密时，使用相同的密钥和 nonce，并且需要提供正确的认证码来验证数据的完整性。<br>这种加密方式广泛应用于安全通信协议，如 TLS、VPN 和现代加密货币应用中，因为它在速度和安全性方面表现出色。<br></code></pre></td></tr></table></figure><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ChaCha20_Poly1305<br><span class="hljs-keyword">import</span> os<br><br>key = os.urandom(<span class="hljs-number">32</span>)<br>nonce = os.urandom(<span class="hljs-number">12</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    plaintext = f.read()<br><br>cipher = ChaCha20_Poly1305.new(key=key, nonce=nonce)<br><br>ct, tag = cipher.encrypt_and_digest(plaintext)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Encrypted Flag: <span class="hljs-subst">&#123;ct.<span class="hljs-built_in">hex</span>()&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Tag: <span class="hljs-subst">&#123;tag.<span class="hljs-built_in">hex</span>()&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Nonce: <span class="hljs-subst">&#123;nonce.<span class="hljs-built_in">hex</span>()&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;key.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> key_file:<br>    key_file.write(key.<span class="hljs-built_in">hex</span>())<br></code></pre></td></tr></table></figure><p>这是ChaCha20_Poly1305，它的原理，我还没看，这几天摆烂了，不想学习，看加密过程大概了解到：用key（密钥），nonce（只被使用一次的任意或非重复的数值）可以加密得到cipher，然后用cipher生成认证码ct和tag，用于防止密文被破解（具体过程不清楚）</p><p>原题是给了个txt的文本，里面给的东西很多（基本上是都i给你了），<strong>但是</strong>byd我最开始以为是截取长度再base91解出key（hex），没想到他是base92直接出然后用</p><p>这是解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ChaCha20_Poly1305<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># 已知的 hex 数据</span><br>hex_nonce = <span class="hljs-string">&quot;d8ebeedec812a6d71240cc50&quot;</span><br>hex_tag = <span class="hljs-string">&quot;70ffcc508bf4519e7616f602123c307b&quot;</span><br>hex_ciphertext = <span class="hljs-string">&quot;20408b9fc498063ad53a4abb53633a6a15df0ddaf173012d620fa33001794dbb8c038920273464e13170e26d08923aeb&quot;</span><br>base92_key = <span class="hljs-string">&quot;3=t#sMX3?9GHSPdi4i^gk!3*(cH8S8XT2y&amp;?Tv4!?AGG=R]ZDy/PVVa+DqiXAH*&#125;DS&amp;Nn*a+@&lt;H,=!L&quot;</span><br>decoded_key =<span class="hljs-number">0x173974535637a5ef30a116b03d00bd2fe751951ca3eaa62daec2b8f5ca5b6135</span><br>decoded_key=long_to_bytes(decoded_key)<br><span class="hljs-comment"># 将 hex 转换为字节</span><br>nonce = binascii.unhexlify(hex_nonce)<br>tag = binascii.unhexlify(hex_tag)<br>ciphertext = binascii.unhexlify(hex_ciphertext)<br><br>cipher = ChaCha20_Poly1305.new(key=decoded_key, nonce=nonce)<br>plaintext = cipher.decrypt_and_verify(ciphertext, tag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密后的数据:&quot;</span>, plaintext.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><p>![](屏幕截图 2024-11-15 213023.png)</p><h2 id="蓝鲨的费马"><a href="#蓝鲨的费马" class="headerlink" title="蓝鲨的费马"></a>蓝鲨的费马</h2><p>这是原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> *<br><br>flag=<span class="hljs-string">b&#x27;ISCTF&#123;********&#125;&#x27;</span><br>m=bytes_to_long(flag)<br><br>p=libnum.generate_prime(<span class="hljs-number">1024</span>)<br>q=libnum.generate_prime(<span class="hljs-number">1024</span>)<br>n=p*q<br>e=<span class="hljs-number">0x10001</span> <br>e=<span class="hljs-number">65537</span><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br>d=inverse(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>leak = (d+(<span class="hljs-built_in">pow</span>(p,q,n)+<span class="hljs-built_in">pow</span>(q,p,n)))%n<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c=&quot;</span>, c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;leak=&quot;</span>, leak)<br></code></pre></td></tr></table></figure><p>这个不是很难，有点难罢了：</p><p><img src="/2024/11/15/isctf/A8CED196128B7720AA3C9C771B1D0E6D.jpg"></p><p>然后代码是这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> *<br><br>c=<br>n=<br>leak=<br>e=<br>l=e*leak%n<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (e):<br>    <span class="hljs-keyword">if</span>((l-<span class="hljs-number">1</span>-k)%(e-k)==<span class="hljs-number">0</span>):<br>        p_and_q=(l-<span class="hljs-number">1</span>-k)//(e-k)<br>        a=p_and_q*p_and_q-<span class="hljs-number">4</span>*n<br>        <br>        <br>        <span class="hljs-keyword">if</span>(a&lt;=<span class="hljs-number">0</span>):<br>            <span class="hljs-keyword">continue</span><br>        b=iroot(a,<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span>(b[<span class="hljs-number">1</span>]):<br>            p=(p_and_q+b[<span class="hljs-number">0</span>])//<span class="hljs-number">2</span><br>            q=(p_and_q-b[<span class="hljs-number">0</span>])//<span class="hljs-number">2</span><br>            d=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>            m=<span class="hljs-built_in">pow</span>(c,d,n)<br>            <span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br></code></pre></td></tr></table></figure><p>![](屏幕截图 2024-11-15 221522.png)</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>密码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024的1024新生赛</title>
    <link href="/2024/10/24/1024%E6%96%B0%E7%94%9F%E8%B5%9B/"/>
    <url>/2024/10/24/1024%E6%96%B0%E7%94%9F%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="1024新生赛"><a href="#1024新生赛" class="headerlink" title="1024新生赛"></a>1024新生赛</h1><h2 id="好用的网址"><a href="#好用的网址" class="headerlink" title="好用的网址"></a>好用的网址</h2><p><a href="https://ctf.bugku.com/tools">在线工具 - Bugku CTF平台</a></p><p><a href="https://www.toolhelper.cn/EncodeDecode/Base64">Base64 编码&#x2F;解码 - 锤子在线工具</a></p><h2 id="凯撒也干了"><a href="#凯撒也干了" class="headerlink" title="凯撒也干了"></a>凯撒也干了</h2><p>题目就给提示了，是凯撒加密（一种替换加密，我们直接求出：</p><p>![屏幕截图 2024-10-24 173910](屏幕截图 2024-10-24 173910.png)</p><p>至于偏移量为什么是二，因为凯撒加密是一种替换加密，我们知道flag的形式是xxxCTF{}  ARD右移两位就是CTF，所以偏移量就是-2</p><h2 id="曲径通幽处"><a href="#曲径通幽处" class="headerlink" title="曲径通幽处"></a>曲径通幽处</h2><p>题目描述：一个古典部的少年从一条路的尽头上下上下上的走过了一条弯曲的路，并且经过了5个庭院和5个学校。</p><p>本题flag头为ISCTF</p><p>判断其为古典加密，且给出提示上下上下上 5 5，给出的文本又是：}I_cFTle_FToneCSWnTC5@0{I </p><p>共25位判断其为栅栏加密，我们根据提示分成五组：</p><p>}I_cF</p><p>Tle_F</p><p>ToneC</p><p>SWnTC</p><p>5@0{I </p><p>flag开头为ISCTF，又根据给出的提示，我们可以浅试一手：</p><p>![屏幕截图 2024-10-24 181631](屏幕截图 2024-10-24 181631.png)</p><p>得出flag，</p><h2 id="long-to-bytes"><a href="#long-to-bytes" class="headerlink" title="long_to_bytes"></a>long_to_bytes</h2><p>这是原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>flag=<span class="hljs-string">b&#x27;flag&#123;xxxxx&#125;&#x27;</span><br>n=bytes_to_long(flag)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n=264482712154165850801381669076121773480907739897690780617124341999230794182590691214396064148014801051776269633074284019581</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>这个题需要python和在python中安装crypto，安装python和crypto的教程在网上都好找，在此不再演示</p><p>这个比较简单，安装好这两个东西后直接long_to_bytes()就好了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># flag=b&#x27;flag&#123;xxxxx&#125;&#x27;</span><br>n=n=<span class="hljs-number">264482712154165850801381669076121773480907739897690780617124341999230794182590691214396064148014801051776269633074284019581</span><br>n=long_to_bytes(n)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b&#x27;flag&#123;wanyi_nijiushi_na_wanzhongwuyi_de_tiancai_ne?&#125;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><h2 id="ez-math"><a href="#ez-math" class="headerlink" title="ez_math"></a>ez_math</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s2n</span>(<span class="hljs-params">string</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(string.encode(<span class="hljs-string">&quot;utf-8&quot;</span>).<span class="hljs-built_in">hex</span>(),<span class="hljs-number">16</span>)<br><br><br>m = s2n(flag)<br><br>n1 = getPrime(<span class="hljs-number">256</span>)<br>n2 = getPrime(<span class="hljs-number">256</span>)<br><br>c1 = m % n1<br>c2 = m % n2<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./result.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>file.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;c1=&#125;</span>\n<span class="hljs-subst">&#123;c2=&#125;</span>\n<span class="hljs-subst">&#123;n1=&#125;</span>\n<span class="hljs-subst">&#123;n2=&#125;</span>&quot;</span>)<br>file.close()<br></code></pre></td></tr></table></figure><p>这个可以直接套脚本或者用sympy的内置方法就好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy.ntheory.modular <span class="hljs-keyword">import</span> solve_congruence<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>c1=<span class="hljs-number">37249702839435135643850404026024412683134998575291233690988327543619514037695</span><br>c2=<span class="hljs-number">18416923650953751308058552833370734669994554569844095575888642338823812375656</span><br>n1=<span class="hljs-number">78333809298116952939564356593122079059999883827426443480510842209201768015887</span><br>n2=<span class="hljs-number">72210330055051819360448136226819845758816865049329539316060036869938240551269</span><br><br>m, _ = solve_congruence((c1, n1), (c2, n2))<br><br><br><br><br>flag = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recovered flag:&quot;</span>, flag)<br><span class="hljs-string">&#x27;&#x27;&#x27;HTUCTF&#123;6e517351-cc04-4917-85da-47384fc14316&#125;&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">extended_gcd</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; 返回 (gcd, x, y) 使得 ax + by = gcd &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> a == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> (b, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>    gcd, x1, y1 = extended_gcd(b % a, a)<br>    x = y1 - (b // a) * x1<br>    y = x1<br>    <span class="hljs-keyword">return</span> (gcd, x, y)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mod_inverse</span>(<span class="hljs-params">a, m</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; 计算 a 在模 m 下的逆元 &quot;&quot;&quot;</span><br>    gcd, x, _ = extended_gcd(a, m)<br>    <span class="hljs-keyword">if</span> gcd != <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Inverse does not exist&quot;</span>)<br>    <span class="hljs-keyword">return</span> x % m<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">chinese_remainder_theorem</span>(<span class="hljs-params">c1, c2, n1, n2</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; 根据中国剩余定理计算 m &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 验证 c1 和 c2 的合法性</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-number">0</span> &lt;= c1 &lt; n1) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> (<span class="hljs-number">0</span> &lt;= c2 &lt; n2):<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;c1 must be less than n1 and c2 must be less than n2&quot;</span>)<br>    <br>    <span class="hljs-comment"># 计算 n1 和 n2 的逆元</span><br>    n1_inv = mod_inverse(n1, n2)<br>    n2_inv = mod_inverse(n2, n1)<br><br>    <span class="hljs-comment"># 根据 CRT 的公式计算 m</span><br>    m = (c1 * n2 * n2_inv + c2 * n1 * n1_inv) % (n1 * n2)<br><br>    <span class="hljs-keyword">return</span> m<br><br><span class="hljs-comment"># 示例</span><br>c1 = <span class="hljs-number">2</span>  <span class="hljs-comment"># 例：m % n1</span><br>c2 = <span class="hljs-number">3</span>  <span class="hljs-comment"># 例：m % n2</span><br>n1 = <span class="hljs-number">5</span>  <span class="hljs-comment"># 模数 n1</span><br>n2 = <span class="hljs-number">7</span>  <span class="hljs-comment"># 模数 n2</span><br><br>m = chinese_remainder_theorem(c1, c2, n1, n2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The value of m is:&quot;</span>, m)<br></code></pre></td></tr></table></figure><h2 id="普通的RSA"><a href="#普通的RSA" class="headerlink" title="普通的RSA"></a>普通的RSA</h2><p>这个涉及RSA了，感觉一时半会讲不完，讲了你们也听不懂，先放原题吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s2n</span>(<span class="hljs-params">string</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(string.encode(<span class="hljs-string">&quot;utf-8&quot;</span>).<span class="hljs-built_in">hex</span>(),<span class="hljs-number">16</span>)<br><br>n=p*q<br><br>m = s2n(flag)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>():<br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = <span class="hljs-built_in">int</span>(next_prime(p))<br>n = p*q<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>e=<span class="hljs-number">0x10001</span><br><span class="hljs-keyword">while</span>(gcd(phi,e) != <span class="hljs-number">1</span>):<br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = next_prime(p)<br>n = p*q<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> (n,e,phi)<br><br><br>n,e,phi = gen()<br>c = <span class="hljs-built_in">pow</span>(m,e,n) m**e(mod n)=c m=c**d modn<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./RSA.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>file.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;n=&#125;</span>\n<span class="hljs-subst">&#123;c=&#125;</span>&quot;</span>)<br>file.close()<br><br></code></pre></td></tr></table></figure><p>这种是已知n，c，e的，通过q&#x3D;next_prime(p)我们知道p和q比较接近，所以可以利用这一点来解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span>  nextprime, root<br><span class="hljs-keyword">import</span> math<br>n=<span class="hljs-number">18949498985986928711843321080602823701712014042049416390846564093388611291117062696087230880365026760797539322795552533481425232454936702742130962936755703750058517665792856275700722341035864624409094208842377728513453452818841799059356922700403897583999797293831012950825029618460259198795550064691440879505779511194409762430676541543737089954665642736218306476220888830115844610819075723263763070748740428190826833316582893965878723227457610920738816258244554829877952822355818446165333343949923505996270102899784022411761912934504022393721987105209305284347043340327561826434179480900699255745436348685748974901201</span><br>c=<span class="hljs-number">2969824285249100526322302682221040716867970513038732238063889997163423491301934038093514987472802359998652707545381821218024355980402402868317513122066439113058805805494989902360947778584693127259486538542108670777034276473922171938113305898239307091304099755800468445443498516447604650800088630197154105031841166708938180803550612723800232703109540434743220287394920524894879882922225369950384603748805110488531200017670810970677068957353697200297293764561028264920407022749642913030162012868067293039018324185505638205631433386764255108667369874722506838551476625040094069895067492912258930920239951143338333435586</span><br><br>e=<span class="hljs-number">65537</span><br>a=root(n,<span class="hljs-number">2</span>)<br><br>q=nextprime(a)<br><br>p=n//q<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br>d=<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-string">b&#x27;HTUCTF&#123;bb818877-0509-47a4-9a69-e26f69fc355a&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="attack"><a href="#attack" class="headerlink" title="attack"></a>attack</h2><p>这个是一个简单的基于字母表的加密系统。它使用字母到数字的映射，结合一个密钥，通过对应元素相加的方式对字符串进行加密。由于代码的设计，非字母字符不会被加密，因此它们将保持不变。</p><p>原题：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment"># 实现列表对应元素相加（加密部分）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_list</span>(<span class="hljs-params">x,y</span>):<br>    result = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(x)):<br>        z = x[i] + y[i]<br>        result.append(z)<br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-comment"># 实现列表元素对应相减（解密部分）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_list</span>(<span class="hljs-params">x,y</span>):<br>    result = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(x)):<br>        z = x[i] - y[i]<br>        result.append(z)<br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-comment"># 构造映射 字符----&gt;num</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">c2n</span>():<br>    list_c = []<br>    list_n = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>        list_n.append(i)<br>        list_c.append(<span class="hljs-built_in">chr</span>(i+<span class="hljs-number">97</span>))<br>    dic_c2n = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x,y:[x,y],list_c,list_n))<br>    <span class="hljs-keyword">return</span> dic_c2n<br><br><br><span class="hljs-comment"># 构造映射 num----&gt;字符</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">n2c</span>():<br>    list_c = []<br>    list_n = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>        list_n.append(i)<br>        list_c.append(<span class="hljs-built_in">chr</span>(i+<span class="hljs-number">97</span>))<br>    dic_n2c = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x,y:[x,y],list_n,list_c))<br>    <span class="hljs-keyword">return</span> dic_n2c<br><span class="hljs-comment"># 加密</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">s,key</span>):<br>    <span class="hljs-comment"># print(&#x27;加密后的字符： &#x27;,end=&#x27;&#x27;)</span><br>    dic_c2n = c2n()<br>    dic_n2c = n2c()<br>    list_s = []<br>    list_key = []<br>    list_finall = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        i = i.lower()<br>        list_s.append(dic_c2n[i])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> key:<br>        i = i.lower()<br>        list_key.append(dic_c2n[i])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list_key:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(list_key) &lt;= <span class="hljs-built_in">len</span>(list_s):<br>            list_key.append(i)<br>    list_result = add_list(list_s,list_key)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list_result:<br>        <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">25</span>:<br>            i -= <span class="hljs-number">26</span><br>        list_finall.append(dic_n2c[i])<br>    <span class="hljs-keyword">return</span> list_finall[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">all_encode</span>():<br>key = <span class="hljs-string">&quot;HELLO&quot;</span><br>count = <span class="hljs-number">0</span><br>keyword = string.ascii_letters <br>result = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>tk = key[count % <span class="hljs-built_in">len</span>(key)]<br><span class="hljs-keyword">if</span> flag[i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> keyword:<br>result += flag[i]<br><span class="hljs-keyword">else</span>:<br>result += encode(tk,flag[i])<br>count += <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> result<br><br>encode_data = all_encode()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./attack.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>file.write(<span class="hljs-string">f&quot;secret is :<span class="hljs-subst">&#123;encode_data&#125;</span>&quot;</span>)<br>file.close()<br><br></code></pre></td></tr></table></figure><p>了解加密过程：在加密过程中，我们将字母转换为对应的数字，然后将这些数字与密钥的数字相加（并使用模 26 处理）。为了反向解密，我们需要进行相减操作。就写代码进行解密就好了。</p><p>直接丢给ai也行，因为这是简单的加密解密（思考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>encoded=<span class="hljs-string">&quot;oxfnhm&#123;44648e87-2632-4236-997l-po38k362837h&#125;&quot;</span><br><span class="hljs-comment"># 字符到数字的映射</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">c2n</span>():<br>    dic_c2n = &#123;<span class="hljs-built_in">chr</span>(i + <span class="hljs-number">97</span>): i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>)&#125;  <span class="hljs-comment"># &#x27;a&#x27; = 97</span><br>    <span class="hljs-keyword">return</span> dic_c2n<br><br><span class="hljs-comment"># 数字到字符的映射</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">n2c</span>():<br>    dic_n2c = &#123;i: <span class="hljs-built_in">chr</span>(i + <span class="hljs-number">97</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>)&#125;  <span class="hljs-comment"># &#x27;a&#x27; = 97</span><br>    <span class="hljs-keyword">return</span> dic_n2c<br><br><span class="hljs-comment"># 从两个列表中减去对应的数字</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_list</span>(<span class="hljs-params">list_s, list_key</span>):<br>    <span class="hljs-keyword">return</span> [(s - key) % <span class="hljs-number">26</span> <span class="hljs-keyword">for</span> s, key <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(list_s, list_key)]<br><br><span class="hljs-comment"># 解密函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">s, key</span>):<br>    dic_c2n = c2n()<br>    dic_n2c = n2c()<br>    list_s = []<br>    list_key = []<br>    list_final = []<br><br>    <span class="hljs-comment"># 将字符串和密钥转换为数字</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        i = i.lower()<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> dic_c2n:  <span class="hljs-comment"># 只处理字母</span><br>            list_s.append(dic_c2n[i])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> key:<br>        i = i.lower()<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> dic_c2n:  <span class="hljs-comment"># 只处理字母</span><br>            list_key.append(dic_c2n[i])<br><br>    <span class="hljs-comment"># 解密：用密钥的数字减去字符串的数字</span><br>    list_result = sub_list(list_s, list_key)<br><br>    <span class="hljs-comment"># 将解密结果转换为字符</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list_result:<br>        list_final.append(dic_n2c[i])<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(list_final)<br><br><span class="hljs-comment"># 解密全部</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">all_decode</span>(<span class="hljs-params">encoded_string</span>):<br>    key = <span class="hljs-string">&quot;HELLO&quot;</span>  <span class="hljs-comment"># 密钥</span><br>    count = <span class="hljs-number">0</span><br>    result = <span class="hljs-string">&quot;&quot;</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(encoded_string)):<br>        tk = key[count % <span class="hljs-built_in">len</span>(key)]  <span class="hljs-comment"># 获取密钥字符</span><br>        <span class="hljs-keyword">if</span> encoded_string[i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> string.ascii_letters:  <span class="hljs-comment"># 保持非字母字符不变</span><br>            result += encoded_string[i]<br>        <span class="hljs-keyword">else</span>:<br>            result += decode(encoded_string[i], tk)  <span class="hljs-comment"># 解密字母</span><br>            count += <span class="hljs-number">1</span>  <span class="hljs-comment"># 只对字母增加计数</span><br>    <span class="hljs-keyword">return</span> result<br><br>decoded=all_decode(encoded)<br><span class="hljs-built_in">print</span>(decoded)<br><br><br><span class="hljs-string">&#x27;htuctf&#123;44648a87-2632-4236-997a-ea38d362837d&#125;&#x27;</span><br>htuctf&#123;44648a87-<span class="hljs-number">2632</span>-<span class="hljs-number">4236</span>-997a-ea38d362837d&#125;<br></code></pre></td></tr></table></figure><p>哦，维吉尼亚加密解密，因为直接用ai出了就没管他。这里感谢rph的提问</p><h2 id="ReDs"><a href="#ReDs" class="headerlink" title="ReDs"></a>ReDs</h2><p>ok啊，这是随机数预测，详情请看：</p><p>[<a href="https://blog.csdn.net/qq_42557115/article/details/128228201">CTF&#x2F;randcrack]python随机数预测模块分析及改进方案_random.getrandbits(32)-CSDN博客</a></p><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> getrandbits<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">data</span>):<br>data=data.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(data) % <span class="hljs-number">16</span> !=<span class="hljs-number">0</span>:<br>data+=<span class="hljs-string">b&#x27;\x00&#x27;</span><br><span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">key,m</span>):<br>mode=AES.MODE_ECB<br>aes=AES.new(pad(key),mode)<br>en_m=aes.encrypt(pad(m))<br>en_m=base64.encodebytes(en_m)<br>en_m=en_m.decode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br><span class="hljs-keyword">return</span> en_m<br><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./ReDs.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>file.write(<span class="hljs-built_in">str</span>(getrandbits(<span class="hljs-number">32</span>)) + <span class="hljs-string">&quot;\n&quot;</span>)<br><br>key= <span class="hljs-built_in">str</span>(getrandbits(<span class="hljs-number">32</span>))<br>encode_data = encode(key,flag)<br>file.write(<span class="hljs-string">f&quot;\n<span class="hljs-subst">&#123;encode_data=&#125;</span>&quot;</span>)<br>file.close()<br></code></pre></td></tr></table></figure><p>给出了624个32位随机数，我们可以预测出下一个数，也就是我们能预测出key的值</p><p>具体原因：（为什么会被预测）是因为这是随机数算法的一个，算是漏洞？</p><p>然后这一题有两种方法，一种是爆破：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> trange<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Pool, current_process<br><span class="hljs-keyword">import</span> os<br><br><br>enc_data = <span class="hljs-string">&#x27;AcQYXx1jdOVU2wArqtW3JAfd5fPgkBMMcbOfz8C2x71aP9CUH0pZp3moQ3PXyETQ&#x27;</span><br>data = b64decode(enc_data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">data</span>):<br>data=data.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(data) % <span class="hljs-number">16</span> !=<span class="hljs-number">0</span>:<br>data+=<span class="hljs-string">b&#x27;\x00&#x27;</span><br><span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">key, text</span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>aes = AES.new(pad(key),AES.MODE_ECB)<br><span class="hljs-keyword">return</span> aes.decrypt(text)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">start, per_size, pool</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;process id <span class="hljs-subst">&#123;os.getpid()&#125;</span>&quot;</span>)<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, start + per_size):<br><span class="hljs-keyword">if</span> decode(<span class="hljs-built_in">str</span>(key), data).startswith(<span class="hljs-string">b&quot;HTUCTF&quot;</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;key found!!!!!!&quot;</span>,key,decode(<span class="hljs-built_in">str</span>(key), data))<br><span class="hljs-keyword">break</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>full_size = <span class="hljs-number">2</span>**<span class="hljs-number">32</span> <span class="hljs-comment"># 搜索大小为32bit</span><br>size = <span class="hljs-number">60</span> <span class="hljs-comment"># 创建60个进程</span><br>per_size = full_size // size <span class="hljs-comment"># 分配任务，类似于分段搜索</span><br>next_size = <span class="hljs-number">0</span> <span class="hljs-comment"># 初始化开始位置</span><br>p = Pool(size) <span class="hljs-comment"># 创建进程池</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size):<br><span class="hljs-keyword">if</span> next_size + per_size &gt; full_size:<br>per_size = full_size - next_size<br>p.apply_async(task, args=(next_size, per_size) ) <span class="hljs-comment">#执行区间搜索</span><br>next_size += per_size<br><br>p.close()<br>p.join()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>main()<br></code></pre></td></tr></table></figure><p>一种是随机数预测：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> randcrack <span class="hljs-keyword">import</span> RandCrack<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> getrandbits<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> base64<br>a=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<br><span class="hljs-string">&#x27;&#x27;&#x27;3848073275</span><br><span class="hljs-string">241649934</span><br><span class="hljs-string">3943503978</span><br><span class="hljs-string">258207836</span><br><span class="hljs-string">4081811965</span><br><span class="hljs-string">1651597630</span><br><span class="hljs-string">3325676874</span><br><span class="hljs-string">2964002855</span><br><span class="hljs-string">2822968513</span><br><span class="hljs-string">2666937310</span><br><span class="hljs-string">1491453920</span><br><span class="hljs-string">1125945763</span><br><span class="hljs-string">3298869747</span><br><span class="hljs-string">1658212672</span><br><span class="hljs-string">3058975936</span><br><span class="hljs-string">2725466828</span><br><span class="hljs-string">3389990175</span><br><span class="hljs-string">1388788501</span><br><span class="hljs-string">2462009241</span><br><span class="hljs-string">3150354943</span><br><span class="hljs-string">967382871</span><br><span class="hljs-string">352984748</span><br><span class="hljs-string">3040743723</span><br><span class="hljs-string">4294319733</span><br><span class="hljs-string">2578486</span><br><span class="hljs-string">44793404</span><br><span class="hljs-string">2092478614</span><br><span class="hljs-string">3305053974</span><br><span class="hljs-string">2317871683</span><br><span class="hljs-string">951087322</span><br><span class="hljs-string">967755183</span><br><span class="hljs-string">2306228127</span><br><span class="hljs-string">3742813448</span><br><span class="hljs-string">2731897813</span><br><span class="hljs-string">3998026101</span><br><span class="hljs-string">2159565135</span><br><span class="hljs-string">3348069958</span><br><span class="hljs-string">573267799</span><br><span class="hljs-string">532111185</span><br><span class="hljs-string">2953591763</span><br><span class="hljs-string">1924882170</span><br><span class="hljs-string">4247342793</span><br><span class="hljs-string">3554062734</span><br><span class="hljs-string">422061186</span><br><span class="hljs-string">3744472386</span><br><span class="hljs-string">2710908183</span><br><span class="hljs-string">3144423263</span><br><span class="hljs-string">3192716483</span><br><span class="hljs-string">3250605029</span><br><span class="hljs-string">1319720487</span><br><span class="hljs-string">1427845172</span><br><span class="hljs-string">3548479290</span><br><span class="hljs-string">713602566</span><br><span class="hljs-string">2914364483</span><br><span class="hljs-string">3275801257</span><br><span class="hljs-string">3294429580</span><br><span class="hljs-string">861598555</span><br><span class="hljs-string">916869896</span><br><span class="hljs-string">4011565193</span><br><span class="hljs-string">3872765094</span><br><span class="hljs-string">2202499079</span><br><span class="hljs-string">1112772860</span><br><span class="hljs-string">943061165</span><br><span class="hljs-string">1127268558</span><br><span class="hljs-string">1191904981</span><br><span class="hljs-string">202839297</span><br><span class="hljs-string">2217513610</span><br><span class="hljs-string">1555539251</span><br><span class="hljs-string">4197529363</span><br><span class="hljs-string">2964776675</span><br><span class="hljs-string">2345984344</span><br><span class="hljs-string">510018469</span><br><span class="hljs-string">2175777793</span><br><span class="hljs-string">3528057283</span><br><span class="hljs-string">1191665294</span><br><span class="hljs-string">17211303</span><br><span class="hljs-string">627730758</span><br><span class="hljs-string">2262562395</span><br><span class="hljs-string">945890808</span><br><span class="hljs-string">3353488871</span><br><span class="hljs-string">2841159564</span><br><span class="hljs-string">276317799</span><br><span class="hljs-string">1345022153</span><br><span class="hljs-string">3590282650</span><br><span class="hljs-string">2672565268</span><br><span class="hljs-string">3514593588</span><br><span class="hljs-string">3277562238</span><br><span class="hljs-string">660536138</span><br><span class="hljs-string">2623776010</span><br><span class="hljs-string">2086786901</span><br><span class="hljs-string">2114048589</span><br><span class="hljs-string">3608894706</span><br><span class="hljs-string">4047393720</span><br><span class="hljs-string">279675399</span><br><span class="hljs-string">1259977480</span><br><span class="hljs-string">3609373486</span><br><span class="hljs-string">378639667</span><br><span class="hljs-string">1278916783</span><br><span class="hljs-string">1379361765</span><br><span class="hljs-string">655898478</span><br><span class="hljs-string">2839396244</span><br><span class="hljs-string">2219102487</span><br><span class="hljs-string">3707908754</span><br><span class="hljs-string">1748586281</span><br><span class="hljs-string">2193471801</span><br><span class="hljs-string">3903443072</span><br><span class="hljs-string">4271704349</span><br><span class="hljs-string">1358952278</span><br><span class="hljs-string">3497140619</span><br><span class="hljs-string">1443589434</span><br><span class="hljs-string">548706251</span><br><span class="hljs-string">3767751035</span><br><span class="hljs-string">1183030620</span><br><span class="hljs-string">2712473450</span><br><span class="hljs-string">163431655</span><br><span class="hljs-string">4257007018</span><br><span class="hljs-string">3124929768</span><br><span class="hljs-string">3890351873</span><br><span class="hljs-string">2451975774</span><br><span class="hljs-string">433864241</span><br><span class="hljs-string">3469948918</span><br><span class="hljs-string">3348294888</span><br><span class="hljs-string">1962699470</span><br><span class="hljs-string">4261604784</span><br><span class="hljs-string">1001781349</span><br><span class="hljs-string">1501063835</span><br><span class="hljs-string">1880370779</span><br><span class="hljs-string">733915495</span><br><span class="hljs-string">4283585478</span><br><span class="hljs-string">1619412316</span><br><span class="hljs-string">756021595</span><br><span class="hljs-string">2747259301</span><br><span class="hljs-string">3465198545</span><br><span class="hljs-string">914357015</span><br><span class="hljs-string">3596175628</span><br><span class="hljs-string">588495874</span><br><span class="hljs-string">353343278</span><br><span class="hljs-string">3081205941</span><br><span class="hljs-string">1395931346</span><br><span class="hljs-string">4026172262</span><br><span class="hljs-string">3739015728</span><br><span class="hljs-string">1843232309</span><br><span class="hljs-string">443097617</span><br><span class="hljs-string">1164709487</span><br><span class="hljs-string">4221809970</span><br><span class="hljs-string">2634437501</span><br><span class="hljs-string">1593786293</span><br><span class="hljs-string">469355994</span><br><span class="hljs-string">24615172</span><br><span class="hljs-string">707572888</span><br><span class="hljs-string">943196518</span><br><span class="hljs-string">18468306</span><br><span class="hljs-string">1264279229</span><br><span class="hljs-string">3289009232</span><br><span class="hljs-string">1431434901</span><br><span class="hljs-string">3321775597</span><br><span class="hljs-string">398545961</span><br><span class="hljs-string">3269720908</span><br><span class="hljs-string">934234339</span><br><span class="hljs-string">1252656237</span><br><span class="hljs-string">1577089958</span><br><span class="hljs-string">784788447</span><br><span class="hljs-string">415000408</span><br><span class="hljs-string">1670066404</span><br><span class="hljs-string">3680124941</span><br><span class="hljs-string">3081714929</span><br><span class="hljs-string">1597657805</span><br><span class="hljs-string">4040394861</span><br><span class="hljs-string">3306653316</span><br><span class="hljs-string">1233267726</span><br><span class="hljs-string">2447271906</span><br><span class="hljs-string">2520200775</span><br><span class="hljs-string">2055123854</span><br><span class="hljs-string">472980557</span><br><span class="hljs-string">3243859485</span><br><span class="hljs-string">818987679</span><br><span class="hljs-string">3493509794</span><br><span class="hljs-string">3147151208</span><br><span class="hljs-string">3230082863</span><br><span class="hljs-string">1849634131</span><br><span class="hljs-string">4070799626</span><br><span class="hljs-string">4254456883</span><br><span class="hljs-string">3610260612</span><br><span class="hljs-string">2800938443</span><br><span class="hljs-string">3230892817</span><br><span class="hljs-string">72467472</span><br><span class="hljs-string">4174881967</span><br><span class="hljs-string">1455309059</span><br><span class="hljs-string">23957586</span><br><span class="hljs-string">592215091</span><br><span class="hljs-string">3535987654</span><br><span class="hljs-string">4162982524</span><br><span class="hljs-string">4070092036</span><br><span class="hljs-string">810224056</span><br><span class="hljs-string">3762438174</span><br><span class="hljs-string">1941967791</span><br><span class="hljs-string">1956735504</span><br><span class="hljs-string">2433715699</span><br><span class="hljs-string">2128333110</span><br><span class="hljs-string">2651450563</span><br><span class="hljs-string">2900194117</span><br><span class="hljs-string">2253117406</span><br><span class="hljs-string">3598426017</span><br><span class="hljs-string">2377672371</span><br><span class="hljs-string">1755246801</span><br><span class="hljs-string">314762693</span><br><span class="hljs-string">745778362</span><br><span class="hljs-string">2537298089</span><br><span class="hljs-string">3810849306</span><br><span class="hljs-string">2745684961</span><br><span class="hljs-string">3584546853</span><br><span class="hljs-string">1167809979</span><br><span class="hljs-string">1691175119</span><br><span class="hljs-string">3911648214</span><br><span class="hljs-string">472813388</span><br><span class="hljs-string">3573200122</span><br><span class="hljs-string">3335394763</span><br><span class="hljs-string">1143689701</span><br><span class="hljs-string">1310750824</span><br><span class="hljs-string">3273713261</span><br><span class="hljs-string">2861967032</span><br><span class="hljs-string">3292294686</span><br><span class="hljs-string">3495244137</span><br><span class="hljs-string">32546497</span><br><span class="hljs-string">2514258418</span><br><span class="hljs-string">644062907</span><br><span class="hljs-string">3436100762</span><br><span class="hljs-string">2824906010</span><br><span class="hljs-string">452257527</span><br><span class="hljs-string">3279573375</span><br><span class="hljs-string">2458549481</span><br><span class="hljs-string">2536571745</span><br><span class="hljs-string">246180616</span><br><span class="hljs-string">3607555386</span><br><span class="hljs-string">507624013</span><br><span class="hljs-string">1354552482</span><br><span class="hljs-string">3165402213</span><br><span class="hljs-string">2188059926</span><br><span class="hljs-string">3046902370</span><br><span class="hljs-string">3186516316</span><br><span class="hljs-string">1005872010</span><br><span class="hljs-string">3862615954</span><br><span class="hljs-string">2549635115</span><br><span class="hljs-string">3198068926</span><br><span class="hljs-string">1932522749</span><br><span class="hljs-string">2658613263</span><br><span class="hljs-string">2717159733</span><br><span class="hljs-string">1998688908</span><br><span class="hljs-string">66770584</span><br><span class="hljs-string">2810405316</span><br><span class="hljs-string">3871389330</span><br><span class="hljs-string">1090631798</span><br><span class="hljs-string">902454188</span><br><span class="hljs-string">2016606331</span><br><span class="hljs-string">2323885311</span><br><span class="hljs-string">1420297041</span><br><span class="hljs-string">3728930715</span><br><span class="hljs-string">3441662165</span><br><span class="hljs-string">1553367163</span><br><span class="hljs-string">1750973533</span><br><span class="hljs-string">2544325113</span><br><span class="hljs-string">842323619</span><br><span class="hljs-string">1145275782</span><br><span class="hljs-string">1306711869</span><br><span class="hljs-string">4093964305</span><br><span class="hljs-string">1417666177</span><br><span class="hljs-string">574791083</span><br><span class="hljs-string">2353047834</span><br><span class="hljs-string">1106667006</span><br><span class="hljs-string">2707446091</span><br><span class="hljs-string">358655385</span><br><span class="hljs-string">1839936688</span><br><span class="hljs-string">1161620827</span><br><span class="hljs-string">1613270503</span><br><span class="hljs-string">2650740792</span><br><span class="hljs-string">2524210940</span><br><span class="hljs-string">2373882531</span><br><span class="hljs-string">957022932</span><br><span class="hljs-string">3751813999</span><br><span class="hljs-string">3874001898</span><br><span class="hljs-string">287991675</span><br><span class="hljs-string">3902476446</span><br><span class="hljs-string">3861705660</span><br><span class="hljs-string">1402891764</span><br><span class="hljs-string">3353505689</span><br><span class="hljs-string">3020772361</span><br><span class="hljs-string">2398499998</span><br><span class="hljs-string">2762040925</span><br><span class="hljs-string">1090541608</span><br><span class="hljs-string">2701409894</span><br><span class="hljs-string">2832683852</span><br><span class="hljs-string">233427823</span><br><span class="hljs-string">3599966598</span><br><span class="hljs-string">4115895603</span><br><span class="hljs-string">2620188711</span><br><span class="hljs-string">2311803279</span><br><span class="hljs-string">1055863801</span><br><span class="hljs-string">3805927781</span><br><span class="hljs-string">2428343271</span><br><span class="hljs-string">611342069</span><br><span class="hljs-string">6231335</span><br><span class="hljs-string">304265153</span><br><span class="hljs-string">2593708925</span><br><span class="hljs-string">2380757927</span><br><span class="hljs-string">3315568191</span><br><span class="hljs-string">2851109544</span><br><span class="hljs-string">3069380271</span><br><span class="hljs-string">353352306</span><br><span class="hljs-string">1028897685</span><br><span class="hljs-string">2351996621</span><br><span class="hljs-string">1498454275</span><br><span class="hljs-string">3221794457</span><br><span class="hljs-string">2007982751</span><br><span class="hljs-string">4042987321</span><br><span class="hljs-string">1572793920</span><br><span class="hljs-string">2806215892</span><br><span class="hljs-string">2637773365</span><br><span class="hljs-string">1933882604</span><br><span class="hljs-string">613627475</span><br><span class="hljs-string">2863867524</span><br><span class="hljs-string">2058146427</span><br><span class="hljs-string">308701869</span><br><span class="hljs-string">210314643</span><br><span class="hljs-string">347649511</span><br><span class="hljs-string">110788168</span><br><span class="hljs-string">1040475968</span><br><span class="hljs-string">3696224193</span><br><span class="hljs-string">87343509</span><br><span class="hljs-string">4270944556</span><br><span class="hljs-string">1725161139</span><br><span class="hljs-string">1262423690</span><br><span class="hljs-string">1222429754</span><br><span class="hljs-string">4022037346</span><br><span class="hljs-string">3104199191</span><br><span class="hljs-string">148086782</span><br><span class="hljs-string">4174338629</span><br><span class="hljs-string">2927068467</span><br><span class="hljs-string">3174216196</span><br><span class="hljs-string">2058120239</span><br><span class="hljs-string">2973842243</span><br><span class="hljs-string">1472307010</span><br><span class="hljs-string">3654221498</span><br><span class="hljs-string">916706160</span><br><span class="hljs-string">683084656</span><br><span class="hljs-string">2466389764</span><br><span class="hljs-string">3647383069</span><br><span class="hljs-string">762414998</span><br><span class="hljs-string">1936317343</span><br><span class="hljs-string">1262258329</span><br><span class="hljs-string">3285874257</span><br><span class="hljs-string">654586813</span><br><span class="hljs-string">3446752043</span><br><span class="hljs-string">680787991</span><br><span class="hljs-string">1436279988</span><br><span class="hljs-string">1965579601</span><br><span class="hljs-string">226999456</span><br><span class="hljs-string">1809553783</span><br><span class="hljs-string">4196267862</span><br><span class="hljs-string">1612015581</span><br><span class="hljs-string">2443834153</span><br><span class="hljs-string">2844161804</span><br><span class="hljs-string">1933785366</span><br><span class="hljs-string">1222011827</span><br><span class="hljs-string">3088868876</span><br><span class="hljs-string">3907129148</span><br><span class="hljs-string">1922204261</span><br><span class="hljs-string">130812762</span><br><span class="hljs-string">2951944873</span><br><span class="hljs-string">1191116108</span><br><span class="hljs-string">1429336684</span><br><span class="hljs-string">46097604</span><br><span class="hljs-string">2968366770</span><br><span class="hljs-string">3274267527</span><br><span class="hljs-string">2397124603</span><br><span class="hljs-string">1015603405</span><br><span class="hljs-string">3767951355</span><br><span class="hljs-string">3528549131</span><br><span class="hljs-string">229484595</span><br><span class="hljs-string">1797847468</span><br><span class="hljs-string">28773013</span><br><span class="hljs-string">3191798828</span><br><span class="hljs-string">2056107601</span><br><span class="hljs-string">3033083158</span><br><span class="hljs-string">3731687545</span><br><span class="hljs-string">66036574</span><br><span class="hljs-string">559293609</span><br><span class="hljs-string">3754464420</span><br><span class="hljs-string">3591927528</span><br><span class="hljs-string">1199729886</span><br><span class="hljs-string">2916416911</span><br><span class="hljs-string">2076366139</span><br><span class="hljs-string">2861715275</span><br><span class="hljs-string">543619922</span><br><span class="hljs-string">174558028</span><br><span class="hljs-string">1054439233</span><br><span class="hljs-string">2055206719</span><br><span class="hljs-string">2684152448</span><br><span class="hljs-string">1201960873</span><br><span class="hljs-string">3973995702</span><br><span class="hljs-string">88284321</span><br><span class="hljs-string">2858348308</span><br><span class="hljs-string">3264813661</span><br><span class="hljs-string">604843061</span><br><span class="hljs-string">2971590523</span><br><span class="hljs-string">2547374946</span><br><span class="hljs-string">3233226819</span><br><span class="hljs-string">2575969200</span><br><span class="hljs-string">1434093836</span><br><span class="hljs-string">3006298381</span><br><span class="hljs-string">1478025637</span><br><span class="hljs-string">2359328731</span><br><span class="hljs-string">3400179181</span><br><span class="hljs-string">3802006073</span><br><span class="hljs-string">2585016436</span><br><span class="hljs-string">2691741615</span><br><span class="hljs-string">2819187100</span><br><span class="hljs-string">1162740832</span><br><span class="hljs-string">2315811393</span><br><span class="hljs-string">3253463985</span><br><span class="hljs-string">2267209889</span><br><span class="hljs-string">538240713</span><br><span class="hljs-string">4140421276</span><br><span class="hljs-string">102343813</span><br><span class="hljs-string">603771935</span><br><span class="hljs-string">2239738493</span><br><span class="hljs-string">354434834</span><br><span class="hljs-string">2727051669</span><br><span class="hljs-string">4031266066</span><br><span class="hljs-string">1134094029</span><br><span class="hljs-string">3944646252</span><br><span class="hljs-string">4171273390</span><br><span class="hljs-string">2554104525</span><br><span class="hljs-string">3536938884</span><br><span class="hljs-string">4043026353</span><br><span class="hljs-string">1066101437</span><br><span class="hljs-string">920595909</span><br><span class="hljs-string">3698068676</span><br><span class="hljs-string">2552098334</span><br><span class="hljs-string">3058235330</span><br><span class="hljs-string">333175813</span><br><span class="hljs-string">516219629</span><br><span class="hljs-string">2893972647</span><br><span class="hljs-string">1753585988</span><br><span class="hljs-string">4102335764</span><br><span class="hljs-string">404081860</span><br><span class="hljs-string">1302565168</span><br><span class="hljs-string">1560751628</span><br><span class="hljs-string">1326908270</span><br><span class="hljs-string">1336241767</span><br><span class="hljs-string">1990141412</span><br><span class="hljs-string">2784933936</span><br><span class="hljs-string">4107678731</span><br><span class="hljs-string">561088673</span><br><span class="hljs-string">4290790389</span><br><span class="hljs-string">782055190</span><br><span class="hljs-string">628820167</span><br><span class="hljs-string">1002639224</span><br><span class="hljs-string">512875389</span><br><span class="hljs-string">3515451570</span><br><span class="hljs-string">1638720756</span><br><span class="hljs-string">1096767326</span><br><span class="hljs-string">1100939462</span><br><span class="hljs-string">1723925786</span><br><span class="hljs-string">3114917632</span><br><span class="hljs-string">2187251778</span><br><span class="hljs-string">4054994015</span><br><span class="hljs-string">2976247062</span><br><span class="hljs-string">1704390268</span><br><span class="hljs-string">694973902</span><br><span class="hljs-string">315832619</span><br><span class="hljs-string">850984400</span><br><span class="hljs-string">2131043703</span><br><span class="hljs-string">1241244520</span><br><span class="hljs-string">502167158</span><br><span class="hljs-string">3222028509</span><br><span class="hljs-string">2647433989</span><br><span class="hljs-string">2279050826</span><br><span class="hljs-string">1412251353</span><br><span class="hljs-string">2732461774</span><br><span class="hljs-string">1474408664</span><br><span class="hljs-string">1770603176</span><br><span class="hljs-string">1834957530</span><br><span class="hljs-string">623461887</span><br><span class="hljs-string">2553713093</span><br><span class="hljs-string">3879669503</span><br><span class="hljs-string">4293126158</span><br><span class="hljs-string">659580267</span><br><span class="hljs-string">3895659763</span><br><span class="hljs-string">1525418667</span><br><span class="hljs-string">4120666508</span><br><span class="hljs-string">2905137942</span><br><span class="hljs-string">592990536</span><br><span class="hljs-string">723856024</span><br><span class="hljs-string">2966407773</span><br><span class="hljs-string">2277107143</span><br><span class="hljs-string">3753420260</span><br><span class="hljs-string">678568086</span><br><span class="hljs-string">255658731</span><br><span class="hljs-string">993488200</span><br><span class="hljs-string">3042631443</span><br><span class="hljs-string">2647394306</span><br><span class="hljs-string">1136382294</span><br><span class="hljs-string">2445098219</span><br><span class="hljs-string">1191563818</span><br><span class="hljs-string">3360445919</span><br><span class="hljs-string">2964756553</span><br><span class="hljs-string">2715488804</span><br><span class="hljs-string">548149673</span><br><span class="hljs-string">3357409579</span><br><span class="hljs-string">802677002</span><br><span class="hljs-string">3094329008</span><br><span class="hljs-string">3105047412</span><br><span class="hljs-string">2103895343</span><br><span class="hljs-string">3990247790</span><br><span class="hljs-string">2038617798</span><br><span class="hljs-string">639331452</span><br><span class="hljs-string">2478692397</span><br><span class="hljs-string">1616037208</span><br><span class="hljs-string">1299609422</span><br><span class="hljs-string">1772984623</span><br><span class="hljs-string">3441943692</span><br><span class="hljs-string">912246885</span><br><span class="hljs-string">729136629</span><br><span class="hljs-string">78685016</span><br><span class="hljs-string">3645521504</span><br><span class="hljs-string">1881795825</span><br><span class="hljs-string">1830185639</span><br><span class="hljs-string">1212553438</span><br><span class="hljs-string">187419169</span><br><span class="hljs-string">2967461645</span><br><span class="hljs-string">3667323470</span><br><span class="hljs-string">3620491487</span><br><span class="hljs-string">3144670189</span><br><span class="hljs-string">1545252964</span><br><span class="hljs-string">3536569731</span><br><span class="hljs-string">1436472507</span><br><span class="hljs-string">1312059481</span><br><span class="hljs-string">3406579025</span><br><span class="hljs-string">335742360</span><br><span class="hljs-string">3140938874</span><br><span class="hljs-string">3943065710</span><br><span class="hljs-string">3100419847</span><br><span class="hljs-string">2226256675</span><br><span class="hljs-string">2133816185</span><br><span class="hljs-string">285022041</span><br><span class="hljs-string">3062939737</span><br><span class="hljs-string">2243983320</span><br><span class="hljs-string">3674422443</span><br><span class="hljs-string">488886471</span><br><span class="hljs-string">384455202</span><br><span class="hljs-string">588717374</span><br><span class="hljs-string">1004112431</span><br><span class="hljs-string">2114549471</span><br><span class="hljs-string">1752470957</span><br><span class="hljs-string">213929107</span><br><span class="hljs-string">2488115405</span><br><span class="hljs-string">386383400</span><br><span class="hljs-string">2892231850</span><br><span class="hljs-string">1636582849</span><br><span class="hljs-string">1331374847</span><br><span class="hljs-string">2980589506</span><br><span class="hljs-string">3490463738</span><br><span class="hljs-string">1861583038</span><br><span class="hljs-string">3439642124</span><br><span class="hljs-string">1616450563</span><br><span class="hljs-string">2987135549</span><br><span class="hljs-string">548645059</span><br><span class="hljs-string">1722600306</span><br><span class="hljs-string">561279482</span><br><span class="hljs-string">3373982470</span><br><span class="hljs-string">345009528</span><br><span class="hljs-string">427524242</span><br><span class="hljs-string">1144567261</span><br><span class="hljs-string">3233717659</span><br><span class="hljs-string">1291391621</span><br><span class="hljs-string">2555662077</span><br><span class="hljs-string">1685904781</span><br><span class="hljs-string">1678290553</span><br><span class="hljs-string">3040925168</span><br><span class="hljs-string">1002977933</span><br><span class="hljs-string">4057601629</span><br><span class="hljs-string">965764011</span><br><span class="hljs-string">1300144846</span><br><span class="hljs-string">794819215</span><br><span class="hljs-string">1799389971</span><br><span class="hljs-string">770067550</span><br><span class="hljs-string">1581789470</span><br><span class="hljs-string">1167944572</span><br><span class="hljs-string">34943058</span><br><span class="hljs-string">2474343360</span><br><span class="hljs-string">3344595599</span><br><span class="hljs-string">3228458409</span><br><span class="hljs-string">1376834693</span><br><span class="hljs-string">1673958400</span><br><span class="hljs-string">693020432</span><br><span class="hljs-string">4083503372</span><br><span class="hljs-string">215860701</span><br><span class="hljs-string">3221808538</span><br><span class="hljs-string">32059678</span><br><span class="hljs-string">3950076919</span><br><span class="hljs-string">2502230458</span><br><span class="hljs-string">1307492624</span><br><span class="hljs-string">1728279672</span><br><span class="hljs-string">3342792533</span><br><span class="hljs-string">1046256777</span><br><span class="hljs-string">1342647877</span><br><span class="hljs-string">3922405602</span><br><span class="hljs-string">3692057445</span><br><span class="hljs-string">582075612</span><br><span class="hljs-string">1775928150</span><br><span class="hljs-string">1500000421</span><br><span class="hljs-string">1001972832</span><br><span class="hljs-string">2604268746</span><br><span class="hljs-string">1307999135</span><br><span class="hljs-string">2487459642</span><br><span class="hljs-string">1323790879</span><br><span class="hljs-string">490810464</span><br><span class="hljs-string">1608751562</span><br><span class="hljs-string">3843192041</span><br><span class="hljs-string">147180338</span><br><span class="hljs-string">3857201426</span><br><span class="hljs-string">2043324494</span><br><span class="hljs-string">280312795</span><br><span class="hljs-string">1080156369&#x27;&#x27;&#x27;</span>.split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>           ))<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">data</span>):<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(data) % <span class="hljs-number">16</span> !=<span class="hljs-number">0</span>:<br>data+=<span class="hljs-string">b&#x27;\x00&#x27;</span><br><span class="hljs-keyword">return</span> data<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">key, enc_data</span>):    <br>    mode = AES.MODE_ECB<br>    aes = AES.new(pad(key), mode)<br>    <span class="hljs-keyword">return</span> aes.decrypt(enc_data)<br><br>rc=RandCrack()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    <br>    rc.submit(i)<br><span class="hljs-built_in">print</span>(rc.predict_getrandbits(<span class="hljs-number">32</span>))    <br><span class="hljs-comment"># print(type(rc.predict_getrandbits(32))) </span><br><br>key=<span class="hljs-string">&quot;3597202257&quot;</span><br><br><span class="hljs-built_in">print</span>(key)<br>key=key.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>encode_data=<span class="hljs-string">&#x27;T0trtp358+Z3nNHopY+g3+zuykR+cXvlbebg8INr97JSlE7ZGEbeVSNEoHLmRj59&#x27;</span><br><br>encode_data = b64decode(encode_data)<br><br><br>decoded_bytes = decode(key, encode_data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解密的原始字节：<span class="hljs-subst">&#123;decoded_bytes&#125;</span>&quot;</span>)  <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(decoded_bytes))<br><br></code></pre></td></tr></table></figure><p>ReDs卷土重来</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> randcrack <span class="hljs-keyword">import</span> RandCrack<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">data</span>):<br>data=data.encode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(data) % <span class="hljs-number">16</span> !=<span class="hljs-number">0</span>:<br>data+=<span class="hljs-string">b&#x27;\x00&#x27;</span><br><span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">key, text</span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>aes = AES.new(pad(key),AES.MODE_ECB)<br><span class="hljs-keyword">return</span> aes.decrypt(text)<br><br><br>encode_data = <span class="hljs-string">&#x27;oXuE0fPdOJGoMwkc+mqd0hDP9MPze2zeHC4l+2kc/4gxMZv7Az2mo8ZuqLaECFBt&#x27;</span><br>data = b64decode(encode_data)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>rc = RandCrack()<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;G:\QQ\data.txt&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>rc.submit(<span class="hljs-built_in">int</span>(file.readline()))<br><br>raw_key = rc.predict_getrandbits(<span class="hljs-number">1024</span>)<br>key = md5(<span class="hljs-built_in">str</span>(raw_key).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br><span class="hljs-built_in">print</span>(decode(<span class="hljs-built_in">str</span>(key), data))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>密码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>密码</tag>
      
      <tag>校赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024BaseCTF</title>
    <link href="/2024/10/10/BaseCTF2024%E6%96%B0%E7%94%9F%E8%B5%9B%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%88%E6%8A%84%E6%9D%A5%E7%9A%84/"/>
    <url>/2024/10/10/BaseCTF2024%E6%96%B0%E7%94%9F%E8%B5%9B%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%88%E6%8A%84%E6%9D%A5%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<h1 id="BaseCTF2024新生赛（复现（抄来的"><a href="#BaseCTF2024新生赛（复现（抄来的" class="headerlink" title="BaseCTF2024新生赛（复现（抄来的"></a>BaseCTF2024新生赛（<a href="https://gz.imxbt.cn/games/13/challenges">复现</a>（抄来的</h1><p>前面的没做，今个开始做吧&#x2F;&#x2F;2024&#x2F;10&#x2F;9</p><h2 id="1-十七倍"><a href="#1-十七倍" class="headerlink" title="1.十七倍"></a>1.十七倍</h2><p>原题：  &#x2F;&#x2F;题目给的东西不少</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> flag[] = <span class="hljs-string">&quot;BaseCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;&quot;</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 由 (unsigned) char 决定，每个元素在内存中占 1 字节，即 8 位（8 个 0 或 1）</span><br><span class="hljs-comment">     * 在内存中，“字符”保存的是其在“字母表”中是第几个字符</span><br><span class="hljs-comment">     * 例如：</span><br><span class="hljs-comment">     * B 即  66 在内存中存的是 01000010</span><br><span class="hljs-comment">     * a 即  97 在内存中存的是 01100001</span><br><span class="hljs-comment">     * s 即 115 在内存中存的是 01110011</span><br><span class="hljs-comment">     * e 即 101 在内存中存的是 01100101</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>        flag[i] = flag[i] * <span class="hljs-number">17</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flag[<span class="hljs-number">0</span>] != <span class="hljs-number">98</span>) &#123;  <span class="hljs-comment">/* 下标是从 0 开始的 */</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CPU Error???\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 66 * 17 = 1122</span><br><span class="hljs-comment">     * 如果在内存中保存 1122，会是 00000100 01100010</span><br><span class="hljs-comment">     * 但是 unsigned char 决定了只能存 8 位，CPU 硬件会自动取低 8 位，即 01100010</span><br><span class="hljs-comment">     * 01100010 即 98，所以 66 * 17 = 98</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 注意到 8 个 0 或 1 有 256 种可能，即 0~255</span><br><span class="hljs-comment">     * 且取低 8 位即取模（取余数）256</span><br><span class="hljs-comment">     * 你可以验证：1122 除以 256 商为 4 余数为 98</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> cipher[] = &#123;<br>         <span class="hljs-number">98</span>, <span class="hljs-number">113</span>, <span class="hljs-number">163</span>, <span class="hljs-number">181</span>, <span class="hljs-number">115</span>, <span class="hljs-number">148</span>, <span class="hljs-number">166</span>,  <span class="hljs-number">43</span>,   <span class="hljs-number">9</span>,  <span class="hljs-number">95</span>,<br>        <span class="hljs-number">165</span>, <span class="hljs-number">146</span>,  <span class="hljs-number">79</span>, <span class="hljs-number">115</span>, <span class="hljs-number">146</span>, <span class="hljs-number">233</span>, <span class="hljs-number">112</span>, <span class="hljs-number">180</span>,  <span class="hljs-number">48</span>,  <span class="hljs-number">79</span>,<br>         <span class="hljs-number">65</span>, <span class="hljs-number">181</span>, <span class="hljs-number">113</span>, <span class="hljs-number">146</span>,  <span class="hljs-number">46</span>, <span class="hljs-number">249</span>,  <span class="hljs-number">78</span>, <span class="hljs-number">183</span>,  <span class="hljs-number">79</span>, <span class="hljs-number">133</span>,<br>        <span class="hljs-number">180</span>, <span class="hljs-number">113</span>, <span class="hljs-number">146</span>, <span class="hljs-number">148</span>, <span class="hljs-number">163</span>,  <span class="hljs-number">79</span>,  <span class="hljs-number">78</span>,  <span class="hljs-number">48</span>, <span class="hljs-number">231</span>,  <span class="hljs-number">77</span><br>    &#125;;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (flag[i] != cipher[i]) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;flag[%d] is wrong, expect %d, got %d.\n&quot;</span>, i, cipher[i], flag[i]);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 如果 flag 是正确的，运算后会得到上面的数据。</span><br><span class="hljs-comment">     * 如果是实数域运算，flag[i] * 17 = cipher[i]，那么 flag[i] = cipher[i] / 17</span><br><span class="hljs-comment">     * 模了 256 后又是怎么样呢？学一下“模运算乘法逆元”吧。</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们可以直接采用遍历求解：（<strong>因为原题中说的：第二大段注释中举了个例子说明98的由来</strong>，所以采用这种方法遍历（暴力求解就好了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">40</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">32</span>;j&lt;<span class="hljs-number">128</span>;j++)&#123;<br>            <span class="hljs-keyword">if</span>(j*<span class="hljs-number">17</span>%<span class="hljs-number">256</span>==cipher[i])&#123;<br>                cipher[i]=j;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>看看他们的wp，额，二进制不看，不会，看看乘法逆元：</p><p>乘法逆元我也不太会（悲，明个或今晚上学吧：</p><p>先写写：</p><p>根据题目我们可以知道：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">y=(x*<span class="hljs-number">17</span>)%<span class="hljs-number">256</span><span class="hljs-comment">//y是cipher的数</span><br></code></pre></td></tr></table></figure><p>根据乘法逆元公式：<strong>ax≡1 (mod p)</strong>，也可表示为<strong>ax≡1(mod f)</strong>。这个等式用中文描述就是a乘一个数x并模p等于1</p><p>反正就是（为什么不能语音（怒：上述y&#x3D;(x*17)%256&#x2F;&#x2F;y是cipher的数可以化为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c">y=(x*<span class="hljs-number">17</span>)%<span class="hljs-number">256</span><span class="hljs-comment">//y是cipher的数</span><br>根据乘法逆元可以求得（这个应该是类似公式之类的，等我一会看看）：<br>x=(y*<span class="hljs-number">241</span>)%<span class="hljs-number">256</span><br>    <br><span class="hljs-number">241</span>是怎么算出来的呢？可以通过扩展欧几里得原理求得。在 Python 中直接<span class="hljs-built_in">pow</span>(<span class="hljs-number">17</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">256</span>)就可以得出结果。(就是：<span class="hljs-number">241</span>*<span class="hljs-number">17</span>%<span class="hljs-number">256</span>=<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">//这是代码</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> main() &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> flag[] = &#123;<br>         <span class="hljs-number">98</span>, <span class="hljs-number">113</span>, <span class="hljs-number">163</span>, <span class="hljs-number">181</span>, <span class="hljs-number">115</span>, <span class="hljs-number">148</span>, <span class="hljs-number">166</span>,  <span class="hljs-number">43</span>,   <span class="hljs-number">9</span>,  <span class="hljs-number">95</span>,<br>        <span class="hljs-number">165</span>, <span class="hljs-number">146</span>,  <span class="hljs-number">79</span>, <span class="hljs-number">115</span>, <span class="hljs-number">146</span>, <span class="hljs-number">233</span>, <span class="hljs-number">112</span>, <span class="hljs-number">180</span>,  <span class="hljs-number">48</span>,  <span class="hljs-number">79</span>,<br>         <span class="hljs-number">65</span>, <span class="hljs-number">181</span>, <span class="hljs-number">113</span>, <span class="hljs-number">146</span>,  <span class="hljs-number">46</span>, <span class="hljs-number">249</span>,  <span class="hljs-number">78</span>, <span class="hljs-number">183</span>,  <span class="hljs-number">79</span>, <span class="hljs-number">133</span>,<br>        <span class="hljs-number">180</span>, <span class="hljs-number">113</span>, <span class="hljs-number">146</span>, <span class="hljs-number">148</span>, <span class="hljs-number">163</span>,  <span class="hljs-number">79</span>,  <span class="hljs-number">78</span>,  <span class="hljs-number">48</span>, <span class="hljs-number">231</span>,  <span class="hljs-number">77</span>,   <span class="hljs-number">0</span><br>    &#125;;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>        flag[i] = flag[i] * <span class="hljs-number">241</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, flag);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// BaseCTF&#123;yoUr_CrYpt0_1earNinG_5tarTs_n0w&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="2-ez-math"><a href="#2-ez-math" class="headerlink" title="2.ez_math"></a>2.ez_math</h2><p>数学会陪伴我一辈子吗？被迫复习了一点线代：</p><p><strong>对角线为一的上三角和下三角行列式相乘是一</strong></p><p>原题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c">import numpy as np<br>from Crypto.Util.number import *<br><br>a, b, c, d = [getPrime(<span class="hljs-number">128</span>) <span class="hljs-keyword">for</span> _ in range(<span class="hljs-number">4</span>)]<br>point1 = a * d<br>point2 = b * c<br>matrix2 = [[<span class="hljs-number">0</span>, a, b], [<span class="hljs-number">0</span>, c, d]]<br><br>flag = b<span class="hljs-string">&quot;flag&#123;test_flag&#125;&quot;</span><br>flag = bytes_to_long(flag)<br><br><br>def randomArray():<br>    upper = [[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]<br>    low = [[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]<br>    <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">3</span>):<br>        <span class="hljs-keyword">for</span> j in range(i+<span class="hljs-number">1</span>, <span class="hljs-number">3</span>):<br>            upper[i][j] = getPrime(<span class="hljs-number">128</span>)<br>            low[j][i] = getPrime(<span class="hljs-number">128</span>)<br>    result = np.<span class="hljs-built_in">array</span>(upper) @ np.<span class="hljs-built_in">array</span>(low)<br>    <span class="hljs-keyword">return</span> result<br><br>A = np.<span class="hljs-built_in">array</span>([[flag, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]] + matrix2)<br>B = randomArray()<br>MAT = A @ B<br><br>print(point1)<br>print(point2)<br>print(MAT)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-number">85763755029292607594055805804755756282473763031524911851356658672180185707477</span><br><span class="hljs-number">70470862191594893036733540494554536608294230603070251013536189798304544579643</span><br>[[<span class="hljs-number">73595299897883318809385485549070133693240974831930302408429664709375267345973630251242462442287906226820558620868020093702204534513147710406187365838820773200509683489479230005270823245</span><br>  <span class="hljs-number">46106113894293637419638880781044700751458754728940339402825975283562443072980134956975133603010158365617690455079648357103963721564427583836974868790823082218575195867647267322046726830</span><br>  <span class="hljs-number">161159443444728507357705839523372181165265338895748546250868368998015829266587881868060439602487400399254839839711192069105943123376622497847079185</span>]<br> [<span class="hljs-number">13874395612510317401724273626815493897470313869776776437748145979913315379889260408106588331541371806148807844847909</span><br>  <span class="hljs-number">17025249852164087827929313934411832021160463738288565876371918871371314930048841650464137478757581505369909723030523</span><br>  <span class="hljs-number">59510107422473463833740668736202898422777415868238817665123293560097821015330</span>]<br> [<span class="hljs-number">11314088133820151155755028207579196628679021106024798818326096960197933616112389017957501267749946871903275867785729</span><br>  <span class="hljs-number">13883500421020573457778249958402264688539607625195400103961001780695107955462968883861677871644577542226749179056659</span><br>  <span class="hljs-number">48528427402189936709203219516777784993195743269405968907408051071264464132448</span>]]<br><br>‘’‘<br></code></pre></td></tr></table></figure><p>这个，怎么说呢，就是线代啊，虽说忘完了（思考</p><p>&#x3D;&#x3D;<strong>ok啊时隔三天在min_math2中又遇到了，发现mid_math2也不会，但在阿褚的鼎力协助下会了一点：</strong>&#x3D;&#x3D;</p><p><img src="/2024/10/10/BaseCTF2024%E6%96%B0%E7%94%9F%E8%B5%9B%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%88%E6%8A%84%E6%9D%A5%E7%9A%84/3281c719ed44d75237456124b56858ef-1729763611735-2.png" alt="3281c719ed44d75237456124b56858ef"></p><p>先分析代码（这个好像叫代码审计来着？（思考，好吧，好像不是。</p><p>代码审计（Code audit）是指以发现程序错误、安全漏洞和违反程序规范为目标的源代码分析。它是软件开发生命周期中的一个重要环节，旨在通过检查源代码来识别潜在的安全隐患、编码不规范之处以及可能引发的安全漏洞。</p><p><del>分析代码：randomArray():这个方法返回的result为单位矩阵：1（E，至于为什么，证明没看懂，正在看ing</del></p><p>返回的不是1但是，因为这个：我们的目的是求出flag，则用行列式求</p><p><img src="/2024/10/10/BaseCTF2024%E6%96%B0%E7%94%9F%E8%B5%9B%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%88%E6%8A%84%E6%9D%A5%E7%9A%84/QQ/3363009478/nt_qq/nt_data/Pic/2024-10/Ori/3281c719ed44d75237456124b56858ef.png" alt="3281c719ed44d75237456124b56858ef"></p><p>&#x3D;&#x3D;呃呃呃呃，这个是行列式，我傻逼了，别骂我&#x3D;&#x3D;</p><p>&#x3D;&#x3D;行列式和矩阵的相乘的，额，运算规则是不一样的！！！忘完了，真得学吧，学了之后我不会也要加入408大军了吧&#x3D;&#x3D;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">A=flag*(a*d-b*c)<br>那么就容易知道：$$flag = |flag| = \frac&#123;|MAT|&#125;&#123;|A_&#123;abcd&#125;|&#125;$$<br>EXP<br></code></pre></td></tr></table></figure><p>$$<br>flag &#x3D; |flag| &#x3D; \frac{|MAT|}{|A_{abcd}|}<br>$$</p><p>代码(因为太晚了（其实不晚，但乏了），并且sage.all没装，明个再安装吧，这直接搬了现成的wp的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>point1 = <span class="hljs-number">85763755029292607594055805804755756282473763031524911851356658672180185707477</span><br>point2 = <span class="hljs-number">70470862191594893036733540494554536608294230603070251013536189798304544579643</span><br>MAT = [[<span class="hljs-number">73595299897883318809385485549070133693240974831930302408429664709375267345973630251242462442287906226820558620868020093702204534513147710406187365838820773200509683489479230005270823245</span>,<br>  <span class="hljs-number">46106113894293637419638880781044700751458754728940339402825975283562443072980134956975133603010158365617690455079648357103963721564427583836974868790823082218575195867647267322046726830</span>,<br>  <span class="hljs-number">161159443444728507357705839523372181165265338895748546250868368998015829266587881868060439602487400399254839839711192069105943123376622497847079185</span>],<br> [<span class="hljs-number">13874395612510317401724273626815493897470313869776776437748145979913315379889260408106588331541371806148807844847909</span>,<br>  <span class="hljs-number">17025249852164087827929313934411832021160463738288565876371918871371314930048841650464137478757581505369909723030523</span>,<br>  <span class="hljs-number">59510107422473463833740668736202898422777415868238817665123293560097821015330</span>],<br> [<span class="hljs-number">11314088133820151155755028207579196628679021106024798818326096960197933616112389017957501267749946871903275867785729</span>,<br>  <span class="hljs-number">13883500421020573457778249958402264688539607625195400103961001780695107955462968883861677871644577542226749179056659</span>,<br>  <span class="hljs-number">48528427402189936709203219516777784993195743269405968907408051071264464132448</span>]]<br><br><br><span class="hljs-built_in">print</span>(long_to_bytes(det(matrix(MAT)) // (point1 - point2)))<br><br><span class="hljs-comment"># b&quot;BaseCTF&#123;7E9328AF-784C-8AF5-AC10-D6A8FC0977A8&#125;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3-mid-math"><a href="#3-mid-math" class="headerlink" title="3.mid_math"></a>3.mid_math</h2><p>ok啊，sage没装好（悲，谁要是装好了请教教我（求。</p><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>a, b, c, d = [getPrime(<span class="hljs-number">128</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>point1 = a * d<br>point2 = b * c<br>matrix2 = [[<span class="hljs-number">0</span>, a, b], [<span class="hljs-number">0</span>, c, d]]<br><br>flag = <span class="hljs-string">b&quot;flag&#123;test_flag&#125;&quot;</span><br>flag = bytes_to_long(flag)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">randomArray</span>():<br>    upper = [[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]<br>    low = [[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, <span class="hljs-number">3</span>):<br>            upper[i][j] = getPrime(<span class="hljs-number">128</span>)<br>            low[j][i] = getPrime(<span class="hljs-number">128</span>)<br>    result = np.array(upper) @ np.array(low)<br>    <span class="hljs-keyword">return</span> result<br><br>A = np.array([[flag, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]] + matrix2)<br>B = randomArray()<br>C = randomArray()<br>MAT = C @ A @ B<br><br><br><span class="hljs-built_in">print</span>(point1)<br><span class="hljs-built_in">print</span>(point2)<br><span class="hljs-built_in">print</span>(MAT)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">65540596822333029826884315503808996273733737079814345540607878287618419734231</span><br><span class="hljs-string">45151244176940366132774311848077675849486332018843894072137609985463616792271</span><br><span class="hljs-string">[[9259505595451159514948336330303511539525155092949382077995385373332083424570340733825203563332256599256361679775371565817159463557158551820090084800254999338417057682355404780422980119717238594927467956675771042145306399815569005775907169857728757334979422594358</span><br><span class="hljs-string">  3700462282298785820527479428312072678870010244861115107206951164684911761755437333209293039456840068340334559453608012512177623936248784897843503284633804083281388001236742261832974291349480314135560368365574114042082002559069958228523318326290833422846224288247</span><br><span class="hljs-string">  20791012146351643571145217310876690226642338279942557085580439219377325884045305279931904540467264182713135410067252835618936836675270813727053937054168296298149405902638242278868020381541490973458957704137657413376043351193]</span><br><span class="hljs-string"> [3802535350808074374431476757195874789213113083310705049856269457737583463559458126494122484246497049005001474007088865512110432486291568737501434666990689483191924384489484665070592656641925905986397402822195880143437724155134584374613878027218950975919679551229</span><br><span class="hljs-string">  1519642544380087919293814751485424198320747098741960781639133554268321708273309194651985562222274023623071346914239982055028526526058064787882720065775210796950963778381575914964024929110539407721461321785325399699126116201001806816030960662346173275101476487421</span><br><span class="hljs-string">  8538097185709421082644083672229287227818939415260987123718318427750267353075860559170390896769087600458156859498331152566368881938040799840806164389020986990994328370205184734637870147251004626759120887684269603636183629300]</span><br><span class="hljs-string"> [17987668490992083132878642797176089621188858356259455169173987325310681186627844776077058221612169421636403546746899152917309634315569997105261046388995579843528014810244648968375990949478033964619008761814039733347955609163</span><br><span class="hljs-string">  7188579142941521685422767412932555782658469950638690886255638896617687421517941457682493542615460990114218059246938237257830976937359020731335958068934235967457123039874441635435388736524907036941379695243043923900290273902</span><br><span class="hljs-string">  40388963560266769813551191613694768219344365780650048155838802242681775019274045964917142477325170274191702615504062392461666558731638338001971723737440974198823443420018559746335727687]]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br></code></pre></td></tr></table></figure><p>这个题和ez_math几乎一样，所以我直接放东西了（ai写的，因为不会用一些方法，直接让ai帮我写了，<strong>和ez_math不一样，看看吧</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np  <br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> Matrix  <br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes  <br><br><span class="hljs-comment"># 定义两个点  </span><br>point1 = <span class="hljs-number">65540596822333029826884315503808996273733737079814345540607878287618419734231</span>  <br>point2 = <span class="hljs-number">45151244176940366132774311848077675849486332018843894072137609985463616792271</span>  <br><br><span class="hljs-comment"># 定义矩阵，使用 sympy 的 Matrix  </span><br>MAT = Matrix([  <br>    [  <br>        <span class="hljs-number">9259505595451159514948336330303511539525155092949382077995385373332083424570340733825203563332256599256361679775371565817159463557158551820090084800254999338417057682355404780422980119717238594927467956675771042145306399815569005775907169857728757334979422594358</span>,  <br>        <span class="hljs-number">3700462282298785820527479428312072678870010244861115107206951164684911761755437333209293039456840068340334559453608012512177623936248784897843503284633804083281388001236742261832974291349480314135560368365574114042082002559069958228523318326290833422846224288247</span>,  <br>        <span class="hljs-number">20791012146351643571145217310876690226642338279942557085580439219377325884045305279931904540467264182713135410067252835618936836675270813727053937054168296298149405902638242278868020381541490973458957704137657413376043351193</span>  <br>    ],  <br>    [  <br>        <span class="hljs-number">3802535350808074374431476757195874789213113083310705049856269457737583463559458126494122484246497049005001474007088865512110432486291568737501434666990689483191924384489484665070592656641925905986397402822195880143437724155134584374613878027218950975919679551229</span>,  <br>        <span class="hljs-number">1519642544380087919293814751485424198320747098741960781639133554268321708273309194651985562222274023623071346914239982055028526526058064787882720065775210796950963778381575914964024929110539407721461321785325399699126116201001806816030960662346173275101476487421</span>,  <br>        <span class="hljs-number">8538097185709421082644083672229287227818939415260987123718318427750267353075860559170390896769087600458156859498331152566368881938040799840806164389020986990994328370205184734637870147251004626759120887684269603636183629300</span>  <br>    ],  <br>    [  <br>        <span class="hljs-number">17987668490992083132878642797176089621188858356259455169173987325310681186627844776077058221612169421636403546746899152917309634315569997105261046388995579843528014810244648968375990949478033964619008761814039733347955609163</span>,  <br>        <span class="hljs-number">7188579142941521685422767412932555782658469950638690886255638896617687421517941457682493542615460990114218059246938237257830976937359020731335958068934235967457123039874441635435388736524907036941379695243043923900290273902</span>,  <br>        <span class="hljs-number">40388963560266769813551191613694768219344365780650048155838802242681775019274045964917142477325170274191702615504062392461666558731638338001971723737440974198823443420018559746335727687</span>  <br>    ]  <br>])  <br><br><span class="hljs-comment"># 计算行列式  </span><br>det_value = MAT.det()  <br><br><span class="hljs-comment"># 确保 det_value 是整数  </span><br>det_value = <span class="hljs-built_in">int</span>(det_value)  <br><br><span class="hljs-comment"># 计算并转化为字节  </span><br>result = long_to_bytes(det_value // (point1 - point2))  <br><br><span class="hljs-comment"># 输出结果  </span><br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-string">b&#x27;BaseCTF&#123;E439646E-1768-18B3-DC4B-483C40C5340C&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="4-two-squares"><a href="#4-two-squares" class="headerlink" title="4.two_squares"></a>4.two_squares</h2><p>这是原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>flag=<span class="hljs-string">b&#x27;BaseCTF&#123;&#125;&#x27;</span><br>m=bytes_to_long(flag)<br>p=getPrime(<span class="hljs-number">128</span>)<br>q=getPrime(<span class="hljs-number">128</span>)<br>n=p*q<br>e=<span class="hljs-number">65537</span><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br>x=p^<span class="hljs-number">2</span>+q^<span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x =&quot;</span>,x)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 42330675787206041757903427737108553993012805007294570657461042152628982126538</span><br><span class="hljs-string">x = 209479773119142584969854470862023704936857416491817498021871883305658177375498</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>这个，额，就用<strong>sage.math</strong>提供的**two_squares(x)**方法简单点</p><p>（但是我勾八baishi好几个小时了都没弄好，最后向在线妥协了：</p><p>![](屏幕截图 2024-10-11 193356-1730478193189-1-1730478203311-3-1730478205411-5.png)</p><p>然后就直接这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> sqrt<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> Integer<br><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">42330675787206041757903427737108553993012805007294570657461042152628982126538</span><br>x = <span class="hljs-number">209479773119142584969854470862023704936857416491817498021871883305658177375498</span><br><span class="hljs-comment"># p,q=two_squares(x)</span><br><span class="hljs-comment"># p,q=int(p),int(q)</span><br><span class="hljs-comment"># n=p*q</span><br>phin=<span class="hljs-number">104509747531476793887796474699931064796411012732701008885442574088855832757992</span><br>n=<span class="hljs-number">104509747531476793887796474699931064797057927926665485324022084015195490274051</span><br>d=gmpy2.invert(e,phin)<br>a=long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c,d,n)))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-comment"># b&#x27;BaseCTF&#123;0760becd-cefaab0b094d&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="5-铜匠-（coppersmith"><a href="#5-铜匠-（coppersmith" class="headerlink" title="5.铜匠 （coppersmith"></a>5.铜匠 （coppersmith</h2><p>好了，这个题完全涉及我的未知区域了，看了几小时的文章才看懂（主要是因为找以及有的东西没见过和以前的忘了</p><p><strong>RSA高位攻击（coppersmith定理：：直接说结论吧：P_unknown_bits&#x2F;P_bits&lt;&#x3D;0.44就可以对p或q补全（前提是知道n，简单地说就是：以一个数的二进制（01）形式转换后：在最多有454（1024*0.44）位未知就可以用sage运用其中一些方法求出你想要的东西。&#x3D;&#x3D;byd又是sage，我还没弄好，结论大概就是这样，应该是对的（思考&#x3D;&#x3D;好了，你以为这就完了？理论上来说这就好了，但是解题时你会遇到各种各样的问题，比如这一题，wctm，他未知位超过了454，那就用爆破吧（暴力求解</strong></p><p>我只能说数学看懂了，原理不知道，代码不会（因为byd要用sage</p><p>这个不错：<strong>&#x3D;&#x3D;RSA_高位攻击学习记录&#x3D;&#x3D;</strong>，可以看看</p><p>呃呃呃，公式块不会写（悲，C，不想学公式块咋写了，直接手搓吧：应该能看懂吧（思考，看不懂就搜吧，基本和那个链接一样反正。<strong>&#x3D;&#x3D;另外，不管是谁，sage你要是会的话请教教我，我装都装不好，只能online&#x3D;&#x3D;</strong></p><p><img src="/2024/10/10/BaseCTF2024%E6%96%B0%E7%94%9F%E8%B5%9B%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%88%E6%8A%84%E6%9D%A5%E7%9A%84/864640c81027cc176127f0e4ca597d9d_720.jpg" alt="864640c81027cc176127f0e4ca597d9d_720"></p><p><img src="/2024/10/10/BaseCTF2024%E6%96%B0%E7%94%9F%E8%B5%9B%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%88%E6%8A%84%E6%9D%A5%E7%9A%84/d393d331f13b098870a1e572a29a737a_720.jpg" alt="d393d331f13b098870a1e572a29a737a_720"></p><p><strong>OK啊，本世纪最大的小丑诞生了，没错就是我，这一题官方wp没用爆破，直接求就好了，其实也好，除了没用爆破，其他的都一样，看看官方代码：</strong></p><p><strong>他是455直接求解了，可能455也能？不晓得啊，应该是，好像就是能，但实际不行？搜的，不晓得</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>p_high = <span class="hljs-number">14439249591349619691972392177790365247490839237199085979433418493254022567815148979672690178</span><br>q_low = <span class="hljs-number">90063199151369157959005663017593053931871580139169245885113098598755909124764417</span><br>n = <span class="hljs-number">18347545778876678838092757800261556931131930866012101566000425608407193858675622059415995283684230959320874387944052648148677918542763633503231962873204645415818139345588988936580526094727943067102768943117592654029397879665312089518191052154267343886226820785206334238961064175118262578895847281575656290248049404047727756356910896332939145136942219317065063060070725033146788186604738271846183709127655298440696824683099637827282095133642324657860714680107691622056420045091586609974536644773286992447027164350612852922016376888380895187804771279035652496676089183636450028327097084911908336202253562671798012457461</span><br>enc = <span class="hljs-number">15659576879410368237140555530527974801613150473447768911067611094143466009251385693099110691602954207905029692682380253595062935017486879899242785756448973466690818942065250284891341066578689696180061755610538867770441139827574063212967027249650509215685566103350688284041405586915563454117672061141919712416360596137520514412607512596079964611672166435592936417138352662031529414118312166411150736015788925026636845744110093161894267707446937939130745326244186579516665160036229715964182962542836836457885170975474737620430886449029488829662146456489724775166105816909257516908496172172266375617868819982791477888289</span><br>e = <span class="hljs-number">65537</span><br>mod = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">266</span>)<br>inverse_q_low = q_low.inverse_mod(mod) <br>p0 = n * inverse_q_low % mod          <br>PR.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = p_high * (<span class="hljs-number">2</span>**<span class="hljs-number">721</span>) + p0 + x * <span class="hljs-number">2</span>**<span class="hljs-number">266</span><br>f = f.monic()<br>out_p = f.small_roots(<span class="hljs-number">2</span>**<span class="hljs-number">455</span>,<span class="hljs-number">0.4</span>)<br>p = p_high * (<span class="hljs-number">2</span>**<span class="hljs-number">721</span>) + p0 + out_p[<span class="hljs-number">0</span>] * <span class="hljs-number">2</span>**<span class="hljs-number">266</span><br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-keyword">assert</span> n % p == <span class="hljs-number">0</span><br>q = n // <span class="hljs-built_in">int</span>(p)<br>phi = (p-<span class="hljs-number">1</span>) * (q-<span class="hljs-number">1</span>)<br>d = inverse_mod(e,phi)<br>m = <span class="hljs-built_in">pow</span>(enc,d,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>.decode(long_to_bytes(m)))<br><span class="hljs-comment">#BaseCTF&#123;7074ddc3e006810688241196414e49e2&#125;</span><br></code></pre></td></tr></table></figure><h2 id="6-random-primes"><a href="#6-random-primes" class="headerlink" title="6.random_primes"></a>6.random_primes</h2><p>这个不那么难，只是我傻逼了，最开始以为是直接写就好，结果看到flag限位45</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_n</span>():<br>    primes=[getPrime(<span class="hljs-number">128</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>)]<br>    n = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        n *= primes[random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">127</span>)]<br>    <span class="hljs-keyword">return</span> primes,n<br><br>flag=<span class="hljs-string">b&#x27;BaseCTF&#123;&#125;&#x27;</span><br>m=bytes_to_long(flag)<br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)==<span class="hljs-number">45</span><br><br>primes,n = gen_n()<br>e = <span class="hljs-number">0x010001</span><br><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;primes =&quot;</span>,primes)<br></code></pre></td></tr></table></figure><p>看限位45大概知道flag_bits为360，而给的素数是128位，大概三个就行了，然后直接爆破，爆破爽（馋</p><p>忘了那是个文本了，反正大概就是这样，这个不难</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># n,e,c,primes自己加吧</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> primes:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> primes:<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> primes:<br>            n1=i*j*k<br>            phi=(i-<span class="hljs-number">1</span>)*(j-<span class="hljs-number">1</span>)*(k-<span class="hljs-number">1</span>)<br>            m=long_to_bytes(<span class="hljs-built_in">pow</span>(c,<span class="hljs-built_in">pow</span>(e,-<span class="hljs-number">1</span>,phi),n1))<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;BaseCTF&#x27;</span> <span class="hljs-keyword">in</span> m:<br>                <span class="hljs-built_in">print</span>(m)<br></code></pre></td></tr></table></figure><h2 id="7-basic"><a href="#7-basic" class="headerlink" title="7.basic"></a>7.basic</h2><p>额，这题我看不懂，所以只放个原题吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><br>flag = os.getenv(<span class="hljs-string">&#x27;GZCTF_FLAG&#x27;</span>).encode()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>(socketserver.BaseRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recvall</span>(<span class="hljs-params">self</span>):<br>        BUFF_SIZE = <span class="hljs-number">2048</span><br>        data = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            part = <span class="hljs-variable language_">self</span>.request.recv(BUFF_SIZE)<br>            data += part<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part) &lt; BUFF_SIZE:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> data.strip()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> newline:<br>                msg += <span class="hljs-string">b&#x27;\n&#x27;</span><br>            <span class="hljs-variable language_">self</span>.request.sendall(msg)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._recvall()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        printable_chars = string.ascii_letters + string.digits + string.punctuation<br>        optional=[<span class="hljs-string">b&#x27;A&#x27;</span>,<span class="hljs-string">b&#x27;B&#x27;</span>,<span class="hljs-string">b&#x27;C&#x27;</span>,<span class="hljs-string">b&#x27;D&#x27;</span>]<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>            secret= <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(printable_chars, k=<span class="hljs-number">16</span>)).encode()<br>            select=random.choice(optional)<br>            <span class="hljs-variable language_">self</span>.send(select)<br>            enc=<span class="hljs-string">b&#x27;&#x27;</span><br>            <span class="hljs-keyword">if</span> select==<span class="hljs-string">b&#x27;A&#x27;</span>:<br>                enc=base64.b64encode(secret)<br>            <span class="hljs-keyword">elif</span> select==<span class="hljs-string">b&#x27;B&#x27;</span>:<br>                enc=secret.<span class="hljs-built_in">hex</span>().encode()<br>            <span class="hljs-keyword">elif</span> select==<span class="hljs-string">b&#x27;C&#x27;</span>:<br>                enc=bytes_to_long(secret)<br>                enc=<span class="hljs-built_in">str</span>(enc).encode()<br>            <span class="hljs-keyword">elif</span> select==<span class="hljs-string">b&#x27;D&#x27;</span>:<br>                enc=[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> secret]<br>                enc=<span class="hljs-built_in">str</span>(enc).encode()<br>            <span class="hljs-variable language_">self</span>.send(enc)<br>            client_send=<span class="hljs-variable language_">self</span>.recv()<br>            <span class="hljs-keyword">if</span> client_send!=secret:<br>                <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">&quot;\nYou wrong!!!!!&quot;</span>)<br>                exit()<br><br>        <span class="hljs-variable language_">self</span>.send(flag)<br>        <span class="hljs-variable language_">self</span>.send(<span class="hljs-string">b&quot;\nConnection has been closed  =.=  &quot;</span>)<br>        <span class="hljs-variable language_">self</span>.request.close()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    HOST, PORT = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">9999</span><br>    server = ForkedServer((HOST, PORT), Task)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    server.serve_forever()<br></code></pre></td></tr></table></figure><h2 id="8-try-to-factor"><a href="#8-try-to-factor" class="headerlink" title="8.try_to_factor"></a>8.try_to_factor</h2><p><strong>看不懂一点，这个先跳了</strong></p><h2 id="9-mid-math2"><a href="#9-mid-math2" class="headerlink" title="9.mid_math2"></a>9.mid_math2</h2><p>这个经过了我的细细琢磨（复习线性代数知识以及在阿褚的鼎力协助下，算是明白一点了<br>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> Matrix  <br><br>a, b, c = [getPrime(<span class="hljs-number">128</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br>d, e, f, h, i, j = [getPrime(<span class="hljs-number">1024</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>)]<br>A = [[a, b, c], [d, e, f], [h, i, j]]<br><br>flag = <span class="hljs-string">b&quot;flag&#123;test_flag&#125;&quot;</span><br>flag = bytes_to_long(flag)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">prod</span>(<span class="hljs-params">myList</span>):<br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> myList:<br>        result = result * i<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">randomArray</span>():<br>    upper = [[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]<br>    low = [[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, <span class="hljs-number">3</span>):<br>            upper[i][j] = getPrime(<span class="hljs-number">128</span>)<br>            low[j][i] = getPrime(<span class="hljs-number">128</span>)<br>    result = np.array(upper) @ np.array(low)<br>    <span class="hljs-keyword">return</span> result<br><br>e = getPrime(<span class="hljs-number">18</span>)<br>N = getPrime(<span class="hljs-number">1024</span>)<br>C = randomArray()<br><span class="hljs-comment">#MAT = C @ A @ B</span><br>MAT = C @ A<br>c = <span class="hljs-built_in">pow</span>(flag, e, prod(A[<span class="hljs-number">0</span>]))<br><br><span class="hljs-built_in">print</span>(MAT)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[[9194428734244577957135736828947112370812209206819996917633266069359894211949655026549592464237531352518967649750275097282532736237822915630766535634248987628113137246739472264614337707439494149796414126558156060870508338278038269649101921703583149322486905552569052814106532234864028314925118581658029792157851338427975728108000711353532410024128431635933014226306706319591106081211872</span><br><span class="hljs-string">  7052600738698435126221697697810087514520765619736355003187836563546493264420232197860875416948961661231812045406188307561458872254314061097960625042149316957446344556490001927621879295417925720004568332344856366002394724202261454916368122811414228043610804718983599804179657247820737462743875143882925818085495573474169110616761320858675303922740882169073395416895304752909979711051264</span><br><span class="hljs-string">  13094262565727554986668133240216117564284263232131011542877585146452802164148464500319291219458081531317231044962383872061004846788004747813785963603455919882739054992075130196548494850105124430477756818974520035883861936342117869122455996838023977818945511119955390136020375974150407580576040034808588694313922810340598787633148909527275716235390356737099830131958338026891256778602432]</span><br><span class="hljs-string"> [7291452286171544741377496447735677778433522048452394999757158120018504601116506253897733192493798837108269469756414516913436198353934250444263790689101779479157541198872731006007031448329354826004420971505929629537584453480285628607579031078497417101681028600589030661495031531644755072500393418929237208836713910921969937998825721580514845395852889662758886414966066733340052235985735</span><br><span class="hljs-string">  5592919719754926663830816961667268104316637431189640788304536404157195458040686322901848820171568258023938724485177544141303597034389473064509506247034833050568643394732003598890104462382321956436508366359718039669456303596542945687737870352569084995858128262046585579724537002100295978230177579835256681774512205534970583421138287684468047290246482431883957170924203400422234299829407</span><br><span class="hljs-string">  10384135162743100269852365857770153822630076412853981379757028821332622753962517667857057209221058533163475030678127399042436975886694593504673386134198042731671320468065688239424934644173240507619471360908786669070898288638067852779718549009532013299792474712979659423962779677856135791013599792822988457540442172903145046394648862567656330868441373023488569784114231877910285319620037]</span><br><span class="hljs-string"> [34946383530632295853235791100380055176686898072752599942691162027311662041417740482507624946631032260410440329949488242706004902881977357811370156793240362927747354453547446315050117795844866771053429455608334265986953931753411938119703800489233043034369650346216548318254326462336573090313788936967898128977445514764945671848611612198443909056919</span><br><span class="hljs-string">  26805677375585831510259621878357023272222175103906204143689109861471123435549853025410319713500257027420994041712736040084303902812241806295302385126726161281240831030434347236854521776375408982352155894199700974681768432734155312616453345950508256035721377179651166114898547487082749355033867559583905997404388549346221139007108462958001461826337</span><br><span class="hljs-string">  49768956277664050500387501949373949828589012443212214016088015478826178759698946452495063308332332373728223252613132611904477061717762261927498754849913008747980442098787524359755695519989286304445175440218168145037681791003471134417445542856715034633656861298596197935068562189476201463465706711744838395255326376049859058504891392128431832044455]]</span><br><span class="hljs-string">c = 11781599055433308033432930805524658061560499523533841161297213162869735414528038973998414585008473948613388691447093</span><br><span class="hljs-string">e = 160907</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>这个怎么说呢，你会发现（作为正常的大一下以后（指学过线代的密码刚学儿一点的低手（我，自己骂自己不正常？）：这个东西没法解密啊，他都是未知的（这样说没错吧，思考</p><p>然后，看了wp和文章后：哦，这用了LLL算法，额，LLL（）算法貌似有很多用，但在这一题的用处是为了求出A[0]，但是题目只给出了MAT和MAT&#x3D;A@C啊，怎么办？所以不知道，然后是看了wp问了ai才知道LLL（）的（是不是说话重复了，无所谓，大概就是这样，然后就是：ai大法好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;为何使用 LLL 算法</span><br><span class="hljs-string">在加密和解密标准 RSA 系统中，使用 LLL 算法可以优化以下步骤：</span><br><span class="hljs-string"></span><br><span class="hljs-string">安全性: LLL 算法用于破解一些基于 lattice 的密码学方案。通过找到相关的格基，可以尝试恢复加密密钥。</span><br><span class="hljs-string"></span><br><span class="hljs-string">密钥恢复: 如果攻击者获得了矩阵 </span><br><span class="hljs-string">C</span><br><span class="hljs-string">C 和 </span><br><span class="hljs-string">A</span><br><span class="hljs-string">A，LLL 减少可以找出与密钥相关的低维度向量，从而恢复 </span><br><span class="hljs-string">A</span><br><span class="hljs-string">A 的信息。这是因为在某些情况下，攻击者可以通过计算格基的方式得到与模数和私钥相关的线性关系。</span><br><span class="hljs-string"></span><br><span class="hljs-string">优化解密: 减少的格基可能揭示出某种数学结构，攻击者可以利用这些关系或结构来简化解密过程。</span><br><span class="hljs-string"></span><br><span class="hljs-string">总之，LLL 减少的主要目的是为了增加系统的安全性，并为可能的解密或攻击路径提供潜在的线索或结构。通过将复杂的线性代数问题转化为更简单的问题，LLL 算法能够帮助对各种加密系统进行分析和攻击。&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>这里解密过程应该是主要用了他的第二，三个性质：直接运用LLL（）解出A的值，然后按部就班求出n和phi就行了（注意：A为三行三列矩阵，所以</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">n</span>=A[0]<span class="hljs-number">*A</span>[1]<span class="hljs-number">*A</span>[2]<br></code></pre></td></tr></table></figure><p>对了还有个问的ai：MAT，A，C的作用，你们看看吧，仅供参考：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;在加密算法中使用的矩阵 </span><br><span class="hljs-string">A</span><br><span class="hljs-string">A、随机矩阵 </span><br><span class="hljs-string">C</span><br><span class="hljs-string">C 以及 LLL 算法的目的可以总结如下：</span><br><span class="hljs-string"></span><br><span class="hljs-string">1. 矩阵 A</span><br><span class="hljs-string">作用：</span><br><span class="hljs-string"></span><br><span class="hljs-string">矩阵 </span><br><span class="hljs-string">A</span><br><span class="hljs-string">A 通常包含了一些特定的参数，比如素数，例如在加密过程中使用的模数。它可能构成了系统中的基础结构，用于进行加密和解密操作。</span><br><span class="hljs-string">在某些加密方案中，矩阵 </span><br><span class="hljs-string">A</span><br><span class="hljs-string">A 中的值可能用来定义密钥生成的规则，或者作为在密钥恢复过程中进行线性代数运算的基础。</span><br><span class="hljs-string">用途：</span><br><span class="hljs-string"></span><br><span class="hljs-string">通过 </span><br><span class="hljs-string">A</span><br><span class="hljs-string">A，可能可以推导出系统的模数和公钥，在加密或解密过程中与密文进行关联。</span><br><span class="hljs-string">2. 随机矩阵 C</span><br><span class="hljs-string">作用：</span><br><span class="hljs-string"></span><br><span class="hljs-string">矩阵 </span><br><span class="hljs-string">C</span><br><span class="hljs-string">C 是加密过程中的随机生成矩阵，通常会涉及到一些特定的线性变换或组合。这种随机性是增加算法安全性的重要部分。</span><br><span class="hljs-string">矩阵 </span><br><span class="hljs-string">C</span><br><span class="hljs-string">C 可能负责存储加密过程中所需的一些中间变量，或通过随机性引入不确定性，从而增加对密码的攻击难度。</span><br><span class="hljs-string">用途：</span><br><span class="hljs-string"></span><br><span class="hljs-string">别此矩阵可能是通过某种形式引入多样性和复杂性，以防止简单的线性分析或其他类型的攻击。</span><br><span class="hljs-string">3. LLL 算法</span><br><span class="hljs-string">目的：</span><br><span class="hljs-string"></span><br><span class="hljs-string">LLL（Lenstra–Lenstra–Lovász）算法是一种用于格基的算法，通过该算法可以进行基的简化，得到短向量。它通常在解决整数线性问题的时候非常有用。</span><br><span class="hljs-string">在此场景中的用途：</span><br><span class="hljs-string"></span><br><span class="hljs-string">利用 LLL 算法，可以从矩阵 </span><br><span class="hljs-string">A</span><br><span class="hljs-string">A 和 </span><br><span class="hljs-string">C</span><br><span class="hljs-string">C 中提取出有用的信息，试图查找短的线性组合以恢复潜在的密钥。</span><br><span class="hljs-string">在某些情况下，如果攻击者能够通过 LLL 算法找到和密钥相关的线性关系，他们或许就能够获得一个这些参数的线性组合（可能与密钥相关），从而实现解密。</span><br><span class="hljs-string">总结</span><br><span class="hljs-string">矩阵 A 提供了基础和框架，定义了与模数和密钥关联的结构。</span><br><span class="hljs-string">矩阵 C 提供了随机性和复杂性，增强了系统的安全性。</span><br><span class="hljs-string">LLL 算法 则是利用这两个矩阵进行线性分析、寻找短向量，从而可能揭露出密钥信息或其他重要参数。</span><br><span class="hljs-string">整个过程表面上看是一个线性代数问题，但核心目标是通过将随机和确定性的因素结合起来，以增加破解系统的复杂性和难度。攻击者若能成功应用 LLL 算法分析这两个矩阵，就可能会获得关于密钥的重要线索。&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>然后就是解题代码了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>MAT = ...<br>c = ...<br>e = ...<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">prod2</span>(<span class="hljs-params">myList</span>):<br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> myList:<br>        result = result * (<span class="hljs-built_in">abs</span>(i) - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">prod</span>(<span class="hljs-params">myList</span>):<br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> myList:<br>        result = result * <span class="hljs-built_in">abs</span>(i)<br>    <span class="hljs-keyword">return</span> result<br><br>MAT = matrix(MAT)<br>n = prod(MAT.LLL()[<span class="hljs-number">0</span>])<br>phin = prod2(MAT.LLL()[<span class="hljs-number">0</span>])<br>d = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, phin)<br>flag = long_to_bytes(<span class="hljs-built_in">pow</span>(c, d, n))<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n=17631408097218561823677756442318461073431191708388844474451658702449860378618765667127201508272748995177105608754133</span><br><span class="hljs-string">phin=17631408097218561823677756442318461073226384183145081523839893374579202673116878021014333222334572070116308167450800</span><br><span class="hljs-string"># b&#x27;BaseCTF&#123;8E2BD73F-9C10-F813-2CA4-B4B2DED4E961&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="10-ez-log"><a href="#10-ez-log" class="headerlink" title="10.ez_log"></a>10.ez_log</h2><p>这一题，其实不难因为AES加密是对称加密，该给的东西都给你了，额，只是有一个补位不咋会，没事，现学了</p><p>然后这是原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long <span class="hljs-keyword">as</span> b2l, long_to_bytes <span class="hljs-keyword">as</span> l2b, getPrime<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br><br>flag = <span class="hljs-string">b&quot;flag&#123;test_flag&#125;&quot;</span><br><br>pad = <span class="hljs-keyword">lambda</span> x: x+<span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">16</span>-<span class="hljs-built_in">len</span>(x)%<span class="hljs-number">16</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">KEY</span>):<br>    cipher= AES.new(KEY,AES.MODE_ECB)<br>    encrypted =cipher.encrypt(flag)<br>    <span class="hljs-keyword">return</span> encrypted<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">KEY</span>):<br>    cipher= AES.new(KEY,AES.MODE_ECB)<br>    decrypted =cipher.decrypt(enc)<br>    <span class="hljs-keyword">return</span> decrypted<br><br>flag = pad(flag)<br>x = randint(<span class="hljs-number">10</span> ** <span class="hljs-number">7</span>, <span class="hljs-number">10</span> ** <span class="hljs-number">8</span>)<br>y = randint(<span class="hljs-number">10</span> ** <span class="hljs-number">7</span>, <span class="hljs-number">10</span> ** <span class="hljs-number">8</span>)<br>n = getPrime(<span class="hljs-number">28</span>)<br>z = <span class="hljs-built_in">pow</span>(y, x, n)<br><br>enc = encrypt(pad(l2b(x)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;enc = <span class="hljs-subst">&#123;b2l(enc)&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;y = <span class="hljs-subst">&#123;y&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;z = <span class="hljs-subst">&#123;z&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">enc = 33416570913716503492297352041317858420349510954381249751537743898024527101872454706181188441210166165803904185550746</span><br><span class="hljs-string">y = 82941012</span><br><span class="hljs-string">n = 228338567</span><br><span class="hljs-string">z = 51306718</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>pad是为了将flag填充成16的倍数。decrypt（）是解密函数，直接调用就可以。其中ynz都给你了，我们可以得出x。</p><p><strong><code>l2b(x)</code></strong>：这个函数的作用是将 <code>x</code>（在这里是一个长整型整数，通常是某种计算的结果）转换为一个字节串。在Python中，长整型数字可以表示为字节，通过 <code>long_to_bytes</code>，你可以得到其按字节表示的形式。这个函数来自于 <code>Crypto.Util.number</code> 模块。</p><p>因为enc &#x3D; encrypt(pad(l2b(x)))，加密时用了，所以解密时也要用一下。</p><p>哦，对了，其中z &#x3D; pow(y, x, n)，pow前面说过了，所以不再阐述。算了吧，还是说吧：z&#x3D;y**x（mod n）</p><p>就是通过这得出x的，再对x进行解密，这是代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long <span class="hljs-keyword">as</span> b2l, long_to_bytes <span class="hljs-keyword">as</span> l2b, getPrime  <br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES  <br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint  <br><br><br>enc = <span class="hljs-number">33416570913716503492297352041317858420349510954381249751537743898024527101872454706181188441210166165803904185550746</span><br>y = <span class="hljs-number">82941012</span><br>n = <span class="hljs-number">228338567</span><br>z = <span class="hljs-number">51306718</span><br><br><br><br>pad = <span class="hljs-keyword">lambda</span> x: x + <span class="hljs-string">b&#x27;\x00&#x27;</span> * (<span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(x) % <span class="hljs-number">16</span>)  <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">KEY</span>):   <br>    cipher = AES.new(KEY, AES.MODE_ECB)  <br>    decrypted = cipher.decrypt(enc)  <br>    <span class="hljs-keyword">return</span> decrypted  <br><span class="hljs-comment">#这里直接爆破了，但是不太推荐，因为数据量不大才用的</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">discrete_log</span>(<span class="hljs-params">y, z, n</span>):  <br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):  <br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(y, x, n) == z:  <br>            <span class="hljs-keyword">return</span> x  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>   <br><span class="hljs-string">&#x27;&#x27;&#x27;其实可以直接用这个：</span><br><span class="hljs-string">但这个要用sage（悲上加悲了属于是）</span><br><span class="hljs-string">enc = l2b(enc)</span><br><span class="hljs-string">G = GF(n)</span><br><span class="hljs-string">z = G(z)</span><br><span class="hljs-string">y = G(y)</span><br><span class="hljs-string">x = discrete_log(z, y)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>x = discrete_log(y, z, n)  <br>enc = l2b(enc)<br><span class="hljs-built_in">print</span>(decrypt(pad(l2b(x))))<br><span class="hljs-comment">#b&#x27;BaseCTF&#123;BF3DCONZ-67FE-ENZU-385S-CSNI13B2&#125;\x00\x00\x00\x00\x00\x00\x00&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="11-没有n啊"><a href="#11-没有n啊" class="headerlink" title="11.没有n啊"></a>11.没有n啊</h2><p>&#x3D;&#x3D;ok啊，这一题感谢guoql仙贝的大力帮助&#x3D;&#x3D;</p><p>先看原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>flag=<span class="hljs-string">b&#x27;BaseCTF&#123;&#125;&#x27;</span><br>m=bytes_to_long(flag)<br><br>p=getPrime(<span class="hljs-number">512</span>)<br>q=getPrime(<span class="hljs-number">512</span>)<br><br>n=p*q<br>e=<span class="hljs-number">65537</span><br><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br>x=<span class="hljs-built_in">pow</span>(n,e,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d =&quot;</span>,d)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x =&quot;</span>,x)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">c = 52453423663797600504896811946820841317615798875871627840172711423749946998217916744135290476795328543876098295227017753117609268701786914053599060330837226980969490439739651088710549890669593587642238827462108900683237797139569260570711611781514337884756698142193277516649805710242748531658979160170193283558</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">d = 54297831548863701092644190086258072883163378307246681513317422545902442650340916001357605211715836911877651782099787873046987096258918495734824011752504203578982947618784736181975847356304742402103468329660346526185908618978851982007496096394151821403282347897417590596861323293706611997134962231129075032641</span><br><span class="hljs-string">x = 40635864473997460751766935373772107585133301579524000836637683731949939348171187931595274511243052505604832873086269554842194695737052043633079044688826020656068356561856848814530947955429343483847291398607359454851926470168457852479044154798114087493843073091985855839008222762224952503563764527380033064437</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>这个已知的东西不少，我们的目的是通过这些已知数求出n，这是解题思路：</p><p>![](C:&#x2F;Users&#x2F;ASUS&#x2F;Pictures&#x2F;Screenshots&#x2F;屏幕截图 2024-10-17 190749.png)</p><p>额，作为新手的我当然是看不懂的（但现在懂了，所以讲一下这东西：我们的目的是通过已知的2一些求出来n（感觉就是乘法逆元）然后，我写纸上了：</p><p><img src="/2024/10/10/BaseCTF2024%E6%96%B0%E7%94%9F%E8%B5%9B%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%88%E6%8A%84%E6%9D%A5%E7%9A%84/b8eefbff6ed3a5782e88320bf7441829.jpeg" alt="b8eefbff6ed3a5782e88320bf7441829"></p><p>大概，应该，也许，可能或者能看懂吧（思考，简单地说，这些东西的目的是为了得出他们之间的关系，而我们的目的从求出n变成求出a就可以了。</p><p>怎么求出a？那当然是求出phic就好了，phic怎么求？那必须是byd的sage啊（sage还没弄，啊啊啊啊啊，CCCCCCCC，不急，小问题）</p><p>phic是：<br>$$<br>要计算<br>ϕ<br>(<br>c<br>)<br>ϕ(c)，Euler Totient 函数的值，你可以按照以下步骤进行：</p><h1 id="对于一般的正整数cc找出cc-的质因数分解：设cc-的质因数分解为：c"><a href="#对于一般的正整数cc找出cc-的质因数分解：设cc-的质因数分解为：c" class="headerlink" title="对于一般的正整数cc找出cc 的质因数分解：设cc 的质因数分解为：c"></a>对于一般的正整数<br>c<br>c<br>找出<br>c<br>c 的质因数分解：<br>设<br>c<br>c 的质因数分解为：<br>c</h1><p>p<br>1<br>k<br>1<br>×<br>p<br>2<br>k<br>2<br>×<br>…<br>×<br>p<br>m<br>k<br>m<br>c&#x3D;p<br>1<br>k<br>1<br>​</p><p>​<br> ×p<br>2<br>k<br>2<br>​</p><p>​<br> ×…×p<br>m<br>k<br>m<br>​</p><p>​</p><p>其中，<br>p<br>1<br>,<br>p<br>2<br>,<br>…<br>,<br>p<br>m<br>p<br>1<br>​<br> ,p<br>2<br>​<br> ,…,p<br>m<br>​<br>  是<br>c<br>c 的不同质因数。</p><h1 id="应用-Euler-Totient-函数公式：根据质因数分解，Euler-Totient-函数ϕ-c-ϕ-c-的计算公式为：ϕ-c"><a href="#应用-Euler-Totient-函数公式：根据质因数分解，Euler-Totient-函数ϕ-c-ϕ-c-的计算公式为：ϕ-c" class="headerlink" title="应用 Euler Totient 函数公式：根据质因数分解，Euler Totient 函数ϕ(c)ϕ(c) 的计算公式为：ϕ(c)"></a>应用 Euler Totient 函数公式：<br>根据质因数分解，Euler Totient 函数<br>ϕ<br>(<br>c<br>)<br>ϕ(c) 的计算公式为：<br>ϕ<br>(<br>c<br>)</h1><p>c<br>(<br>1<br>−<br>1<br>p<br>1<br>)<br>(<br>1<br>−<br>1<br>p<br>2<br>)<br>…<br>(<br>1<br>−<br>1<br>p<br>m<br>)<br>ϕ(c)&#x3D;c(1−<br>p<br>1<br>​</p><p>1<br>​<br> )(1−<br>p<br>2<br>​</p><p>1<br>​<br> )…(1−<br>p<br>m<br>​</p><p>1<br>​<br> )<br>$$<br>简单地说就是质因数-1的乘积（思考）应该是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>c = <span class="hljs-number">52453423663797600504896811946820841317615798875871627840172711423749946998217916744135290476795328543876098295227017753117609268701786914053599060330837226980969490439739651088710549890669593587642238827462108900683237797139569260570711611781514337884756698142193277516649805710242748531658979160170193283558</span><br>e = <span class="hljs-number">65537</span><br>d = <span class="hljs-number">54297831548863701092644190086258072883163378307246681513317422545902442650340916001357605211715836911877651782099787873046987096258918495734824011752504203578982947618784736181975847356304742402103468329660346526185908618978851982007496096394151821403282347897417590596861323293706611997134962231129075032641</span><br>x = <span class="hljs-number">40635864473997460751766935373772107585133301579524000836637683731949939348171187931595274511243052505604832873086269554842194695737052043633079044688826020656068356561856848814530947955429343483847291398607359454851926470168457852479044154798114087493843073091985855839008222762224952503563764527380033064437</span><br><br><span class="hljs-comment">#phic=(2-1)*(3-1)*(73-1)*(3967-1)*(6373-1)*(95592293-1)*(216465863-1)*(4744823012787277141-1)*(48245998253859255581546561942142167304434549996919484957120717763726325509833409296170471619434291990255044694414983821250538266717293535917534918221352198192885071310932646412147737114561229291373456448363184353049796801297876664512630305475226391199481032049429-1)</span><br>phic=euler_phi(c)<span class="hljs-comment">#要用sage</span><br>dc=gmpy2.invert(e,phic)<br>a=<span class="hljs-built_in">pow</span>(x,dc,c)<br><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,a+c)))<br></code></pre></td></tr></table></figure><h2 id="12-exgcd（有点不懂，做题太少了，其实前面的也有很多不懂"><a href="#12-exgcd（有点不懂，做题太少了，其实前面的也有很多不懂" class="headerlink" title="12.exgcd（有点不懂，做题太少了，其实前面的也有很多不懂"></a>12.exgcd（有点不懂，做题太少了，其实前面的也有很多不懂</h2><p>这是共模攻击的题，但是e1，e2不共素（所以没法直接套脚本（怒，但更改一下，其实差不多</p><p>这是原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag=<span class="hljs-string">b&#x27;BaseCTF&#123;&#125;&#x27;</span><br>m=bytes_to_long(flag)<br><br>p=getPrime(<span class="hljs-number">1024</span>)<br>q=getPrime(<span class="hljs-number">1024</span>)<br><br>n=p*q<br>e1=<span class="hljs-number">3747</span><br>e2=<span class="hljs-number">2991</span><br><br>c1=<span class="hljs-built_in">pow</span>(m,e1,n)<br>c2=<span class="hljs-built_in">pow</span>(m,e2,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e1 =&quot;</span>,e1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e2 =&quot;</span>,e2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c1 =&quot;</span>,c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c2 =&quot;</span>,c2)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n = 27855350163093443890983002241607629119744539643165776358993469078731521668677421483556132628708836721737685936980427467856642738196111748018522018598646125626995613169001111504706363742194664774823604738939411512861441742683157275818500991834651769368178320088982759626122029956515159435424882855075032400667120376075618896752694718491438251810609878021717559466498493103257912108879328270813061231904227056671621363669388496383136964549879459562004569059185078204867346250733489663015417879915436157806942021693920206071715538430633494012923651469196048546309592946901609803631751035364478773126967010589504275776307</span><br><span class="hljs-string">e1 = 3747</span><br><span class="hljs-string">e2 = 2991</span><br><span class="hljs-string">c1 = 24426579024062518665031958216110619832653602343205488454298659533869220501923184793828421371206493659949730138867555889074137026401207985428160803910695088081370233571905915349589146504374710444468715701305061060934519410886010929009297226496448218819742287990364436349188987723637449590579092391100714056589967894609950537021838172987840638735592599678186555961654312442380755963257875487240962193060914793587712733601168204859917001269928487633954556221987632934190217367502677285906521385169669644977192556145782303526375491484736352799180747403161343130663661867413380222714012960607473395828938694285120527085083</span><br><span class="hljs-string">c2 = 6932145147126610816836065944280934160173362059462927112752295077225965836502881335565881607385328990881865436690904056577675885697508058289570333933837515526915707121125766720407153139160751343352211421901876051228566093038929625042619250168565502734932197817082848506826847112949495527533238122893297049985517280574646627011986403578166952789317461581409161873814203023736604394085875778774834314777046086921852377348590998381648241629124408514875110073073851913857329679268519229436092660959841766848676678740851087184214283196544821779336090434587905158006710112461778939184327386306992082433561460542130441825293</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>$$<br>c_1&#x3D;m^{e1}\mod n\ c_2&#x3D;m^{e2}\mod n\ 通过扩展欧几里得计算：s_1<em>e_1+s_2</em>e_2&#x3D;s\ c_1^{s_1}<em>c_2^{s_2}&#x3D;m^{s_1</em>e_1+s_2*e_2}&#x3D;m^s<br>最后得到的是m^{gcd(e1,e2)}，最后开个根即可<br>$$</p><p>看公式感觉还行，但题解：<strong>我直接在代码注释说想法了</strong></p><p>补充一下：<strong>最终的乘积再次对 n 取模，确保结果 m 范围在有效的明文范围内。</strong></p><p>至于为什么采用pow(c,s,n)而不是pow(c,s)的原因：<strong>&#x3D;&#x3D;使用模运算是确保计算正确性、避免溢出以及与 RSA 加密定义保持一致的必要步骤。这也是为什么在实现中要特别强调使用模运算的原因。&#x3D;&#x3D;</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br>n = <span class="hljs-number">27855350163093443890983002241607629119744539643165776358993469078731521668677421483556132628708836721737685936980427467856642738196111748018522018598646125626995613169001111504706363742194664774823604738939411512861441742683157275818500991834651769368178320088982759626122029956515159435424882855075032400667120376075618896752694718491438251810609878021717559466498493103257912108879328270813061231904227056671621363669388496383136964549879459562004569059185078204867346250733489663015417879915436157806942021693920206071715538430633494012923651469196048546309592946901609803631751035364478773126967010589504275776307</span><br>e1 = <span class="hljs-number">3747</span><br>e2 = <span class="hljs-number">2991</span><br>c1 = <span class="hljs-number">24426579024062518665031958216110619832653602343205488454298659533869220501923184793828421371206493659949730138867555889074137026401207985428160803910695088081370233571905915349589146504374710444468715701305061060934519410886010929009297226496448218819742287990364436349188987723637449590579092391100714056589967894609950537021838172987840638735592599678186555961654312442380755963257875487240962193060914793587712733601168204859917001269928487633954556221987632934190217367502677285906521385169669644977192556145782303526375491484736352799180747403161343130663661867413380222714012960607473395828938694285120527085083</span><br>c2 = <span class="hljs-number">6932145147126610816836065944280934160173362059462927112752295077225965836502881335565881607385328990881865436690904056577675885697508058289570333933837515526915707121125766720407153139160751343352211421901876051228566093038929625042619250168565502734932197817082848506826847112949495527533238122893297049985517280574646627011986403578166952789317461581409161873814203023736604394085875778774834314777046086921852377348590998381648241629124408514875110073073851913857329679268519229436092660959841766848676678740851087184214283196544821779336090434587905158006710112461778939184327386306992082433561460542130441825293</span><br>s,s1,s2=gcdext(e1,e2)<br><br>m=(<span class="hljs-built_in">pow</span>(c1,s1,n)*<span class="hljs-built_in">pow</span>(c2,s2,n))%n  <span class="hljs-comment">#不会，但是按照自己理解写写吧：pow（c,s,n）=c**smod n=c**s，因为之前已经mod过n了所以值不会变，最后%n是为了规定m在模n的范围内，最后正常求就好？再看看吧，不会的太多了</span><br><br><span class="hljs-built_in">print</span>(long_to_bytes(iroot(m,s)[<span class="hljs-number">0</span>]))<span class="hljs-comment">#用[0]是为了保证为整数</span><br><span class="hljs-comment">#b&#x27;BaseCTF&#123;feb7e1ae-a8f7-4fc4-8d6d-945a45cc3f6d&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>正常情况下共模攻击应该是互素的（思考，s&#x3D;1就好了</p><h2 id="12-5额，由中国剩余定理（sage有，这个是解题脚本"><a href="#12-5额，由中国剩余定理（sage有，这个是解题脚本" class="headerlink" title="12.5额，由中国剩余定理（sage有，这个是解题脚本"></a>12.5额，由中国剩余定理（sage有，这个是解题脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">extended_gcd</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; 返回 (gcd, x, y) 使得 ax + by = gcd &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> a == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> (b, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>    gcd, x1, y1 = extended_gcd(b % a, a)<br>    x = y1 - (b // a) * x1<br>    y = x1<br>    <span class="hljs-keyword">return</span> (gcd, x, y)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mod_inverse</span>(<span class="hljs-params">a, m</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; 计算 a 在模 m 下的逆元 &quot;&quot;&quot;</span><br>    gcd, x, _ = extended_gcd(a, m)<br>    <span class="hljs-keyword">if</span> gcd != <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Inverse does not exist&quot;</span>)<br>    <span class="hljs-keyword">return</span> x % m<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">chinese_remainder_theorem</span>(<span class="hljs-params">c1, c2, n1, n2</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; 根据中国剩余定理计算 m &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 验证 c1 和 c2 的合法性</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-number">0</span> &lt;= c1 &lt; n1) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> (<span class="hljs-number">0</span> &lt;= c2 &lt; n2):<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;c1 must be less than n1 and c2 must be less than n2&quot;</span>)<br>    <br>    <span class="hljs-comment"># 计算 n1 和 n2 的逆元</span><br>    n1_inv = mod_inverse(n1, n2)<br>    n2_inv = mod_inverse(n2, n1)<br><br>    <span class="hljs-comment"># 根据 CRT 的公式计算 m</span><br>    m = (c1 * n2 * n2_inv + c2 * n1 * n1_inv) % (n1 * n2)<br><br>    <span class="hljs-keyword">return</span> m<br><br><span class="hljs-comment"># 示例</span><br>c1 = <span class="hljs-number">2</span>  <span class="hljs-comment"># 例：m % n1</span><br>c2 = <span class="hljs-number">3</span>  <span class="hljs-comment"># 例：m % n2</span><br>n1 = <span class="hljs-number">5</span>  <span class="hljs-comment"># 模数 n1</span><br>n2 = <span class="hljs-number">7</span>  <span class="hljs-comment"># 模数 n2</span><br><br>m = chinese_remainder_theorem(c1, c2, n1, n2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The value of m is:&quot;</span>, m)<br></code></pre></td></tr></table></figure><h2 id="13-winner？"><a href="#13-winner？" class="headerlink" title="13.winner？"></a>13.winner？</h2><p>这个就是维纳攻击。</p><p>维纳攻击大概就是根据连分数找到你想要得到的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">维纳攻击的原理<br>维纳攻击主要依赖于连分数的性质和定理。连分数是一个数的连续分式展开，通过计算一个数（如e/N）的连分数，可以找到与这个数近似的两个数的比值（如k/d）。在RSA算法中，当满足一定条件时（如私钥d很小或公钥指数e过大），可以通过对e/N的连分数展开来找到对应的k/d，进而分解出N的两个质因数p和q，最终恢复出私钥d。<br><br>维纳攻击的应用条件<br>维纳攻击并不是对所有的RSA加密都有效，它主要适用于以下情况：<br><br>私钥d的约数数量较小，或者d本身很小。<br>公钥指数e过大或过小，特别是当e与N（即p和q的乘积）的比值接近某个整数的倒数时。<br>在这些条件下，维纳攻击能够利用连分数的性质快速推断出私钥d的值。<br><br>维纳攻击的意义<br>维纳攻击的存在揭示了RSA算法在特定条件下的脆弱性。它提醒我们在设计和使用RSA加密系统时，需要合理选择公钥和私钥的参数，以避免被维纳攻击等数学方法破解。同时，维纳攻击也为密码学领域的研究提供了重要的思路和启示，推动了密码学的发展和进步。<br><br>综上所述，密码学中的维纳攻击是为了解决RSA公钥加密算法在特定条件下的安全问题，通过数学方法恢复出私钥d，从而实现对密文的解密。<br></code></pre></td></tr></table></figure><p>但是很遗憾，这题并不是主要适用条件之一</p><p>这一题主要是根据他给的PQ关系和leak来判断是否适用维纳攻击，以及对PQ的求解</p><p>这是原题：</p><p>&#x3D;&#x3D;哦，对了，没错这一题又要用sage，没错，我还是没弄好sage（悲上加悲&#x3D;&#x3D;</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> decimal<br>flag=<span class="hljs-string">b&quot;BaseCTF&#123;&#125;&quot;</span><br>m = bytes_to_long(flag)<br><br><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n=p*q<br><br>e=<span class="hljs-number">65537</span><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><br>decimal.getcontext().prec = <span class="hljs-number">648</span><br>P=decimal.Decimal(p)<br>Q=decimal.Decimal(q)<br>leak=decimal.Decimal((<span class="hljs-number">3</span>*P*Q-<span class="hljs-number">1</span>)/(<span class="hljs-number">3</span>*Q*Q))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;leak =&quot;</span>,leak)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 11032748573623426359632659657114807044712138586316710250985606809252700461490504487308849626514319062562557448839550994242999334882617031487618174168038491566640081840111747765753878087564318833273878755416584962921669911444225959335274753391800995531023212276838665202257007640354237043291129197348884914956663597240094662207929658519596987351984403258345205873566463643624175318315064440456858013874962784792564480286904620663695194689839431808082976248378509181327101557380978849545906691903896662095520288964101796965095129861467059775556110616007889846240936219381379219605528051627402300580239311202137582442057</span><br><span class="hljs-string">leak = 0.829374344780877053838760251345359097311540811993463349625630085472892814959843248358036249898871908548743719153319438638517170060651237635838827482534816419091949205584951292517303330452910012749674475329235689229498752425379611083979518257734473992186831474208400813283887045691145481237726578827559198828469462343342343287720369159899636816373592067698883361360269728719786071024354151682314608072902347335691012713629816579496252896260869382806838857194293618332286500427694077400072428506897829689703872985954772105672992293334668485358785863779749153981721900135318166811250762946069962348114491411585418993494561587403918162681937152503739843</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>这是官方题解思路：<br>$$<br>leak&#x3D;\frac{3<em>P</em>Q-1}{3<em>Q</em>Q}\ leak&#x3D;\frac{P}{Q}-\frac{1}{3<em>Q^2}\ \left|leak-\frac{P}{Q}\right|&#x3D;\frac{1}{3</em>Q^2}&lt;\frac{1}{2*Q^2}\ 之后计算leak的连分数，即可得到p和q<br>$$<br>但官方代码我看不懂，不过还是贴出来吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">11032748573623426359632659657114807044712138586316710250985606809252700461490504487308849626514319062562557448839550994242999334882617031487618174168038491566640081840111747765753878087564318833273878755416584962921669911444225959335274753391800995531023212276838665202257007640354237043291129197348884914956663597240094662207929658519596987351984403258345205873566463643624175318315064440456858013874962784792564480286904620663695194689839431808082976248378509181327101557380978849545906691903896662095520288964101796965095129861467059775556110616007889846240936219381379219605528051627402300580239311202137582442057</span><br>leak = <span class="hljs-number">0.829374344780877053838760251345359097311540811993463349625630085472892814959843248358036249898871908548743719153319438638517170060651237635838827482534816419091949205584951292517303330452910012749674475329235689229498752425379611083979518257734473992186831474208400813283887045691145481237726578827559198828469462343342343287720369159899636816373592067698883361360269728719786071024354151682314608072902347335691012713629816579496252896260869382806838857194293618332286500427694077400072428506897829689703872985954772105672992293334668485358785863779749153981721900135318166811250762946069962348114491411585418993494561587403918162681937152503739843</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>cf = continued_fraction(leak)<br>convers = cf.convergents()<br><span class="hljs-keyword">for</span> pkd <span class="hljs-keyword">in</span> convers:<br>    <span class="hljs-comment"># possible k, d</span><br>    pp, pq = pkd.as_integer_ratio()<br>    pp=<span class="hljs-built_in">int</span>(pp)<br>    <span class="hljs-keyword">if</span> pp.bit_length()==<span class="hljs-number">1024</span> <span class="hljs-keyword">and</span> isPrime(pp):<br>        flag=long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c,inverse(e,pp-<span class="hljs-number">1</span>),pp)))<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Base&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment">#b&#x27;BaseCTF&#123;9431ee53-5d5c-4b0b-956f-1eafff6c9e87&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>来看看石氏是时试师傅的题解，这个我能看懂：<strong>哦，对了，能看懂不等于我会</strong></p><p>这个是先将leak用连分数表示</p><p>cf.numerator(i)是取对应次数的连分数的分子</p><p>cf.denominator(i)是取对应次数的连分数的分母</p><p>而符合质数的分子分母就是对应的p和q，然后常规解题即可</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py">cf = continued_fraction(leak)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>    k = cf.numerator(i)<br>    x = cf.denominator(i)<br>    <span class="hljs-keyword">if</span> isPrime(x) <span class="hljs-keyword">and</span> is_prime(k):<br>        <span class="hljs-built_in">print</span>(k,x)<br>        p,q = k,x<br>        <span class="hljs-keyword">break</span><br> <br>long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c,inverse_mod(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)),p*q)))<br><span class="hljs-string">b&#x27;BaseCTF&#123;9431ee53-5d5c-4b0b-956f-1eafff6c9e87&#125;&#x27;</span>     <br></code></pre></td></tr></table></figure><h2 id="14、没有n啊pro"><a href="#14、没有n啊pro" class="headerlink" title="14、没有n啊pro"></a>14、没有n啊pro</h2><p>原题：（直接搬了，懒了）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>flag=<span class="hljs-string">b&#x27;BaseCTF&#123;&#125;&#x27;</span><br>m=bytes_to_long(flag)<br>p=getPrime(<span class="hljs-number">128</span>)<br>q=getPrime(<span class="hljs-number">128</span>)<br><br>n=p*q<br>e=<span class="hljs-number">65537</span><br><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br><br><span class="hljs-keyword">assert</span> d&lt;phi<br><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d =&quot;</span>,d)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">c = 78919950899709764543039048006935881842075789773495004639436106636461009323420</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">d = 13002488326322253055272696035053386340217207134816593767440035447757509399233</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>根据题目判断phi为256位，已知c,d,e的话，我们可以根据d&#x3D;pow(e,-1,phi)      &#x2F;&#x2F;d&#x3D;gmpy2.invert(e,phi)列出可能的phi的值然后进行爆破</p><p>应该和第十一题没有n啊差不多，不对貌似，啊啊啊啊，被折磨了，晚上问仙贝吧</p><p>看得懂官方咋解的了，先放这吧：（写的有注释，能看懂应该）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> more_itertools <span class="hljs-keyword">import</span> factor<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> isprime<br><br>c = <span class="hljs-number">78919950899709764543039048006935881842075789773495004639436106636461009323420</span><br>e = <span class="hljs-number">65537</span><br>d = <span class="hljs-number">13002488326322253055272696035053386340217207134816593767440035447757509399233</span><br><br>p_bits=<span class="hljs-number">128</span><br>q_bits=<span class="hljs-number">128</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_phi</span>(<span class="hljs-params">e, d</span>):<br>    k_phi = e*d -<span class="hljs-number">1</span><br>    result = []<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(e,<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> k_phi % k == <span class="hljs-number">0</span>:<br>            tmp = k_phi // k<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(tmp).bit_length()==p_bits+q_bits:<br>                result.append(tmp)<br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    phi_list = get_phi(e,d)  <br>    count = <span class="hljs-built_in">len</span>(phi_list)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;有<span class="hljs-subst">&#123;count&#125;</span>个可能的&quot;</span>)<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> phi <span class="hljs-keyword">in</span> phi_list:<br>        count += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;count&#125;</span>尝试爆破 <span class="hljs-subst">&#123;phi&#125;</span>&#x27;</span>)<br>        <span class="hljs-comment"># factors 通常是一个列表，其中每个元素都是一个元组，元组的第一个值是质因子，第二个值是该质因子的幂。</span><br>        factors = factor(phi)  <br>        result = []<br>        <span class="hljs-comment"># 这是将factors元组改为全部是由质因子组成的列表</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> factors:<br>            num, times = <span class="hljs-built_in">int</span>(i[<span class="hljs-number">0</span>]), i[<span class="hljs-number">1</span>]<br>            result += [num] * times<br>        <span class="hljs-comment"># 进行简单的检查</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(factors)&gt;<span class="hljs-number">1</span>:<br>            s = <span class="hljs-built_in">set</span>()<br>            <span class="hljs-comment"># 形成唯一的质因子组合</span><br>            <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(result) + <span class="hljs-number">1</span>):<br>                combination = <span class="hljs-built_in">list</span>(itertools.combinations(result, r))<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> combination:<br>                    s.add(i)<br>            ans=[]<br>            <span class="hljs-comment"># 遍历所有质因子组合进行相乘得到可能的p-1</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>                tmp=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>                    tmp=tmp*j<br>                ans.append(tmp)<br>            <span class="hljs-comment"># 对可能的p-1进行验证</span><br>            <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> ans:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(num+<span class="hljs-number">1</span>).bit_length()==p_bits <span class="hljs-keyword">and</span> isprime(num+<span class="hljs-number">1</span>):<br>                    p = num+<span class="hljs-number">1</span><br>                    q = phi // num + <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">if</span> isprime(q):<br>                        n = p * q<br>                        flag=long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c,d,n)))<br>                        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;BaseCTF&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>                            <span class="hljs-built_in">print</span>(flag)<br>                            <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="15、哎呀数据丢失了"><a href="#15、哎呀数据丢失了" class="headerlink" title="15、哎呀数据丢失了"></a>15、哎呀数据丢失了</h2><p>这题涉及了证书分析，虽然是最简单的证书分析，但我还是不会，但在gouql以及Naby师傅的讲解下会了一点，所以写写</p><p>看懂这个文章，这一题大概就会了：<a href="https://tover.xyz/p/pem-by-hand/">手撕PEM密钥（RSA） | Tover’s Blog</a>   （里面的hex是十六进制并非是二进制）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">说几句证书相关的关键点，一般来说手撕确实的证书分析就是把数据<span class="hljs-built_in">base64</span>解密一下再转十六进制分析。<br>接下来就是找02开头的数据，然后看02后面的数据是不是跟着长度（一般根据n的bits来判断）<br>如果不对，那就从新开始，删去第一个字符在进行<span class="hljs-built_in">base64</span>解密，依次反复知道正确。<br></code></pre></td></tr></table></figure><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><br>flag=<span class="hljs-string">b&quot;&quot;</span><br>m=bytes_to_long(flag)<br><br>rsa=RSA.generate(<span class="hljs-number">1024</span>)<br><br><br>c=<span class="hljs-built_in">pow</span>(m,rsa.e,rsa.n)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;out&quot;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(long_to_bytes(c))<br><br>private_key=rsa.exportKey(<span class="hljs-string">&quot;PEM&quot;</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;pri.pem&quot;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(private_key)<br><br></code></pre></td></tr></table></figure><p>其中关键点在于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span>、对base64数据进行<span class="hljs-built_in">hex</span>转化，这个工具有。其中如果转化失败可以删除末位或首位（我不晓得咋判别，只能建议自己先试末位）<br><span class="hljs-number">2</span>、<span class="hljs-number">30</span>就是<span class="hljs-type">Sequence</span>的tag，<span class="hljs-number">82</span>就是说接下来后两个<span class="hljs-built_in">bytes</span>是这个<span class="hljs-type">Sequence</span>的长度，即<span class="hljs-number">0x025d</span>个<span class="hljs-built_in">bytes</span>，也就是剩下全部都是。接着的020100就是整数<span class="hljs-number">0</span>，其中02是整数的tag，01是这个整数占1byte，<span class="hljs-number">00</span>是value同样的方法也可以解02818100a0...和后面其他整数（其实生成的私钥PEM只有整数-）<br><span class="hljs-number">3</span>、接下来就是正常的rsa解密，但是我没看懂为什么要用out（悲，教教我）<br>此证书解密获得数据顺序：<br>3082025d  <span class="hljs-comment"># Begin Sequence: len=0x025d</span><br><br>0201  <span class="hljs-comment"># Version: (len=0x01)</span><br><span class="hljs-number">00</span><br><br>028181<span class="hljs-comment"># n: (len=0x81)</span><br>00a0d154d5bf97c40f7797b44819d09c608fa4b5c38e70d83bc13267138c6eff4c1aacefe3ddb571e1b41d911c7ab6136cf90493189563450e1f4270cabbc4207c54c4da7b84a20311cfbbabe82b9fe60bdf48a08d57839d0cdf9464d84262bcc06bc308095a6987f60ad07d669a312b5a7e4133213788eecf25863248b91349ef<br><br>0203<span class="hljs-comment"># e: (len=0x03)</span><br><span class="hljs-number">0</span>10001<br><br>028180<span class="hljs-comment"># d: (len=0x80)</span><br>0f8270c496903bf3e3ec4912450f15edc81cb1fcf4b154615aee11fbd428e64d402b5a8d66d5f770358f3e6df935b324e8d5349c83d7c992a5982249a31734acb1db19c4c8d829267514bc1ef7bbfbe242d4350f67a002a56d33e56d1a94adc71c68f020dc39ab7d0064c111b164e26ba0698dc94a03cdfd516ffd966e877949<br><br>0241<span class="hljs-comment"># p: (len=0x41)</span><br>00ca97e49c058237f96e99118ce383f91912cba1163de9236181ff754ef3ef1a260fac8d2d9aee866d51a8b6836983b05<br></code></pre></td></tr></table></figure><p>题解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><br>n=<span class="hljs-number">0x00BD278484122AEF9A69EC647290219DED06EDD2B7611721B326850B2F5060DAEED7694356667C479CA9CCB6969F4FBE6DC7FA6759ACA21D8A96A881A8E4A0217732757E649D503191511FA96DA42ED1DA2FA3BC8C9C65FBD9C0DD6F430359AC45E455D32C5B0EA29D21E647FF80E50ABCBB80F76ADB67007A04E85DBAEB4C8F1D</span><br>e=<span class="hljs-number">0x010001</span><br>d=<span class="hljs-number">0x2265E355593071AE3501062B4746B5BF7AF918CEBC5B46879BC3AA0B0AA4F26B68C4FDB7E29F4B2E943A6421F40ABE689C6B4F0C21B6C184886D5056F46CA26908540EC07B82AD47E667971A01FAC6162E93A7FC61AED5660F826AEBA34D78ACCD18FC59E7921701F10FF51D52883706B864287CFDB34E309C93829D29D867C9</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;G:\out&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    c=f.read()<br>    m=bytes_to_long(c)<br>    <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(m,d,n)))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;30</span><br><span class="hljs-string">82 025C</span><br><span class="hljs-string">0201 00</span><br><span class="hljs-string">02 81 81 00BD278484122AEF9A69EC647290219DED06EDD2B7611721B326850B2F5060DAEED7694356667C479CA9CCB6969F4FBE6DC7FA6759ACA21D8A96A881A8E4A0217732757E649D503191511FA96DA42ED1DA2FA3BC8C9C65FBD9C0DD6F430359AC45E455D32C5B0EA29D21E647FF80E50ABCBB80F76ADB67007A04E85DBAEB4C8F1D</span><br><span class="hljs-string">02 03 010001</span><br><span class="hljs-string">02 81 80 2265E355593071AE3501062B4746B5BF7AF918CEBC5B46879BC3AA0B0AA4F26B68C4FDB7E29F4B2E943A6421F40ABE689C6B4F0C21B6C184886D5056F46CA26908540EC07B82AD47E667971A01FAC6162E93A7FC61AED5660F826AEBA34D78ACCD18FC59E7921701F10FF51D52883706B864287CFDB34E309C93829D29D867C9</span><br><span class="hljs-string">02 4100C6</span><br><span class="hljs-string"></span><br><span class="hljs-string">02 81 80 2265e355593071ae3501062b4746b5bf7af918cebc5b46879bc3aa0b0aa4f26b68c4fdb7e29f4b2e943a6421f40abe689c6b4f0c21b6c184886d5056f46ca26908540ec07b82ad47e667971a01fac6162e93a7fc61aed5660f826aeba34d78accd18fc59e7921701f10ff51d52883706b864287cfdb34e309c93829d29d867c9</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>密码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>密码</tag>
      
      <tag>入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
