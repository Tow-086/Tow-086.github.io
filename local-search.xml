<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java常见八股</title>
    <link href="/2025/08/26/Java%E5%B8%B8%E8%A7%81%E5%85%AB%E8%82%A1/"/>
    <url>/2025/08/26/Java%E5%B8%B8%E8%A7%81%E5%85%AB%E8%82%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Java常见八股"><a href="#Java常见八股" class="headerlink" title="Java常见八股"></a><strong>Java常见</strong>八股</h1><h2 id="一、Java-基础-Java-Basics"><a href="#一、Java-基础-Java-Basics" class="headerlink" title="一、Java 基础 (Java Basics)"></a><strong>一、Java 基础 (Java Basics)</strong></h2><h3 id="1-接口-Interface-vs-抽象类-Abstract-Class"><a href="#1-接口-Interface-vs-抽象类-Abstract-Class" class="headerlink" title="1. 接口 (Interface) vs 抽象类 (Abstract Class)"></a><strong>1. 接口 (Interface) vs 抽象类 (Abstract Class)</strong></h3><p><strong>面试官：</strong> 说一下接口和抽象类的区别。</p><p><strong>我：</strong><br>好的，接口和抽象类主要有以下几个核心区别：</p><ol><li><strong>设计目的不同</strong>：抽象类描述的是 <strong>“is-a”</strong> 关系，强调类的本质是什么，比如 <code>Manager</code> 是一个 <code>Employee</code>。而接口描述的是 <strong>“has-a” 或 “can-do”</strong> 关系，强调类具备什么能力，比如 <code>Bird</code> 可以 <code>Fly</code>。</li><li><strong>方法实现</strong>：抽象类可以有抽象方法，也可以有实现了的具体方法，用于代码复用。在JDK 8之前，接口只能有抽象方法；JDK 8之后，接口可以拥有默认方法（<code>default</code>）和静态方法（<code>static</code>）。</li><li><strong>成员变量</strong>：抽象类中的变量可以是普通的，也可以是常量。而接口中定义的变量默认都是 <code>public static final</code> 的常量。</li><li><strong>构造方法</strong>：抽象类有构造方法，虽然不能实例化自己，但可以供子类初始化时调用。接口没有构造方法。</li><li><strong>继承性</strong>：这是最关键的差别。Java是单继承，一个类<strong>只能继承一个</strong>抽象类。但一个类可以<strong>实现多个</strong>接口，从而获得多种能力。</li></ol><p><strong>选用场景</strong>：</p><ul><li>如果需要定义一系列<strong>密切相关</strong>对象的共同模板和行为，优先使用<strong>抽象类</strong>。</li><li>如果需要定义一种<strong>能力或契约</strong>，让<strong>不相关</strong>的类都能拥有，或者需要实现多重继承的效果，就使用<strong>接口</strong>。</li></ul><hr><h3 id="2-单例模式-Singleton-Pattern-与双重检查锁-Double-Checked-Locking"><a href="#2-单例模式-Singleton-Pattern-与双重检查锁-Double-Checked-Locking" class="headerlink" title="2. 单例模式 (Singleton Pattern) 与双重检查锁 (Double-Checked Locking)"></a><strong>2. 单例模式 (Singleton Pattern) 与双重检查锁 (Double-Checked Locking)</strong></h3><p><strong>面试官：</strong> 了解单例模式吗？写一个线程安全的单例。</p><p><strong>我：</strong><br>单例模式的核心是保证一个类在任何情况下都只有一个实例，并提供一个全局访问点。</p><p>实现线程安全的单例有多种方式，比如饿汉式、懒汉式加锁、静态内部类等。其中，<strong>双重检查锁（DCL）</strong> 是一种性能和线程安全兼顾的懒加载方案。</p><p>（如果让写代码，我会写出DCL的代码。但按您要求，这里不做代码展示）</p><p><strong>它的核心思路是：</strong></p><ol><li>将实例引用用 <code>volatile</code> 关键字修饰。</li><li>在 <code>getInstance</code> 方法中，先进行一次判空，如果实例不存在，再进入同步代码块。</li><li>进入同步块后，再进行第二次判空，最后才创建实例。</li></ol><p><strong>面试官：</strong> 为什么这里必须要用 <code>volatile</code> 关键字？</p><p><strong>我：</strong><br><code>volatile</code> 在这里主要作用是<strong>禁止指令重排序</strong>。</p><p><code>instance = new Singleton()</code> 这行代码不是一个原子操作，它分为三步：1.分配内存、2.初始化对象、3.将引用指向内存地址。JVM可能对步骤2和3进行重排序。</p><p>如果没有 <code>volatile</code>，可能发生：线程A执行了1和3，此时 <code>instance</code> 不为null，但对象还未初始化（步骤2未执行）。这时线程B进来判断 <code>instance</code> 不为null，就直接返回了一个<strong>半成品对象</strong>去使用，从而导致错误。</p><p><code>volatile</code> 通过内存屏障禁止了这种重排序，保证了对象的初始化完成在前，引用赋值在后，从而解决了这个隐蔽的问题。</p><p><strong>其他实现方式的对比：</strong></p><ul><li><strong>饿汉式</strong>：最简单，线程安全，但不是懒加载，可能造成资源浪费。</li><li><strong>同步方法懒汉式</strong>：线程安全，但锁粒度太大，性能差。</li><li><strong>静态内部类</strong>：我个人认为是最优雅的实现之一。它利用类加载机制保证了线程安全，且实现了懒加载，无需加锁，性能高。</li><li><strong>枚举</strong>：最安全的方式，不仅能避免多线程问题，还能防止反射和反序列化破坏单例。</li></ul><h2 id="二、Java-集合框架-Java-Collections-Framework"><a href="#二、Java-集合框架-Java-Collections-Framework" class="headerlink" title="二、Java 集合框架 (Java Collections Framework)"></a><strong>二、Java 集合框架 (Java Collections Framework)</strong></h2><h4 id="1-HashMap-深度解析"><a href="#1-HashMap-深度解析" class="headerlink" title="1. HashMap 深度解析"></a><strong>1. HashMap 深度解析</strong></h4><p><strong>面试官：</strong> 能详细说说 HashMap 的实现原理吗？</p><p><strong>我：</strong><br>好的。HashMap 的核心实现是“数组 + 链表 + 红黑树”。</p><hr><p><strong>面试官：</strong> 具体讲讲它的数据结构？</p><p><strong>我：</strong></p><ol><li><strong>数据结构</strong>：<ul><li>底层是一个 <code>Node&lt;K,V&gt;[] table</code> 数组。</li><li>数组的每个位置称为一个“桶”（bucket）。存入时，根据 key 的 hash 值计算出数组下标。</li><li>如果不同的 key 落到了同一个桶里（哈希冲突），就用链表来存储。</li><li>当链表长度超过阈值（默认为8），并且数组总长度达到一定规模（默认为64）时，链表会转换为红黑树。</li><li>当树节点数小于阈值（默认为6）时，红黑树会退化成链表。</li></ul></li></ol><hr><p><strong>面试官：</strong> 为什么要引入红黑树？</p><p><strong>我：</strong></p><ol start="2"><li><strong>引入红黑树的原因</strong>：</li></ol><p>- 解决极端情况下（例如大量数据哈希冲突），链表过长导致的查询效率从 O(1) 退化为 O(n) 的问题。<br>- 红黑树是一种自平衡的二叉查找树，能将查询、插入、删除的时间复杂度控制在 O(log n)，保证了性能下限。</p><hr><p><strong>面试官：</strong> HashMap 什么时候扩容？怎么扩？</p><p><strong>我：</strong></p><ol start="3"><li><strong>扩容机制（Rehashing）</strong>：</li></ol><p>- 当元素数量超过 <code>容量 * 负载因子</code>（默认0.75）时，数组会进行扩容（通常扩为原来的2倍）。<br>- 扩容后，所有元素需要重新计算在新数组中的位置，这是一个比较耗时的操作。</p><hr><p><strong>面试官：</strong> 为什么 HashMap 的长度总是2的幂次方？</p><p><strong>我：</strong></p><ol start="4"><li><strong>长度为何是2的幂次方</strong>：</li></ol><p>- 为了高效地通过 <code>(n - 1) &amp; hash</code> 计算 key 的索引位置。<br>- <code>&amp;</code> 操作比取模运算 <code>%</code> 效率高得多。当数组长度 n 为 2 的幂时，<code>(n - 1) &amp; hash</code> 等价于 <code>hash % n</code>，但效率更高，同时能保证计算结果均匀分布。</p><hr><p><strong>面试官：</strong> 从 JDK7 到 JDK8，HashMap 在解决冲突时有什么重要变化？</p><p><strong>我：</strong></p><ol start="5"><li><strong>JDK7头插法 -&gt; JDK8尾插法</strong>：</li></ol><p>- <strong>JDK7</strong> 使用头插法，认为新插入的元素更可能被马上访问。但在多线程扩容时，头插法会改变链表的顺序，可能导致<strong>形成环形链表</strong>，引起死循环和数据丢失。<br>- <strong>JDK8</strong> 改为尾插法，扩容时链表元素顺序不变，解决了这个潜在问题。（但HashMap本身仍非线程安全，只是解决了这个特定的死循环Bug）。</p><hr><p><strong>面试官：</strong> 为什么选择这种链表和红黑树结合的方式？</p><p><strong>我：</strong></p><ol start="6"><li><strong>为何采用链表+红黑树</strong>：</li></ol><p>- 这是一种在<strong>空间</strong>和<strong>时间</strong>上的权衡。<br>- 链表结构简单，占用内存少，但在节点多时性能差。<br>- 红黑树性能好，但结构复杂，占用内存更多。<br>- 这种设计保证了在绝大多数冲突较少的情况下使用高效的链表，仅在少数冲突严重时转为红黑树，以空间换时间，达到整体最优。</p><h3 id="2-ArrayList-vs-LinkedList"><a href="#2-ArrayList-vs-LinkedList" class="headerlink" title="2. ArrayList vs LinkedList"></a><strong>2. ArrayList vs LinkedList</strong></h3><p><strong>面试官：</strong> 对比一下 ArrayList 和 LinkedList。</p><p><strong>我：</strong><br>好的。它们核心区别在于底层数据结构和由此带来的性能差异。</p><ol><li><strong>底层结构</strong>：<ul><li><strong>ArrayList</strong> 基于<strong>动态数组</strong>。内存中是连续的存储空间。</li><li><strong>LinkedList</strong> 基于<strong>双向链表</strong>。内存中是通过节点指针连接的离散存储。</li></ul></li></ol><hr><p><strong>面试官：</strong> 它们在操作效率上有什么不同？</p><p><strong>我：</strong></p><ol start="2"><li><strong>操作效率</strong>：</li></ol><p>- <strong>随机访问 (get&#x2F;set)</strong>：ArrayList 的复杂度是 O(1)，因为它可以通过下标直接计算内存地址。LinkedList 是 O(n)，需要遍历链表。<br>- <strong>头部插入&#x2F;删除</strong>：ArrayList 是 O(n)，因为需要移动后续所有元素。LinkedList 是 O(1)，只需修改指针。<br>- <strong>尾部插入&#x2F;删除</strong>：两者在已知尾节点的情况下都接近 O(1)。ArrayList 在无需扩容时是 O(1)；LinkedList 需要先遍历到尾部（如果没有尾指针记录）是 O(n)，但通常实现会记录尾指针，所以也是 O(1)。<br>- <strong>中间插入&#x2F;删除</strong>：ArrayList 平均需要移动一半元素，是 O(n)。LinkedList 查找位置是 O(n)，但插入&#x2F;删除操作本身是 O(1)。</p><hr><p><strong>面试官：</strong> 它们的内存占用有什么特点？</p><p><strong>我：</strong></p><ol start="3"><li><strong>内存占用</strong>：</li></ol><p>- <strong>ArrayList</strong> 只在数组尾部预留空间，内存利用率高。但扩容时会造成临时浪费。<br>- <strong>LinkedList</strong> 每个元素都需要消耗额外空间存放前后节点的指针，内存开销更大。</p><hr><p><strong>面试官：</strong> 实际开发中如何选择？</p><p><strong>我：</strong></p><ol start="4"><li><strong>适用场景</strong>：</li></ol><p>- 优先选择 <strong>ArrayList</strong>。因为它CPU缓存友好（内存连续），综合性能在大多数读多写少的场景下更好。<br>- 只有在需要频繁在<strong>列表头部或中间</strong>进行插入&#x2F;删除操作时，才考虑使用 <strong>LinkedList</strong>。</p><h3 id="3-ConcurrentHashMap-原理与演进"><a href="#3-ConcurrentHashMap-原理与演进" class="headerlink" title="3. ConcurrentHashMap 原理与演进"></a><strong>3. ConcurrentHashMap 原理与演进</strong></h3><p><strong>面试官：</strong> 讲一下 ConcurrentHashMap 的原理，以及它在 JDK7 和 JDK8 的实现有什么不同。</p><p><strong>我：</strong><br>好的。ConcurrentHashMap 是 HashMap 的线程安全版本，它的实现原理在 JDK7 和 JDK8 有重大变化。</p><hr><p><strong>面试官：</strong> 先说下 JDK7 是怎么实现的？</p><p><strong>我：</strong></p><ol><li><strong>JDK7分段锁实现 (Segment Locking)</strong>：<ul><li>它内部有一个 <strong>Segment</strong> 数组，每个 Segment 本质上就是一个独立的、继承了 ReentrantLock 的 HashEntry[] 数组（一个小HashMap）。</li><li><strong>“分段锁”</strong> 的思想是：锁不再针对整个Map，而是只锁住其中一个 Segment。这样，不同 Segment 的读写操作可以完全并行，大大提升了并发度。</li><li>默认有 16 个 Segment，所以理论上最多可以支持 16 个线程同时写入。</li></ul></li></ol><hr><p><strong>面试官：</strong> 那 JDK8 呢？为什么又改了？</p><p><strong>我：</strong></p><ol start="2"><li><strong>JDK8 CAS + synchronized 实现</strong>：</li></ol><p>- JDK8 抛弃了 Segment 分段锁的概念，它的底层数据结构变得和 HashMap 一样，是 <strong>Node[] 数组 + 链表 + 红黑树</strong>。<br>- 实现线程安全的方式更加细化：<br>- <strong>CAS (无锁算法)</strong>：用于初始化数组、向桶中插入节点（当桶为空时）等无竞争场景，性能极高。<br>- <strong>synchronized (同步锁)</strong>：当发生哈希冲突，需要操作链表或红黑树时，则只<strong>锁住当前发生冲突的桶（链表头节点&#x2F;树根节点）</strong>。锁的粒度从 JDK7 的一个 Segment（管着很多桶）缩小到了一个桶，并发度更高。<br>- 这种设计结合了 CAS 的高性能和 synchronized 的稳定性，并且在锁粒度上做到了极致。</p><hr><p><strong>面试官：</strong> 从 JDK7 到 JDK8 这次升级主要带来了哪些好处？</p><p><strong>我：</strong></p><ol start="3"><li><strong>JDK7 到 JDK8 的升级</strong>：</li></ol><p>- <strong>锁粒度更小</strong>：从锁一段（Segment）到锁一桶（Bucket），并发性能得到极大提升。<br>- <strong>数据结构优化</strong>：引入了红黑树，解决了链表过长时查询慢的问题，保证了最坏情况下的性能。<br>- <strong>API 增强</strong>：提供了更多方便的流式 API（如 <code>forEach</code>, <code>reduce</code>）。<br>- <strong>代码更简化</strong>：移除了复杂的 Segment 结构，底层实现变得更简洁、更统一（和 HashMap 类似），更易于维护和理解。</p><h2 id="三、Java-并发编程-Java-Concurrency"><a href="#三、Java-并发编程-Java-Concurrency" class="headerlink" title="三、Java 并发编程 (Java Concurrency)"></a><strong>三、Java 并发编程 (Java Concurrency)</strong></h2><h4 id="1-乐观锁与悲观锁"><a href="#1-乐观锁与悲观锁" class="headerlink" title="1. 乐观锁与悲观锁"></a><strong>1. 乐观锁与悲观锁</strong></h4><p><strong>面试官：</strong> 说说你对乐观锁和悲观锁的理解。</p><p><strong>我：</strong><br>好的，这是两种不同的并发控制策略。</p><ol><li><strong>悲观锁</strong>：<ul><li><strong>思想</strong>：认为并发冲突是<strong>大概率事件</strong>，每次操作数据时，都假定别人会修改，所以先加锁再操作。</li><li><strong>实现</strong>：<code>synchronized</code> 关键字、<code>ReentrantLock</code> 等。</li><li><strong>类比</strong>：就像“写文档时先锁门”，防止别人打扰。</li></ul></li><li><strong>乐观锁</strong>：<ul><li><strong>思想</strong>：认为并发冲突是<strong>小概率事件</strong>，每次操作数据时，不会先加锁，而是在更新时判断此期间数据是否被他人修改过。</li><li><strong>实现</strong>：通常使用 <strong>CAS</strong> (Compare-And-Swap) 算法或版本号机制。</li><li><strong>类比</strong>：就像“写文档时不锁门”，提交时才检查有没有人动过原稿，没动过就提交，动了就放弃或重试。</li></ul></li></ol><p><strong>适用场景</strong>：</p><ul><li><strong>悲观锁</strong>：适合<strong>写多读少</strong>的场景，冲突严重时性能高。</li><li><strong>乐观锁</strong>：适合<strong>读多写少</strong>的场景，冲突少时性能远高于悲观锁，能减少上下文切换。</li></ul><h3 id="2-CAS-原理与原子类实现"><a href="#2-CAS-原理与原子类实现" class="headerlink" title="2. CAS 原理与原子类实现"></a><strong>2. CAS 原理与原子类实现</strong></h3><p><strong>面试官：</strong> 讲一下 CAS 的原理。</p><p><strong>我：</strong></p><ol><li><strong>CAS实现原理</strong>：<ul><li>CAS 的全称是 <code>Compare-And-Swap</code>，即<strong>比较并交换</strong>。它是一个<strong>CPU原子指令</strong>，保证了操作的原子性。</li><li>操作包含三个操作数：<strong>内存地址 V</strong>、<strong>旧的预期值 A</strong>、<strong>要更新的新值 B</strong>。</li><li><strong>原理</strong>：当且仅当内存地址 V 中的当前值等于预期值 A 时，处理器才会自动将地址 V 的值更新为新值 B，否则什么都不做。整个操作是一个原子操作。</li></ul></li></ol><hr><p><strong>面试官：</strong> CAS 有什么优缺点？</p><p><strong>我：</strong><br><strong>优点</strong>：</p><ul><li><strong>高性能</strong>：它是一种无锁操作，避免了传统互斥锁（如 <code>synchronized</code>）带来的线程阻塞、上下文切换的开销，在低竞争环境下性能很高。</li></ul><p><strong>缺点</strong>：</p><ul><li><strong>ABA 问题</strong>：这是最经典的缺点。一个线程读取内存值为 A，此时另一个线程将值改为 B，然后又改回 A。等第一个线程执行 CAS 时，发现值还是 A，于是操作成功，但它并不知道这个 A 已经被“中间修改过”了。</li><li><strong>循环时间长开销大</strong>：如果 CAS 操作长时间不成功（竞争激烈），CPU 会一直进行自旋（循环重试），消耗资源。</li><li><strong>只能保证一个共享变量的原子操作</strong>：对于多个共享变量，CAS 无法保证原子性，可能需要加锁。</li></ul><hr><p><strong>面试官：</strong> 那怎么解决 ABA 问题呢？</p><p><strong>我：</strong></p><ul><li>可以通过给数据加上<strong>版本号（Stamp）</strong> 或时间戳来解决。</li><li>Java 提供了 <code>AtomicStampedReference</code> 类。它不仅在比较值，还会比较一个 <code>int</code> 型的版本号标记。任何对值的修改都会使版本号递增，这样即使值从 A 变回 A，版本号也变了，CAS 就会失败。</li></ul><hr><p><strong>面试官：</strong> 原子类（比如 AtomicInteger）是如何利用 CAS 实现的？</p><p><strong>我：</strong></p><ol start="2"><li><strong>原子类实现原理</strong>：</li></ol><p>- 原子类（如 <code>AtomicInteger</code>）内部的核心字段（如 <code>value</code>）都由 <code>volatile</code> 修饰，保证了可见性。<br>- 它们的所有原子性方法（如 <code>getAndIncrement()</code>）内部都调用了 <code>Unsafe</code> 类的 CAS 方法（<code>compareAndSwapInt</code>）。<br>- 以 <code>i++</code> 为例，<code>getAndIncrement()</code> 的实现是一个 <strong>CAS 自旋循环</strong>：先获取当前值，计算新值，然后用 CAS 尝试更新。如果失败（值已被其他线程修改），就重新获取当前值，再次计算和尝试，直到成功为止。</p><h3 id="3-synchronized-与-ReentrantLock-详解"><a href="#3-synchronized-与-ReentrantLock-详解" class="headerlink" title="3. synchronized 与 ReentrantLock 详解"></a><strong>3. synchronized 与 ReentrantLock 详解</strong></h3><p><strong>面试官：</strong> 对比一下 <code>synchronized</code> 和 <code>ReentrantLock</code>。</p><p><strong>我：</strong><br>好的，它们的核心区别如下：</p><ol><li><strong>本质不同</strong>：<code>synchronized</code> 是 <strong>Java 关键字</strong>，由 JVM 底层实现；<code>ReentrantLock</code> 是一个 <strong>Java 类</strong>，基于 AQS 实现。</li><li><strong>锁的释放</strong>：<code>synchronized</code> 在代码块执行完或发生异常时，由 <strong>JVM 自动释放锁</strong>；<code>ReentrantLock</code> 必须手动调用 <code>unlock()</code> 方法释放锁，通常在 <code>finally</code> 块中完成，否则容易造成死锁。</li><li><strong>功能丰富性</strong>：<code>ReentrantLock</code> 功能更丰富。<ul><li><strong>可中断</strong>：<code>lockInterruptibly()</code> 可以响应中断，在等待锁的过程中可以被中断。</li><li><strong>公平锁</strong>：可以选择创建公平锁（先等待的线程先获得锁），<code>synchronized</code> 是非公平锁。</li><li><strong>条件队列</strong>：可以通过 <code>Condition</code> 实现多路通知，更精细地控制线程的等待与唤醒。</li></ul></li><li><strong>灵活性</strong>：<code>synchronized</code> 的加锁和释放锁是固化的；<code>ReentrantLock</code> 可以在方法内加锁，在另一方法内解锁，更灵活。</li><li><strong>锁的实现机制</strong>：<code>synchronized</code> 在 JDK6 后引入了<strong>锁升级</strong>机制来优化性能；<code>ReentrantLock</code> 则通过 AQS 内部的 CAS 自旋来实现。</li></ol><p><strong>选用建议</strong>：</p><ul><li>除非需要 <code>ReentrantLock</code> 的高级功能（如可中断、公平锁、Condition），否则<strong>优先使用 <code>synchronized</code></strong>，因为它的写法更简洁，且由 JVM 维护和优化。</li></ul><hr><p><strong>面试官：</strong> 详细说一下 <code>synchronized</code> 的锁升级流程。</p><p><strong>我：</strong></p><ol start="2"><li><strong>synchronized 的锁升级流程</strong>：</li></ol><p>为了在性能和开销之间取得平衡，JVM 将 <code>synchronized</code> 的锁状态分为4级，并可以<strong>从低到高</strong>进行升级，但<strong>不可降级</strong>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> <span class="hljs-strong">**无锁 (No Lock)**</span>：对象未作为同步锁使用。<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**偏向锁 (Biased Locking)**</span>：<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**目的**</span>：在<span class="hljs-strong">**没有竞争**</span>的情况下，消除同步开销。假设锁总是由同一线程获得。<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**流程**</span>：第一个线程访问同步块时，会通过 CAS 操作将对象头中的 Mark Word 里存储的线程 ID 改为自己的 ID。之后该线程再进入时，只需检查线程 ID 是否匹配，匹配则无需任何同步操作。<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**轻量级锁 (Lightweight Lock)**</span>：<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**触发条件**</span>：当有<span class="hljs-strong">**轻微竞争**</span>（第二个线程来尝试获取锁）时，偏向锁会升级为轻量级锁。<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**流程**</span>：线程会在自己的栈帧中创建一个锁记录（Lock Record），然后通过 <span class="hljs-strong">**CAS**</span> 操作尝试将对象头的 Mark Word 更新为指向该锁记录的指针。如果成功，当前线程就获得了锁。如果失败，会<span class="hljs-strong">**自旋**</span>重试一定次数。<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**重量级锁 (Heavyweight Lock)**</span>：<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**触发条件**</span>：<span class="hljs-strong">**自旋失败**</span>（竞争加剧，线程数多或等待时间长）后，锁会升级为重量级锁。<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**流程**</span>：此时，未获得锁的线程会<span class="hljs-strong">**被挂起**</span>，进入阻塞状态，等待操作系统调度，需要进行用户态到内核态的切换，开销最大。<br></code></pre></td></tr></table></figure><hr><p><strong>面试官：</strong> 什么是 <code>synchronized</code> 的可重入性？</p><p><strong>我：</strong></p><ol start="3"><li><strong>synchronized 的可重入性</strong>：</li></ol><p>- <strong>概念</strong>：指<strong>同一个线程</strong>在执行完外层同步方法&#x2F;块后，再次进入它的内层同步方法&#x2F;块时，<strong>可以直接获得锁</strong>而不会被自己阻塞。<br>- <strong>原理</strong>：JVM 会为每个锁对象维护一个<strong>计数器</strong>和一个<strong>持有者线程标识</strong>。当线程第一次获取锁时，计数器变为1。每次重入，计数器就+1。退出同步块，计数器就-1。直到计数器为0，锁才被真正释放。<br>- <strong>重要性</strong>：可重入性避免了线程死锁自己，是设计同步代码的基础。</p><h3 id="4-volatile-关键字的作用与原理"><a href="#4-volatile-关键字的作用与原理" class="headerlink" title="4. volatile 关键字的作用与原理"></a><strong>4. volatile 关键字的作用与原理</strong></h3><p><strong>面试官：</strong> 讲一下 <code>volatile</code> 关键字的作用和原理。</p><p><strong>我：</strong><br>好的。<code>volatile</code> 是 Java 提供的轻量级同步机制，它主要有两大核心作用：<strong>保证内存可见性</strong> 和 <strong>禁止指令重排序</strong>。</p><hr><p><strong>面试官：</strong> 先解释一下什么是内存可见性，<code>volatile</code> 是如何保证的？</p><p><strong>我：</strong></p><ol><li><strong>内存可见性 (Memory Visibility)</strong>：<ul><li><strong>问题</strong>：根据 Java 内存模型 (JMM)，每个线程有自己的工作内存，用于缓存共享变量的副本。当一个线程修改了共享变量，可能只是先修改了自己的工作内存，未能<strong>立即写回主内存</strong>，导致其他线程读取到的仍然是旧的副本值。</li><li><strong><code>volatile</code> 的作用</strong>：当一个变量被声明为 <code>volatile</code> 后：<ul><li>任何线程<strong>修改</strong>这个变量，都会<strong>立即强制</strong>将新值刷新到主内存。</li><li>任何线程<strong>读取</strong>这个变量，都会<strong>强制</strong>从主内存中重新读取最新的值，使当前工作内存中的副本失效。</li></ul></li><li><strong>原理</strong>：底层是通过<strong>内存屏障</strong> (Memory Barrier) 来实现的。写操作前后会插入屏障，强制将缓存数据刷回主存；读操作前后也会插入屏障，强制使本地缓存失效，从主存拉取新数据。</li></ul></li></ol><hr><p><strong>面试官：</strong> 那禁止指令重排序呢？这又是什么？</p><p><strong>我：</strong></p><ol start="2"><li><strong>禁止指令重排序 (Prevention of Instruction Reordering)</strong>：</li></ol><p>- <strong>问题</strong>：为了提升性能，编译器和处理器常常会<strong>对指令进行重排序</strong>。但在多线程环境下，不恰当的重排序可能会导致程序运行结果与预期不符。（最经典的例子就是双重检查锁单例模式中，<code>instance = new Singleton()</code> 这行代码可能被重排序，导致其他线程拿到一个未初始化完全的对象）。<br>- <strong><code>volatile</code> 的作用</strong>：通过添加<strong>内存屏障</strong>，<code>volatile</code> 关键字禁止了 JVM 和处理器对修饰了 <code>volatile</code> 的变量的<strong>读写操作</strong>与其他指令进行重排序，从而保证了操作的有序性。<br>- <strong>原理</strong>：内存屏障就像一个“栅栏”，告诉编译器和 CPU，必须在这个屏障之前的所有操作都完成后，才能执行屏障之后的操作。</p><p><strong>总结</strong>：<code>volatile</code> 的核心是通过<strong>内存屏障</strong>这一 CPU 指令来实现可见性和有序性。但它<strong>不保证原子性</strong>，像 <code>i++</code> 这种复合操作依然需要加锁或使用原子类。</p><h3 id="5-Java-内存模型-JMM-与-Happens-Before"><a href="#5-Java-内存模型-JMM-与-Happens-Before" class="headerlink" title="5. Java 内存模型 (JMM) 与 Happens-Before"></a><strong>5. Java 内存模型 (JMM) 与 Happens-Before</strong></h3><p><strong>面试官：</strong> 谈谈你对 Java 内存模型 (JMM) 的理解。</p><p><strong>我：</strong><br>好的。JMM 是一个<strong>抽象的概念</strong>，它定义了程序中各种变量（线程共享变量）的访问规则，以及如何在内存中进行读写操作的细节。它屏蔽了底层硬件内存结构的差异，旨在解决多线程下的<strong>可见性</strong>、<strong>原子性</strong>和<strong>有序性</strong>问题。</p><hr><p><strong>面试官：</strong> JMM 是如何抽象内存结构的？</p><p><strong>我：</strong></p><ol><li><p><strong>JMM抽象模型（主内存、工作内存）</strong>：</p><ul><li><strong>主内存 (Main Memory)</strong>：存储所有的共享变量。所有线程都能访问，但速度较慢。</li><li><strong>工作内存 (Working Memory)</strong>：每个线程都有自己的工作内存，可以看作是<strong>CPU高速缓存和寄存器的抽象</strong>。它存储了该线程使用到的共享变量的<strong>副本</strong>。</li><li><strong>交互协议</strong>：JMM 规定了线程如何与主内存进行交互：<ul><li><strong>read</strong>：从主内存读取数据到工作内存。</li><li><strong>load</strong>：将 read 得到的值放入工作内存的变量副本中。</li><li><strong>use</strong>：执行引擎使用工作内存中的变量值。</li><li><strong>assign</strong>：执行引擎将新值赋给工作内存中的变量。</li><li><strong>store</strong>：将工作内存中的变量值传送到主内存。</li><li><strong>write</strong>：将 store 传来的值写入主内存的变量中。</li></ul></li></ul><p>JMM 通过这8种原子操作（还有 lock 和 unlock）来控制主内存与工作内存之间的同步，从而决定一个线程对共享变量的写入何时对另一个线程可见。<strong><code>volatile</code> 的特殊规则就体现在它强制 read&#x2F;load&#x2F;use 和 assign&#x2F;store&#x2F;write 必须连续、按顺序执行</strong>。</p></li></ol><hr><p><strong>面试官：</strong> 什么是指令重排序？它为什么会带来问题？</p><p><strong>我：</strong></p><ol start="2"><li><strong>指令重排序</strong>：</li></ol><p>- <strong>原因</strong>：为了充分发挥 CPU 性能，编译器和处理器常常会在<strong>不改变程序单线程执行结果</strong>的前提下，对指令的执行顺序进行重新排序优化。<br>- <strong>问题</strong>：在<strong>多线程</strong>环境下，这种重排序可能会破坏程序的语义，导致线程执行结果出现不可预测的错误。（例如，双重检查锁单例模式中，由于 <code>new</code> 操作的非原子性可能被重排序，导致其他线程拿到一个未初始化完全的对象引用）。</p><hr><p><strong>面试官：</strong> JMM 如何解决可见性和有序性问题？什么是 Happens-Before 原则？</p><p><strong>我：</strong></p><ol start="3"><li><strong>Happens-Before 原则</strong>：</li></ol><p>- 这是 JMM 最核心的概念。它本质上是一种<strong>可见性保证规则</strong>，用于描述两个操作之间的内存可见性。如果操作 A <strong>Happens-Before</strong> 于操作 B，那么 A 操作所产生的所有内存更改（结果）对 B 操作都是<strong>可见的</strong>。<br>- 它是一些规则的集合，无需任何同步手段就天然具有 Happens-Before 关系：</p><ol><li><strong>程序次序规则</strong>：在一个线程内，书写在前面的操作 Happens-Before 于后面的操作。（注意：这仅指执行结果上的顺序，依然可能被重排序，但重排序后的结果必须与按代码顺序执行的结果一致）。</li><li><strong>监视器锁规则</strong>：对一个锁的 <strong>unlock</strong> 操作 Happens-Before 于后续对这个锁的 <strong>lock</strong> 操作。</li><li><strong>volatile变量规则</strong>：对一个 <code>volatile</code> 变量的<strong>写</strong>操作 Happens-Before 于后续对这个变量的<strong>读</strong>操作。</li><li><strong>线程启动规则</strong>：<code>Thread</code> 对象的 <code>start()</code> 方法调用 Happens-Before 于此线程的任何动作。</li><li><strong>线程终止规则</strong>：线程中的所有操作都 Happens-Before 于其他线程检测到该线程已经终止（如 <code>thread.join()</code> 返回）。</li><li><strong>传递性</strong>：如果 A Happens-Before B，且 B Happens-Before C，那么 A Happens-Before C。</li></ol><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**总结**</span>：Happens-Before 关系并不代表实际执行的时间顺序，而是<span class="hljs-strong">**内存可见性的保证**</span>。它是判断数据是否存在竞争、线程是否安全的主要依据。<br></code></pre></td></tr></table></figure><h3 id="6-AQS-原理浅析"><a href="#6-AQS-原理浅析" class="headerlink" title="6. AQS 原理浅析"></a><strong>6. AQS 原理浅析</strong></h3><p><strong>面试官：</strong> 讲一下 AQS 的核心原理。</p><p><strong>我：</strong><br>好的。AQS (<code>AbstractQueuedSynchronizer</code>) 是 JUC 并发包的核心基础组件，像 <code>ReentrantLock</code>、<code>CountDownLatch</code> 等工具都是基于它实现的。它的核心思想是 <strong>“一个状态位（state）+ 一个FIFO线程等待队列（CLH）”</strong>。</p><hr><p><strong>面试官：</strong> 具体说说 state 和 CLH 队列的作用。</p><p><strong>我：</strong></p><ol><li><strong>AQS核心思想（state、CLH队列）</strong>：<ul><li><strong>状态 (state)</strong>：这是一个由 <code>volatile</code> 修饰的 <code>int</code> 成员变量，表示<strong>共享资源的状态</strong>。具体含义由子类定义，例如：<ul><li>在 <code>ReentrantLock</code> 中，<code>state=0</code> 表示锁未被占用，<code>state&gt;0</code> 表示锁被占用，且数值表示<strong>重入次数</strong>。</li><li>在 <code>Semaphore</code> 中，<code>state</code> 表示<strong>剩余的许可证数量</strong>。</li></ul></li><li><strong>CLH队列</strong>：这是一个虚拟的<strong>双向 FIFO 队列</strong>，用于管理获取资源失败的线程。当线程争抢资源失败时，AQS 会将当前线程及其等待状态等信息构造成一个节点（Node）并加入队尾，然后阻塞该线程（<code>LockSupport.park()</code>）。队列头节点表示当前正持有资源的线程。</li></ul></li></ol><hr><p><strong>面试官：</strong> AQS 是如何基于这个核心思想来实现公平锁的？</p><p><strong>我：</strong></p><ol start="2"><li><strong>如何实现公平锁</strong>：</li></ol><p>- <strong>公平锁</strong> 的核心原则是：<strong>先来后到</strong>，即等待时间最长的线程（队列头节点的后继节点）优先获取资源。<br>- <strong>实现机制</strong>：当一个线程（Thread-A）尝试通过 <code>lock()</code> 方法获取锁时，它的核心逻辑是：</p><ol><li>检查 <code>state</code> 是否为 0（锁是否空闲）。</li><li>在判断锁空闲后，公平锁的实现会<strong>先调用 <code>hasQueuedPredecessors()</code> 方法检查等待队列中是否有其他线程在排队</strong>。</li></ol><p>- 如果队列为空，或者当前线程自己就是队列的头节点（即将被唤醒的下一个），那么它才有资格去用 CAS 竞争锁。<br>- <strong>如果发现队列中有其他线程在等待，那么当前线程会放弃竞争，直接将自己加入队列末尾进行等待</strong>，这就保证了“先来后到”的公平性。<br>- <strong>与非公平锁的区别</strong>：非公平锁（<code>ReentrantLock</code> 的默认方式）在尝试获取锁时，不管队列里有没有线程在等，都会直接去用 CAS 抢锁。抢失败了才入队。这提高了吞吐量但可能导致“插队”现象，造成线程饥饿。</p><h2 id="四、Java-虚拟机-JVM"><a href="#四、Java-虚拟机-JVM" class="headerlink" title="四、Java 虚拟机 (JVM)"></a><strong>四、Java 虚拟机 (JVM)</strong></h2><h4 id="1-JVM-内存区域与分配"><a href="#1-JVM-内存区域与分配" class="headerlink" title="1. JVM 内存区域与分配"></a><strong>1. JVM 内存区域与分配</strong></h4><p><strong>面试官：</strong> 说一下 JVM 的内存区域是如何划分的。</p><p><strong>我：</strong><br>好的。JVM 内存区域主要分为线程共享区和线程私有区。</p><hr><p><strong>面试官：</strong> 线程共享区包含哪些？各自的作用是什么？</p><p><strong>我：</strong></p><ol><li><strong>线程共享区</strong>：<ul><li><strong>堆 (Heap)</strong>：<ul><li><strong>作用</strong>：这是<strong>最大</strong>的一块内存区域，用于存放<strong>对象实例</strong>和<strong>数组</strong>。GC（垃圾回收）主要发生在这里。</li><li><strong>细分</strong>：从垃圾回收角度，可分为新生代 (Young Generation) 和老年代 (Old Generation)。新生代又分为 Eden 区和两个 Survivor区 (S0&#x2F;S1)。</li></ul></li><li><strong>方法区 (Method Area)</strong>：<ul><li><strong>作用</strong>：用于存储已被虚拟机加载的<strong>类信息、常量、静态变量、即时编译器编译后的代码</strong>等数据。</li><li><strong>实现</strong>：在 JDK8 之前，它的实现是“永久代”(PermGen)。在 JDK8 及之后，改为了<strong>元空间 (Metaspace)</strong>，并使用本地内存 (Native Memory) 来实现，大大降低了OOM的风险。</li></ul></li></ul></li></ol><hr><p><strong>面试官：</strong> 那线程私有区呢？</p><p><strong>我：</strong></p><ol start="2"><li><strong>线程私有区</strong>：</li></ol><p>- <strong>虚拟机栈 (VM Stack)</strong>：<br>- <strong>作用</strong>：描述的是 Java <strong>方法执行的内存模型</strong>。每个方法在执行时都会创建一个<strong>栈帧</strong>，用于存储<strong>局部变量表、操作数栈、动态链接、方法出口</strong>等信息。我们常说的“栈内存”就是指这里。<br>- <strong>异常</strong>：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出 <code>StackOverflowError</code>；如果栈可以动态扩展但无法申请到足够内存，则抛出 <code>OutOfMemoryError</code>。<br>- <strong>本地方法栈 (Native Method Stack)</strong>：<br>- <strong>作用</strong>：与虚拟机栈非常相似，区别在于它为虚拟机使用的 <strong>Native 方法</strong>服务。<br>- <strong>程序计数器 (Program Counter Register)</strong>：<br>- <strong>作用</strong>：一块较小的内存空间，可以看作是<strong>当前线程所执行的字节码的行号指示器</strong>。它是唯一一个在 JVM 规范中没有规定任何 <code>OutOfMemoryError</code> 情况的区域。</p><hr><p><strong>面试官：</strong> 你刚才还提到了直接内存，它属于 JVM 内存区域吗？</p><p><strong>我：</strong></p><ol start="3"><li><strong>直接内存 (Direct Memory)</strong>：</li></ol><p>- <strong>不属于</strong> JVM 运行时数据区，也不是 JVM 规范中定义的内存区域。<br>- <strong>作用</strong>：它是由 <code>NIO</code> 的 <code>DirectByteBuffer</code> 引用的内存区域，通常<strong>直接在物理内存上分配</strong>，避免了在 Java 堆和 Native 堆之间来回复制数据，从而能显著提高性能。<br>- <strong>影响</strong>：虽然不受 JVM 内存管理，但其大小也会受到本机总内存的限制。如果各个内存区域的总和大于物理内存限制，动态扩展时可能导致 <code>OutOfMemoryError</code>。</p><h3 id="2-垃圾回收算法与收集器"><a href="#2-垃圾回收算法与收集器" class="headerlink" title="2. 垃圾回收算法与收集器"></a><strong>2. 垃圾回收算法与收集器</strong></h3><p><strong>面试官：</strong> 讲一下 JVM 如何确定一个对象是垃圾？以及有哪些垃圾回收算法。</p><p><strong>我：</strong><br>好的。垃圾回收主要分两步：首先确定对象是否存活（是垃圾），然后进行回收。</p><hr><p><strong>面试官：</strong> 先说下如何确定垃圾。</p><p><strong>我：</strong></p><ol><li><strong>确定垃圾的算法</strong>：<ul><li><strong>引用计数法</strong>：<ul><li><strong>原理</strong>：给对象中添加一个<strong>引用计数器</strong>，每当有一个地方引用它，计数器就加1；当引用失效时，计数器就减1。任何时刻计数器为0的对象就是不可能再被使用的。</li><li><strong>缺点</strong>：它<strong>无法解决对象之间循环引用</strong>的问题（即A引用B，B也引用A，但再无第三方引用它们俩），从而导致内存泄漏。因此，<strong>主流的 Java 虚拟机都没有选用引用计数法</strong>。</li></ul></li><li><strong>可达性分析算法</strong>：<ul><li><strong>原理</strong>：这是 JVM 采用的算法。通过一系列称为 <strong>“GC Roots”</strong> 的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”。如果某个对象到 GC Roots 间<strong>没有任何引用链相连</strong>（即从 GC Roots 到这个对象不可达），则证明此对象是不可能再被使用的。</li><li><strong>哪些对象可以作为 GC Roots</strong>：<ol><li>虚拟机栈（栈帧中的局部变量表）中引用的对象。</li><li>本地方法栈中 JNI（即 Native 方法）引用的对象。</li><li>方法区中类静态属性引用的对象。</li><li>方法区中常量引用的对象。</li><li>Java 虚拟机内部的引用（如基本类型对应的 Class 对象，常驻的异常对象等）。</li><li>被同步锁（synchronized）持有的对象。</li></ol></li></ul></li></ul></li></ol><hr><p><strong>面试官：</strong> 确定了垃圾之后，有哪些回收算法？</p><p><strong>我：</strong></p><ol start="2"><li><strong>回收垃圾的算法</strong>：</li></ol><p>- <strong>标记-清除算法</strong>：<br>- <strong>过程</strong>：分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象。<br>- <strong>缺点</strong>：<strong>效率不高</strong>，且会产生大量<strong>不连续的内存碎片</strong>，导致以后需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次 GC。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> <span class="hljs-strong">**复制算法**</span>：<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**过程**</span>：将可用内存按容量分为大小相等的两块，每次只使用其中一块。当这一块的内存用完了，就将还存活着的对象<span class="hljs-strong">**复制**</span>到另外一块上面，然后再把已使用过的内存空间一次清理掉。<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**优点**</span>：实现简单，运行高效，且没有内存碎片。<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**缺点**</span>：<span class="hljs-strong">**内存代价太高**</span>，可用内存缩小为了原来的一半。<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**应用**</span>：是<span class="hljs-strong">**新生代**</span>垃圾回收的主要算法。商业虚拟机都采用这种算法来回收新生代，但并不是按1:1的比例划分，而是将内存分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 和其中一块 Survivor。<br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**标记-整理算法**</span>：<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**过程**</span>：标记过程与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间的一端移动，然后直接清理掉边界以外的内存。<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**优点**</span>：避免了内存碎片，也避免了复制算法的空间浪费。<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**缺点**</span>：移动存活对象并更新所有引用地址是一项负重操作，需要暂停用户线程（Stop The World）。<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**应用**</span>：主要用于<span class="hljs-strong">**老年代**</span>的垃圾回收。<br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**分代收集算法**</span>：<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**本质**</span>：这不是一种具体的算法，而是一种<span class="hljs-strong">**理论**</span>。当前商业虚拟机的垃圾收集器都采用它。<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**思想**</span>：根据对象存活周期的不同，将 Java 堆划分为<span class="hljs-strong">**新生代**</span>和<span class="hljs-strong">**老年代**</span>，然后根据各个年代的特点采用最适当的收集算法。<br><span class="hljs-bullet">        -</span> 在<span class="hljs-strong">**新生代**</span>中，每次垃圾收集时都有大批对象死去，只有少量存活，那就选用<span class="hljs-strong">**复制算法**</span>，只需要付出少量存活对象的复制成本就可以完成收集。<br><span class="hljs-bullet">        -</span> 在<span class="hljs-strong">**老年代**</span>中，因为对象存活率高、没有额外空间对它进行分配担保，就必须使用<span class="hljs-strong">**标记-清除**</span>或<span class="hljs-strong">**标记-整理**</span>算法来进行回收。<br></code></pre></td></tr></table></figure><h3 id="3-性能调优、OOM与内存泄漏"><a href="#3-性能调优、OOM与内存泄漏" class="headerlink" title="3. 性能调优、OOM与内存泄漏"></a><strong>3. 性能调优、OOM与内存泄漏</strong></h3><p><strong>面试官：</strong> 谈谈JVM调优的目标和常用参数。</p><p><strong>我：</strong><br>好的。JVM调优的核心目标是在<strong>吞吐量</strong>、<strong>延迟</strong>和<strong>内存占用</strong>三者间找到最佳平衡。</p><ol><li><strong>JVM调优目标</strong>：<ul><li><strong>低延迟</strong>：减少 <strong>GC停顿时间</strong>（Stop-The-World），提高应用响应速度，适合Web等交互式应用。</li><li><strong>高吞吐量</strong>：减少GC总耗时，增大<strong>应用运行时间</strong>占比，适合后台计算型任务。</li><li><strong>减少内存占用</strong>：在满足需求的前提下，控制堆内存大小。</li></ul></li><li><strong>常用参数</strong>：<ul><li><strong>-Xms 和 -Xmx</strong>：设置堆的初始大小(<code>-Xms</code>)和最大大小(<code>-Xmx</code>)，通常设为相同值以避免扩容带来的性能抖动。</li><li><strong>-Xmn</strong>：设置新生代大小。整个JVM堆大小 &#x3D; 新生代 + 老年代。</li><li><strong>-XX:SurvivorRatio</strong>：设置Eden区与一个Survivor区的比例（默认为8，即Eden:S0:S1&#x3D;8:1:1）。</li><li><strong>-XX:+UseG1GC</strong>：指定使用G1垃圾收集器。</li><li><strong>-XX:+PrintGC &#x2F; -XX:+PrintGCDetails</strong>：打印GC日志，用于排查。</li><li><strong>-XX:MetaspaceSize 和 -XX:MaxMetaspaceSize</strong>：设置元空间初始大小和最大大小。</li></ul></li></ol><hr><p><strong>面试官：</strong> 什么是逃逸分析？栈上分配又是什么？</p><p><strong>我：</strong></p><ul><li><strong>逃逸分析</strong>：是JIT编译器的一种高级优化技术。它通过分析对象的<strong>作用域</strong>，判断一个对象是否会被外部方法或外部线程所引用。<ul><li><strong>方法逃逸</strong>：对象被作为参数传递给其他方法。</li><li><strong>线程逃逸</strong>：对象被赋值给其他线程可访问的实例变量。</li></ul></li><li><strong>栈上分配</strong>：<ul><li>如果逃逸分析证明一个对象<strong>不会逃逸出方法</strong>，那么这个对象就可以在<strong>栈上分配内存</strong>，而不是在堆上。</li><li><strong>好处</strong>：对象随方法栈帧出栈而自动销毁，<strong>无需垃圾回收器介入</strong>，极大减轻了GC压力，提升了性能。</li></ul></li></ul><hr><p><strong>面试官：</strong> 常见的OutOfMemoryError有哪些？如何排查？</p><p><strong>我：</strong></p><ol start="3"><li><strong>OutOfMemoryError避免与排查</strong>：</li></ol><p>OOM错误有多种类型，每种原因不同：<br>- <strong>Java heap space</strong>：<strong>堆内存溢出</strong>。最常见，原因是对象太多或存在内存泄漏，堆空间不足。<br>- <strong>排查</strong>：使用<code>-XX:+HeapDumpOnOutOfMemoryError</code>参数在OOM时自动生成堆转储文件，然后用<strong>MAT、JProfiler</strong>等工具分析，找到是哪些对象占用了大量内存以及它们的GC Roots引用链。<br>- <strong>Metaspace &#x2F; PermGen space</strong>：<strong>元空间（方法区）溢出</strong>。原因是加载的类过多，如大量动态代理、反射。<br>- <strong>GC overhead limit exceeded</strong>：GC overhead limit exceeded：GC回收效率过低导致的溢出。默认如果超过98%的时间都在做GC并且回收不到2%的堆空间，就会抛出此错误。本质是堆内存太小或内存泄漏。<br>- <strong>Unable to create new native thread</strong>：<strong>无法创建本地线程</strong>。原因是创建的线程数超过系统限制（如Linux的<code>ulimit</code>）或内存不足。</p><hr><p><strong>面试官：</strong> 什么是内存泄漏？举几个常见例子。</p><p><strong>我：</strong></p><ol start="4"><li><strong>内存泄漏概念与常见案例</strong>：</li></ol><p>- <strong>概念</strong>：指程序中已<strong>动态分配的堆内存</strong>由于某种原因<strong>未能被释放</strong>或<strong>无法被释放</strong>，造成系统内存的浪费，最终可能导致OOM。<br>- <strong>它与内存溢出的关系</strong>：<strong>内存泄漏是原因，内存溢出是结果</strong>。持续的泄漏最终会导致溢出。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**常见案例**</span>：<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**缓存泄漏**</span>：使用了无大小限制的缓存（如<span class="hljs-code">`HashMap`</span>作为缓存），对象只放入不取出。应使用<span class="hljs-code">`WeakHashMap`</span>或类似Guava Cache的、具有LRU淘汰机制的缓存。<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**监听器未移除**</span>：向全局集合（如一个静态List）注册了监听器，但在对象不用后没有取消注册，导致集合一直持有对象的引用，无法被回收。<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**数据库连接、文件流未关闭**</span>：这些资源不仅占用内存，还占用系统句柄。<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**内部类持有外部类引用**</span>：非静态内部类会隐式持有外部类的引用。如果这个内部类的实例被一个长生命周期对象引用，就会导致外部类也无法被回收。<br></code></pre></td></tr></table></figure><h2 id="五、Java-多线程-Java-Multithreading"><a href="#五、Java-多线程-Java-Multithreading" class="headerlink" title="五、Java 多线程 (Java Multithreading)"></a><strong>五、Java 多线程 (Java Multithreading)</strong></h2><h4 id="1-线程池核心原理与参数配置"><a href="#1-线程池核心原理与参数配置" class="headerlink" title="1. 线程池核心原理与参数配置"></a><strong>1. 线程池核心原理与参数配置</strong></h4><p><strong>面试官：</strong> 说一下线程池的7个核心参数。</p><p><strong>我：</strong><br>好的。通过 <code>ThreadPoolExecutor</code> 的构造函数，可以看到7个核心参数：</p><ol><li><strong><code>corePoolSize</code></strong>：<strong>核心线程数</strong>。线程池维护的最小线程数量，即使它们处于空闲状态，也不会被回收（除非设置了 <code>allowCoreThreadTimeOut</code>）。</li><li><strong><code>maximumPoolSize</code></strong>：<strong>最大线程数</strong>。线程池允许创建的最大线程数量。</li><li><strong><code>keepAliveTime</code></strong>：<strong>空闲线程存活时间</strong>。当线程数超过 <code>corePoolSize</code> 时，多余的空闲线程在终止前等待新任务的最长时间。</li><li><strong><code>unit</code></strong>：<code>keepAliveTime</code> 参数的<strong>时间单位</strong>。</li><li><strong><code>workQueue</code></strong>：<strong>任务队列</strong>。用于保存等待执行的任务的阻塞队列（如 <code>ArrayBlockingQueue</code>, <code>LinkedBlockingQueue</code>）。</li><li><strong><code>threadFactory</code></strong>：<strong>线程工厂</strong>。用于创建新线程，可以设置线程名、优先级等，便于排查问题。</li><li><strong><code>handler</code></strong>：<strong>拒绝策略</strong>。当线程池和队列都已满时，用于处理新提交任务的策略（如抛出异常、直接丢弃等）。</li></ol><hr><p><strong>面试官：</strong> 描述一下任务提交到线程池后的执行流程。</p><p><strong>我：</strong></p><ol start="2"><li><strong>任务提交流程</strong>：</li></ol><p>当一个新任务被提交 (<code>execute()</code>) 时，流程如下：</p><ol><li>首先，判断当前运行的线程数是否小于 <code>corePoolSize</code>。如果是，则<strong>创建新的核心线程</strong>来执行该任务（即使有其他空闲线程）。</li><li>如果当前线程数已达到 <code>corePoolSize</code>，则尝试将任务<strong>放入工作队列</strong> (<code>workQueue</code>) 等待。</li><li>如果队列<strong>已满</strong>，则判断当前线程数是否小于 <code>maximumPoolSize</code>。如果是，则<strong>创建新的非核心线程</strong>来执行该任务。</li><li>如果线程数也已达到 <code>maximumPoolSize</code>，并且队列已满，则触发<strong>拒绝策略</strong> (<code>handler</code>)。</li></ol><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">**简单记法**：**先核心 -&gt; 再入队 -&gt; 后扩容 -&gt; 最后拒绝**。<br></code></pre></td></tr></table></figure><hr><p><strong>面试官：</strong> 在实际项目中，如何设置核心线程数？</p><p><strong>我：</strong></p><ol start="3"><li><strong>核心参数计算</strong>：</li></ol><p>这是一个经验值，需要根据任务类型是 <strong>CPU密集型</strong> 还是 <strong>IO密集型</strong> 来调整。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> <span class="hljs-strong">**CPU密集型**</span>：<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**特点**</span>：任务主要消耗CPU资源，需要进行大量计算（例如，计算圆周率、视频编码）。<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**设置**</span>：线程数不宜过多，通常设置为 <span class="hljs-strong">**`CPU核心数 + 1`**</span>。设置过多会导致大量的线程上下文切换，反而降低性能。<br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**IO密集型**</span>：<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**特点**</span>：任务大部分时间在等待IO操作（如数据库查询、网络请求、文件读写），CPU空闲。<br><span class="hljs-bullet">    -</span> <span class="hljs-strong">**设置**</span>：线程数可以设置得多一些，以充分利用CPU资源。通常可以设置为 <span class="hljs-strong">**`2 * CPU核心数`**</span>，或者更高。更精确的估算公式是：<span class="hljs-strong">**`线程数 = CPU核心数 * (1 + 平均等待时间 / 平均计算时间)`**</span>。<br><br><span class="hljs-strong">**注意**</span>：这只是一个理论上的起始值，<span class="hljs-strong">**实际生产中需要通过压测来找到最适合自己应用的参数**</span>。<br></code></pre></td></tr></table></figure><h2 id="六、数据库-Database"><a href="#六、数据库-Database" class="headerlink" title="六、数据库 (Database)"></a><strong>六、数据库 (Database)</strong></h2><h3 id="1-MySQL"><a href="#1-MySQL" class="headerlink" title="1. MySQL"></a><strong>1. MySQL</strong></h3><p><strong>1.1 事务与 ACID 属性</strong></p><p><strong>面试官：</strong> 你先说说 MySQL 的事务和它的 ACID 属性吧。</p><p><strong>我：</strong></p><p>好的。事务是数据库操作的基本单元，它是一个不可分割的工作序列，要么全部执行成功，要么全部执行失败，能保证数据的一致性和完整性。</p><p>事务的 ACID 属性是其核心特性，具体指：</p><ul><li><p><strong>原子性（Atomicity）</strong>：事务中的所有操作要么全部完成，要么全部不完成，不会存在部分执行的情况。比如转账时，“从 A 账户扣钱” 和 “给 B 账户加钱” 这两个操作要么都成功，要么都失败，不会出现 A 扣了钱但 B 没收到的情况。</p></li><li><p><strong>一致性（Consistency）</strong>：事务执行前后，数据库的完整性约束不会被破坏。例如，假设表中有 “总金额 &#x3D; A 账户金额 + B 账户金额” 的约束，转账事务执行后，这个等式依然成立。</p></li><li><p><strong>隔离性（Isolation）</strong>：多个事务并发执行时，一个事务的执行不应被其他事务干扰，每个事务都像在独立执行一样。避免因并发操作导致的数据不一致问题。</p></li><li><p><strong>持久性（Durability）</strong>：一旦事务提交成功，它对数据库中数据的修改就是永久性的，即使之后发生数据库崩溃等故障，修改的数据也不会丢失。</p></li></ul><p><strong>1.2 事务隔离级别与 MVCC 机制</strong></p><p><strong>面试官：</strong> 那事务的隔离级别有哪些？MySQL 的默认隔离级别是什么？MVCC 机制你了解吗？</p><p><strong>我：</strong></p><p>事务隔离级别是为了应对并发事务可能出现的问题（如脏读、不可重复读、幻读）而设定的，主要有 4 种：</p><ul><li><p><strong>读未提交（Read Uncommitted）</strong>：最低的隔离级别。一个事务可以读取到另一个未提交事务修改的数据，可能导致脏读（读取到未提交的无效数据）。</p></li><li><p><strong>读已提交（Read Committed）</strong>：一个事务只能读取到另一个已提交事务修改的数据，解决了脏读问题，但可能出现不可重复读（同一事务中多次读取同一数据，结果因其他事务提交的修改而不同）。</p></li><li><p><strong>可重复读（Repeatable Read）</strong>：MySQL 的默认隔离级别。保证同一事务中多次读取同一数据时，结果一致，解决了不可重复读问题，但在默认情况下可能出现幻读（同一事务中，按同一条件多次查询，结果集行数因其他事务的插入 &#x2F; 删除而变化）。</p></li><li><p><strong>串行化（Serializable）</strong>：最高的隔离级别。事务串行执行，完全避免了并发问题，但性能极低，通常只在数据一致性要求极高且并发量低的场景使用。</p></li></ul><p>MVCC（Multi-Version Concurrency Control，多版本并发控制）是 MySQL 实现读已提交和可重复读隔离级别的核心机制，它通过为数据保存多个版本，让读写操作不相互阻塞，提升并发性能。其实现原理主要涉及<strong>版本链</strong>和<strong>ReadView</strong>：</p><ul><li><p><strong>版本链</strong>：每行数据在被修改时，会生成一个新的版本，旧版本不会被立即删除，而是保留下来并通过隐藏列（如DB_TRX_ID记录修改事务 ID、DB_ROLL_PTR指向旧版本数据）形成链表，即版本链。</p></li><li><p><strong>ReadView</strong>：事务在进行快照读（普通 SELECT 操作）时，会生成一个 ReadView，它包含当前活跃事务的 ID 列表等信息。通过比较数据版本的DB_TRX_ID与 ReadView 中的信息，来判断该版本数据是否可见：若数据版本的事务 ID 不在活跃列表中且小于 ReadView 中的最大事务 ID 等（不同隔离级别下判断逻辑有差异），则数据可见。</p></li></ul><p>读已提交隔离级别下，每次执行 SELECT 都会生成一个新的 ReadView，所以能看到其他事务已提交的修改；可重复读隔离级别下，仅在第一次 SELECT 时生成 ReadView，之后复用该 ReadView，因此能保证同一事务中多次读取结果一致。</p><p><strong>面试官：</strong> 那可重复读级别下是怎么解决幻读的呢？</p><p><strong>我：</strong></p><p>MySQL 的可重复读级别通过 “MVCC 快照读 + Next-Key Lock 当前读” 的组合来解决幻读问题：</p><ul><li><p><strong>MVCC 快照读</strong>：对于普通的 SELECT 查询（快照读），由于复用第一次生成的 ReadView，即使其他事务插入了新数据，新数据的事务 ID 在当前 ReadView 中可能被判定为不可见，因此不会读取到新插入的数据，避免了快照读场景下的幻读。</p></li><li><p><strong>Next-Key Lock 当前读</strong>：对于加锁的查询（如SELECT … FOR UPDATE、UPDATE、DELETE等当前读操作），MySQL 会使用 Next-Key Lock。它是行锁和间隙锁的组合，不仅会锁定符合条件的行，还会锁定这些行所在间隙（即不存在的、可能被插入数据的区间），防止其他事务在间隙中插入新数据，从而避免了当前读场景下的幻读。</p></li></ul><p><strong>1.3 锁机制：间隙锁与临键锁</strong></p><p><strong>面试官：</strong> 聊完隔离级别，再说说 MySQL 的锁机制吧，特别是间隙锁和临键锁。</p><p><strong>我：</strong></p><p>MySQL 的锁机制按粒度可分为表锁、行锁等，行锁是并发控制的关键，而间隙锁和临键锁是行锁的扩展：</p><ul><li><p><strong>间隙锁（Gap Lock）</strong>：锁定的是一个区间，而不是具体的行。当事务对某条记录加锁时，若该记录所在索引区间存在未使用的间隙，会对这些间隙加锁。例如，表中有 id 为 1、3、5 的记录，对 id&#x3D;3 的记录加锁时，可能会锁定 (1,3)、(3,5) 这样的间隙，防止其他事务在这些间隙中插入 id&#x3D;2、4 的记录，主要用于解决幻读。</p></li><li><p><strong>临键锁（Next-Key Lock）</strong>：是行锁和间隙锁的结合，锁定的是 “记录 + 间隙”。它会锁定当前记录以及该记录前面的间隙。比如上述 id&#x3D;3 的例子，临键锁会锁定 (1,3] 这个区间（包含 3 这条记录和 1 到 3 之间的间隙）。在可重复读隔离级别下，MySQL 默认使用临键锁进行当前读操作，当查询条件是唯一索引且精确匹配时，临键锁会降级为行锁。</p></li></ul><p><strong>1.4 索引与优化：回表查询与覆盖索引</strong></p><p><strong>面试官：</strong> 索引相关的，回表查询和覆盖索引你清楚吗？</p><p><strong>我：</strong></p><p>这两个概念和索引的结构密切相关，MySQL 中最常用的索引是 B + 树索引：</p><ul><li><p><strong>回表查询</strong>：B + 树索引分为聚簇索引和非聚簇索引（二级索引）。聚簇索引的叶子节点存储的是完整的行数据，而非聚簇索引的叶子节点存储的是行数据的主键值。当使用非聚簇索引查询数据时，若查询的字段不在非聚簇索引中，需要先通过非聚簇索引找到主键值，再到聚簇索引中根据主键值查找完整的行数据，这个过程就叫回表查询。回表会增加 IO 操作，影响查询效率。</p></li><li><p><strong>覆盖索引</strong>：若查询的所有字段都包含在非聚簇索引中（即非聚簇索引的叶子节点已包含查询所需的全部数据），则不需要回表，直接通过非聚簇索引就能获取到数据，这种索引就是覆盖索引。例如，表有索引idx_name(name)，执行SELECT name, age FROM table WHERE name&#x3D;’xxx’，若age也在idx_name索引中（如联合索引idx_name_age(name, age)），则该索引就是覆盖索引，能避免回表，提升查询效率。</p></li></ul><p><strong>1.5 性能分析：EXPLAIN 与索引失效</strong></p><p><strong>面试官：</strong> 那怎么分析 SQL 性能？索引为什么会失效呢？</p><p><strong>我：</strong></p><p>分析 MySQL SQL 性能最常用的工具是EXPLAIN命令，在 SQL 语句前加上EXPLAIN，执行后会得到查询计划，通过查看各列（如type、key、rows、extra等）的信息，能判断索引是否被使用、查询效率如何：</p><ul><li><p>type：表示访问类型，从好到差有system、const、eq_ref、ref、range、index、ALL等，range及以上通常表示使用了索引，ALL是全表扫描，效率低。</p></li><li><p>key：显示实际使用的索引，若为NULL则未使用索引。</p></li><li><p>rows：预估需要扫描的行数，行数越少越好。</p></li><li><p>extra：包含额外信息，如Using index表示使用了覆盖索引，Using filesort表示需要额外排序（效率低），Using temporary表示使用了临时表（效率低）等。</p></li></ul><p>索引失效的原因有很多，常见的有：</p><ul><li><p>索引列上使用了函数或表达式，如WHERE SUBSTR(name, 1, 1)&#x3D;’a’，会导致索引无法被使用。</p></li><li><p>索引列进行了隐式类型转换，如索引列是varchar类型，查询时用WHERE id&#x3D;123（123 是数字），MySQL 会进行类型转换，导致索引失效。</p></li><li><p>使用NOT IN、!&#x3D;、&lt;&gt;等否定操作符，可能导致索引失效（视情况而定，部分场景下可能使用索引）。</p></li><li><p>LIKE查询以%开头，如WHERE name LIKE ‘%abc’，无法使用索引的前缀匹配，导致索引失效。</p></li><li><p>联合索引未遵循 “最左前缀原则”，即查询条件不包含联合索引的第一个列，如联合索引(a,b,c)，查询WHERE b&#x3D;1 AND c&#x3D;2，会导致索引失效。</p></li><li><p>表中数据量极少，MySQL 认为全表扫描比使用索引更高效，会放弃使用索引。</p></li></ul><p><strong>1.6 日志系统：三大日志解析（undo log、redo log、binlog）</strong></p><p><strong>面试官：</strong> 最后说说 MySQL 的三大日志吧，undo log、redo log、binlog。</p><p><strong>我：</strong></p><p>MySQL 的三大日志在数据一致性、事务恢复、主从复制等方面起着关键作用：</p><ul><li><p><strong>undo log（回滚日志）</strong>：</p></li><li><p><strong>作用</strong>：用于事务回滚和 MVCC。当事务修改数据时，会先将数据的旧版本记录到 undo log 中。若事务需要回滚（如执行ROLLBACK），可以通过 undo log 恢复数据到修改前的状态；同时，undo log 也是 MVCC 中版本链的重要组成部分，供快照读时获取旧版本数据。</p></li><li><p><strong>特点</strong>：是逻辑日志，记录的是 “做了什么操作可以恢复数据”，且会随着事务的提交或回滚被清理。</p></li><li><p><strong>redo log（重做日志）</strong>：</p></li><li><p><strong>作用</strong>：保证事务的持久性。事务执行过程中，对数据的修改会先写入内存的缓冲池，同时将修改操作记录到 redo log（先写 redo log buffer，再刷到磁盘）。若数据库发生崩溃，重启后可以通过 redo log 重新执行已提交的事务操作，恢复数据，避免因内存数据丢失导致的数据不一致。</p></li><li><p><strong>特点</strong>：是物理日志，记录的是 “某个数据页做了什么修改”，采用循环写的方式，有固定大小。</p></li><li><p><strong>binlog（二进制日志）</strong>：</p></li><li><p><strong>作用</strong>：用于主从复制和数据备份恢复。它记录了所有对数据库的修改操作（如INSERT、UPDATE、DELETE等），不记录查询操作。主库将 binlog 发送给从库，从库通过执行 binlog 中的操作实现主从数据同步；同时，若数据库发生故障，可通过 binlog 结合备份恢复到指定时间点的数据。</p></li><li><p><strong>特点</strong>：是逻辑日志，记录的是操作的逻辑（如 “插入一条 id&#x3D;1 的记录”），采用追加写的方式，不会覆盖旧日志，可通过expire_logs_days等参数设置自动清理策略。</p></li></ul><p>三者的配合：事务执行时，先写 undo log，再修改缓冲池数据，同时写 redo log（prepare 阶段），事务提交时，写 binlog，最后将 redo log 标记为提交（commit 阶段），确保数据的一致性和持久性。</p><h3 id="2-Redis"><a href="#2-Redis" class="headerlink" title="2. Redis"></a><strong>2. Redis</strong></h3><p><strong>2.1 核心数据类型与应用场景（String, Hash, List, Set, ZSet 等）</strong></p><p><strong>面试官：</strong> 说说 Redis 的核心数据类型有哪些，各自的应用场景是什么？</p><p><strong>我：</strong></p><p>Redis 的核心数据类型是其基础，常见的有 String、Hash、List、Set、ZSet 这五种，每种都有独特的结构和适用场景：</p><ul><li><p><strong>String（字符串）</strong>：</p></li><li><p><strong>结构</strong>：最基础的数据类型，底层可存储字符串、整数或浮点数，最大能存储 512MB。</p></li><li><p><strong>应用场景</strong>：缓存简单数据（如用户信息 JSON 串）、计数器（用INCR&#x2F;DECR实现点赞数、访问量统计）、分布式锁（通过SETNX命令）、Session 共享等。</p></li><li><p><strong>Hash（哈希）</strong>：</p></li><li><p><strong>结构</strong>：键值对的集合，类似 Java 中的 HashMap，适合存储对象类数据，每个 Hash 可包含最多 2^32-1 个字段。</p></li><li><p><strong>应用场景</strong>：存储用户信息（如user:100为 key，name“age” 等为字段）、商品属性存储等，能只修改对象的某个字段，节省内存和带宽。</p></li><li><p><strong>List（列表）</strong>：</p></li><li><p><strong>结构</strong>：有序的字符串列表，底层是双向链表，支持从两端插入 &#x2F; 删除元素，按索引访问。</p></li><li><p><strong>应用场景</strong>：消息队列（用LPUSH生产消息、RPOP消费消息）、最新消息展示（如朋友圈点赞列表）、排行榜前 N 条数据等。</p></li><li><p><strong>Set（集合）</strong>：</p></li><li><p><strong>结构</strong>：无序且不重复的字符串集合，支持交集、并集、差集等运算。</p></li><li><p><strong>应用场景</strong>：好友关系（如共同好友用交集SINTER）、标签存储（如用户兴趣标签）、去重操作（如 UV 统计）等。</p></li><li><p><strong>ZSet（有序集合）</strong>：</p></li><li><p><strong>结构</strong>：在 Set 基础上给每个元素关联一个分数（score），按分数排序，元素唯一但分数可重复。</p></li><li><p><strong>应用场景</strong>：排行榜（如游戏积分排名用ZREVRANGE）、带权重的消息队列、范围查询（如查询分数在 80-100 的用户）等。</p></li></ul><p><strong>2.2 缓存问题：穿透、击穿、雪崩及解决方案</strong></p><p><strong>面试官：</strong> Redis 作为缓存时，常见的缓存穿透、击穿、雪崩问题怎么解决？</p><p><strong>我：</strong></p><p>这三类问题都是缓存使用中可能遇到的并发或数据一致性问题，具体及解决方案如下：</p><ul><li><p><strong>缓存穿透</strong>：</p></li><li><p><strong>问题</strong>：查询不存在的数据（如用户查 id&#x3D;-1 的用户），缓存和数据库都无结果，请求直接打向数据库，大量此类请求会压垮数据库。</p></li><li><p><strong>解决方案</strong>：① 空值缓存，对不存在的 key 缓存空值（设较短过期时间，避免占用内存）；② 布隆过滤器，在缓存前加布隆过滤器，先判断 key 是否存在，不存在直接返回，过滤无效请求；③ 接口层校验，对非法参数（如 id 为负）直接拦截。</p></li><li><p><strong>缓存击穿</strong>：</p></li><li><p><strong>问题</strong>：一个热点 key 突然过期，此时大量并发请求同时访问该 key，缓存未命中，都去查数据库，导致数据库瞬间压力骤增。</p></li><li><p><strong>解决方案</strong>：① 热点 key 永不过期，在业务层不设置过期时间，手动更新；② 互斥锁，缓存未命中时，用分布式锁（如 Redis 的SETNX）保证只有一个线程去查数据库，其他线程等待重试；③ 预热缓存，在高峰前主动加载热点数据到缓存并设合理过期时间。</p></li><li><p><strong>缓存雪崩</strong>：</p></li><li><p><strong>问题</strong>：大量缓存 key 在同一时间过期，或 Redis 集群宕机，导致大量请求穿透到数据库，数据库因压力过大崩溃。</p></li><li><p><strong>解决方案</strong>：① 过期时间随机化，给 key 的过期时间加随机值（如 10±2 秒），避免同时过期；② 多级缓存，用本地缓存（如 Caffeine）+ Redis 缓存，减少 Redis 压力；③ Redis 集群高可用，部署主从 + 哨兵或 Redis Cluster，避免单点故障；④ 限流降级，在数据库前加限流组件（如 Sentinel），超过阈值则降级返回默认数据。</p></li></ul><p><strong>2.3 数据一致性问题与解决方案（Cache-Aside 策略、延迟双删、监听 binlog）</strong></p><p><strong>面试官：</strong> Redis 和数据库如何保证数据一致性？有哪些常用方案？</p><p><strong>我：</strong></p><p>缓存与数据库的数据一致性指两者数据保持同步，常用方案需根据业务场景选择：</p><ul><li><p><strong>Cache-Aside 策略（旁路缓存）</strong>：</p></li><li><p><strong>流程</strong>：读操作时，先查缓存，命中直接返回；未命中查数据库，再把数据写入缓存。写操作时，先更数据库，再删除缓存（而非更新缓存，避免多次写缓存浪费资源）。</p></li><li><p><strong>适用场景</strong>：大多数普通业务场景，简单易实现，但可能因删除缓存失败导致不一致（可配合重试机制）。</p></li><li><p><strong>延迟双删</strong>：</p></li><li><p><strong>流程</strong>：写操作时，① 先删除缓存；② 再更新数据库；③ 过一段时间（如 500ms）再次删除缓存。</p></li><li><p><strong>作用</strong>：解决 “更新数据库时，其他线程可能已从旧数据库读数据写入缓存” 的问题，第二次删除可清除可能的旧缓存。</p></li><li><p><strong>适用场景</strong>：并发较高，对一致性要求稍高的场景，需合理设置延迟时间（根据业务耗时调整）。</p></li><li><p><strong>监听 binlog 同步</strong>：</p></li><li><p><strong>流程</strong>：借助数据库的 binlog（如 MySQL 的 binlog），通过中间件（如 Canal）监听 binlog 变化，解析后异步更新或删除 Redis 缓存。</p></li><li><p><strong>优势</strong>：解耦业务代码，可靠性高，适合复杂的更新场景。</p></li><li><p><strong>注意</strong>：异步更新有延迟，需接受短暂的不一致，且需保证中间件的高可用。</p></li></ul><p><strong>2.4 高性能原理：I&#x2F;O 多路复用模型（Reactor 模式、epoll）</strong></p><p><strong>面试官：</strong> Redis 为什么性能高？I&#x2F;O 多路复用模型是怎么回事？</p><p><strong>我：</strong></p><p>Redis 高性能的原因包括基于内存、单线程（避免线程切换开销）等，其中 I&#x2F;O 多路复用模型是关键：</p><ul><li><p><strong>I&#x2F;O 多路复用</strong>：允许单个线程同时监听多个文件描述符（Socket），当某个描述符就绪（如可读、可写）时，通知应用程序处理。Redis 用它解决了单线程下处理多客户端连接的问题，避免了阻塞等待。</p></li><li><p><strong>Reactor 模式</strong>：Redis 的 I&#x2F;O 模型基于 Reactor 模式实现，核心是 “事件驱动”：① 主线程负责监听 Socket，将就绪的事件（如连接、读写）放入事件队列；② 工作线程（Redis 单线程下主线程即工作线程）从队列取事件并处理（如解析命令、执行操作）。</p></li><li><p><strong>epoll</strong>：Redis 在 Linux 下采用 epoll 作为 I&#x2F;O 多路复用的实现（不同系统有差异，如 FreeBSD 用 kqueue），相比 select&#x2F;poll 更高效：① select&#x2F;poll 需轮询所有描述符，epoll 通过回调通知就绪描述符，无轮询开销；② select 支持的描述符数量有限（默认 1024），epoll 无此限制；③ epoll 能精准获取就绪描述符，减少无效操作。</p></li></ul><p>正是 I&#x2F;O 多路复用让 Redis 单线程也能高效处理数万并发连接。</p><p><strong>2.5 实战应用：登录机制与防抖节流实现</strong></p><p><strong>面试官：</strong> Redis 在实战中有哪些典型应用？比如登录和防抖节流怎么用它实现？</p><p><strong>我：</strong></p><p>Redis 在业务中有很多实用场景，登录机制和防抖节流是常见案例：</p><ul><li><p><strong>登录机制实现</strong>：</p></li><li><p><strong>流程</strong>：用户登录成功后，生成唯一 token（如 UUID），以token:xxx为 key，用户信息为 value 存入 Redis（设过期时间，如 2 小时）；客户端后续请求携带 token，服务端查 Redis 验证 token 是否有效，有效则允许访问。</p></li><li><p><strong>扩展</strong>：可结合 Redis 的EXPIRE续期（如用户操作时刷新过期时间），或用DEL实现登出；还能通过SETNX防止同一账号多设备登录（登录时先删旧 token，再存新 token）。</p></li><li><p><strong>防抖节流实现</strong>：</p></li><li><p><strong>防抖（避免重复触发）</strong>：如按钮点击，用 Redis 记录触发时间，规定 “n 秒内再次触发则重置时间”。例：用SET key timestamp NX PX n*1000，若 key 不存在则设置（触发操作），存在则不处理。</p></li><li><p><strong>节流（控制触发频率）</strong>：如接口限流，规定 “n 秒内最多触发 m 次”。例：用INCR key计数，EXPIRE key n设过期时间，若计数≤m 则允许，否则拒绝。</p></li></ul><p><strong>2.6 高可用与持久化：主从同步与 AOF&#x2F;RDB</strong></p><p><strong>面试官：</strong> Redis 如何保证高可用？持久化机制 AOF 和 RDB 有什么区别？</p><p><strong>我：</strong></p><p>高可用涉及主从、持久化等，确保 Redis 不丢失数据且持续可用：</p><ul><li><p><strong>主从同步</strong>：</p></li><li><p><strong>作用</strong>：实现数据备份和读写分离。主库负责写操作，从库通过复制主库数据实现备份，同时可分担读请求。</p></li><li><p><strong>流程</strong>：① 从库连接主库，发送SYNC命令；② 主库生成 RDB 文件并发送给从库，从库加载 RDB 同步全量数据；③ 之后主库将写命令异步发送给从库，从库执行命令保持增量同步。</p></li><li><p><strong>高可用</strong>：配合哨兵（Sentinel），哨兵监控主从节点，主库故障时自动将从库切换为主库，实现故障转移。</p></li><li><p><strong>持久化机制</strong>：</p></li><li><p><strong>RDB</strong>：在指定时间间隔生成数据集的快照（如save 60 1000表示 60 秒内 1000 次修改则触发），将数据写入二进制文件（dump.rdb）。</p></li><li><p><strong>优势</strong>：文件小，恢复速度快；适合全量备份。</p></li><li><p><strong>劣势</strong>：快照间隔内数据可能丢失（如宕机）；生成快照时可能阻塞主线程（用bgsave可异步，但有资源开销）。</p></li><li><p><strong>AOF</strong>：记录所有写命令（如SET、HSET），追加到日志文件（appendonly.aof），恢复时重新执行命令。</p></li><li><p><strong>优势</strong>：数据安全性高（可设appendfsync always实时写入）；日志可读懂，便于排查问题。</p></li><li><p><strong>劣势</strong>：文件大，恢复慢；写命令追加可能影响性能。</p></li><li><p><strong>实际选择</strong>：通常混合使用 AOF+RDB，RDB 用于快速恢复，AOF 弥补 RDB 的数据丢失风险。</p></li></ul><p><strong>2.7 生产优化：大 Key 与热 Key 处理</strong></p><p><strong>面试官：</strong> 生产环境中，Redis 的大 Key 和热 Key 怎么处理？</p><p><strong>我：</strong></p><p>大 Key 和热 Key 会影响 Redis 性能（如大 Key 导致阻塞，热 Key 导致节点过载），需针对性优化：</p><ul><li><p><strong>大 Key 处理</strong>：</p></li><li><p><strong>识别</strong>：用redis-cli –bigkeys命令扫描大 Key（如 String&gt;100MB，Hash&#x2F;List 元素过多）。</p></li><li><p><strong>拆分</strong>：① String 大 Key 拆分为多个小 Key（如user:info拆为user:info:name、user:info:age）；② Hash&#x2F;List 大 Key 按范围拆分（如 Hash 按字段首字母拆分，List 按索引分段）。</p></li><li><p><strong>删除</strong>：大 Key 直接DEL会阻塞线程，用UNLINK（异步删除）或逐步删除（如 List 用LPOP分批删）。</p></li><li><p><strong>热 Key 处理</strong>：</p></li><li><p><strong>识别</strong>：通过监控工具（如 Redis Insight）统计访问频率高的 Key，或根据业务判断（如秒杀商品 ID）。</p></li><li><p><strong>分散存储</strong>：① 给热 Key 加前缀 &#x2F; 后缀（如key:1、key:2），分散到不同 Redis 节点；② 用本地缓存（如应用内存）分担部分请求，减少 Redis 访问。</p></li><li><p><strong>优化缓存</strong>：热 Key 设永不过期，或用主从复制（从库分担读请求），避免单节点压力过大。</p></li></ul><h2 id="七、开发框架-Development-Framework"><a href="#七、开发框架-Development-Framework" class="headerlink" title="七、开发框架 (Development Framework)"></a><strong>七、开发框架 (Development Framework)</strong></h2><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a><strong>SpringBoot</strong></h3><p> <strong>1. 核心思想：IoC (控制反转) 与 DI (依赖注入)</strong></p><p><strong>面试官：</strong> 请说说 SpringBoot 的核心思想 IoC 和 DI 分别是什么，它们之间有什么关系？</p><p><strong>我：</strong></p><p>IoC（Inversion of Control，控制反转）是 Spring 框架的核心思想，它颠覆了传统程序中对象创建和依赖管理的方式：传统方式中，对象由开发者主动通过new关键字创建，依赖关系也由开发者手动维护；而在 IoC 思想下，对象的创建权、生命周期管理以及依赖关系的组装都交给了 Spring 容器，开发者只需定义对象的需求，由容器 “反向” 将所需对象注入，实现了 “控制权从开发者到容器的转移”。</p><p>DI（Dependency Injection，依赖注入）是 IoC 的具体实现方式。当一个对象需要依赖另一个对象时，Spring 容器会主动将被依赖的对象 “注入” 到依赖对象中，无需开发者手动设置。比如在 Service 层中需要 Dao 层对象，只需用@Autowired注解标记，Spring 就会自动将 Dao 实例注入到 Service 中。</p><p>简单来说，IoC 是设计思想，DI 是实现该思想的手段，二者相辅相成，共同降低了组件间的耦合度，让代码更易维护和扩展。</p><p><strong>2. 进阶特性：循环依赖解决机制（三级缓存）</strong></p><p><strong>面试官：</strong> SpringBoot 是如何解决 Bean 之间的循环依赖问题的？三级缓存在这里起到了什么作用？</p><p><strong>我：</strong></p><p>循环依赖指的是两个或多个 Bean 之间互相依赖，比如 A 依赖 B，B 又依赖 A。Spring 通过三级缓存机制来解决单例 Bean 的循环依赖问题，核心是提前暴露未初始化完成的 Bean 实例。</p><p>三级缓存具体指 Spring 容器中的三个 Map 结构：</p><ul><li><p><strong>一级缓存（singletonObjects）</strong>：存储已完全初始化完成的单例 Bean，是最终供外部使用的 Bean 实例。</p></li><li><p><strong>二级缓存（earlySingletonObjects）</strong>：存储提前暴露的、已完成实例化但未完成属性注入和初始化的 Bean 实例（半成品 Bean）。</p></li><li><p><strong>三级缓存（singletonFactories）</strong>：存储 Bean 的工厂对象（ObjectFactory），该工厂可以生成 Bean 的早期代理对象或原始实例。</p></li></ul><p>解决循环依赖的流程以 A 和 B 循环依赖为例：</p><ol><li><p>容器创建 A 时，先实例化 A（完成构造方法调用），然后将 A 的工厂对象放入三级缓存。</p></li><li><p>A 需要注入 B，容器开始创建 B，同样先实例化 B，将 B 的工厂对象放入三级缓存。</p></li><li><p>B 需要注入 A，容器先查一级缓存（无 A），再查二级缓存（无 A），最后查三级缓存，通过 A 的工厂对象获取 A 的早期实例，将 A 从三级缓存移到二级缓存，然后将 A 注入到 B 中。</p></li><li><p>B 完成属性注入和初始化，成为完整 Bean，放入一级缓存，之后将 B 注入到 A 中。</p></li><li><p>A 完成属性注入和初始化，放入一级缓存，循环依赖解决。</p></li></ol><p>三级缓存的关键作用是应对 Bean 被 AOP 代理的场景：若 Bean 需要生成代理对象，工厂对象会提前生成代理实例并暴露，避免注入原始实例导致的代理失效问题，二级缓存则用于快速获取提前暴露的实例，减少工厂对象的重复执行。不过三级缓存仅能解决单例 Bean 的循环依赖，原型 Bean（prototype）的循环依赖无法解决，会直接抛出异常。</p><p><strong>3. 面向切面编程：AOP 实现原理（JDK 动态代理 vs CGLIB）</strong></p><p><strong>面试官：</strong> SpringBoot 的 AOP 是如何实现的？JDK 动态代理和 CGLIB 代理有什么区别，Spring 会如何选择？</p><p><strong>我：</strong></p><p>AOP（Aspect-Oriented Programming，面向切面编程）通过将日志、事务、权限控制等通用功能抽取为 “切面”，在不修改业务代码的情况下，通过 “织入” 机制将切面与业务逻辑结合，实现代码复用。Spring AOP 的底层通过动态代理技术实现，主要有 JDK 动态代理和 CGLIB 代理两种方式。</p><p>二者的区别主要体现在实现方式和适用场景上：</p><ul><li><p><strong>JDK 动态代理</strong>：</p></li><li><p>基于 Java 反射机制实现，要求被代理的类必须实现接口，代理对象是接口的实现类。</p></li><li><p>原理是通过Proxy类生成代理实例，代理实例在调用方法时，会回调InvocationHandler中的invoke方法，在该方法中执行切面逻辑和目标方法。</p></li><li><p>优势：JDK 原生支持，无需依赖第三方库，效率较高（在代理逻辑简单时）。</p></li><li><p>局限：只能代理实现了接口的类，无法代理无接口的类。</p></li><li><p><strong>CGLIB 代理</strong>：</p></li><li><p>基于字节码生成技术实现，通过继承被代理类生成子类作为代理对象，无需被代理类实现接口。</p></li><li><p>原理是通过 ASM 框架修改字节码，在子类中重写父类的方法，在重写方法中嵌入切面逻辑和目标方法调用。</p></li><li><p>优势：可代理无接口的类，适用范围更广。</p></li><li><p>局限：若被代理类被final修饰（无法继承），则无法生成代理对象；由于是继承实现，父类的final方法无法被重写，也就无法被增强。</p></li></ul><p>Spring 对代理方式的选择逻辑：</p><ul><li><p>若被代理的类实现了接口，默认使用 JDK 动态代理。</p></li><li><p>若被代理的类未实现接口，默认使用 CGLIB 代理。</p></li><li><p>可通过配置spring.aop.proxy-target-class&#x3D;true强制使用 CGLIB 代理（SpringBoot 2.x 后该配置默认值为 true）。</p></li></ul><p><strong>4. 事务管理：@Transactional 注解失效场景分析</strong></p><p><strong>面试官：</strong> 在 SpringBoot 中使用@Transactional注解时，哪些情况会导致事务失效？</p><p><strong>我：</strong></p><p>@Transactional注解通过 AOP 实现事务管理，但在一些场景下会因不符合 AOP 代理机制或注解生效条件而失效，常见场景有：</p><ol><li><p><strong>非公共方法上使用注解</strong>：@Transactional默认只对公共（public）方法生效，若在 private、protected 或 default 修饰的方法上使用，Spring 不会生成事务代理，注解失效。</p></li><li><p><strong>自身方法调用（内部调用）</strong>：在同一个类中，一个无事务的方法调用另一个有@Transactional注解的方法，由于内部调用不会经过代理对象，事务切面无法生效。例如：</p></li></ol><p>TypeScript取消自动换行复制</p><p>public class Service {</p><p>​    public void methodA() {</p><p>​        methodB(); <em>&#x2F;&#x2F; 内部调用，method<strong>B</strong>的事务失效</em></p><p>​    }</p><p>​    @Transactional</p><p>​    public void methodB() {</p><p>​        <em>&#x2F;&#x2F; 业务逻辑</em></p><p>​    }</p><p>}</p><ol><li><p><strong>异常被捕获未抛出</strong>：事务默认在遇到未捕获的 RuntimeException 或 Error 时回滚，若方法内部捕获了异常且未重新抛出，事务管理器无法感知异常，会认为事务执行成功，导致不回滚。</p></li><li><p><strong>错误的异常类型</strong>：若注解指定了rollbackFor属性（如@Transactional(rollbackFor &#x3D; IOException.class)），但实际抛出的异常不是该类型且未被rollbackFor包含，事务不会回滚；若未指定rollbackFor，checked 异常（如 IOException）默认不会触发回滚。</p></li><li><p><strong>Bean 未被 Spring 管理</strong>：若类未通过@Service、@Component等注解交给 Spring 容器管理，@Transactional注解无法被解析，自然失效。</p></li><li><p><strong>事务传播机制设置不当</strong>：若传播机制设置为PROPAGATION_NOT_SUPPORTED（不支持事务）、PROPAGATION_NEVER（禁止事务）等，会导致当前方法不使用事务；或PROPAGATION_REQUIRES_NEW等在特定场景下因事务嵌套逻辑导致预期外的结果。</p></li></ol><p><strong>5. 设计模式应用（工厂、单例、代理、模板方法等）</strong></p><p><strong>面试官：</strong> SpringBoot 中应用了哪些常见的设计模式？能举例说明吗？</p><p><strong>我：</strong></p><p>SpringBoot 基于 Spring 框架，内部大量应用了设计模式，以下是几种典型模式的应用：</p><ul><li><p><strong>工厂模式</strong>：Spring 的 Bean 创建过程主要依赖工厂模式。BeanFactory是 Bean 工厂的核心接口，负责创建和管理 Bean；DefaultListableBeanFactory等实现类通过读取配置（如注解、XML），根据 Bean 的定义信息生成 Bean 实例，开发者无需关心 Bean 的创建细节，只需通过工厂获取。</p></li><li><p><strong>单例模式</strong>：Spring 容器中的 Bean 默认是单例的（scope 为 singleton），通过一级缓存（singletonObjects）保证一个 Bean 在容器中只有一个实例。容器启动时创建 Bean 并缓存，后续多次获取的都是同一个实例，减少了对象创建的开销。</p></li><li><p><strong>代理模式</strong>：如 AOP 的实现中，JDK 动态代理和 CGLIB 代理都是代理模式的应用。代理对象在目标对象的方法前后嵌入切面逻辑（如事务、日志），既扩展了功能，又不修改目标对象的代码，符合 “开闭原则”。</p></li><li><p><strong>模板方法模式</strong>：在数据访问层（如 JdbcTemplate、RedisTemplate）中大量使用。模板类定义了操作的整体流程（如数据库连接、执行 SQL、关闭连接），将可变的步骤（如 SQL 语句、结果集处理）抽象为抽象方法或通过回调接口让用户实现，避免了重复代码，同时保证流程的一致性。</p></li><li><p><strong>观察者模式</strong>：Spring 的事件驱动模型基于观察者模式。ApplicationEvent是事件源，ApplicationListener是观察者，当事件发布（如ContextRefreshedEvent表示容器刷新完成）时，所有监听该事件的 Listener 会被触发执行，常用于业务解耦（如订单创建后发送通知）。</p></li></ul><p>这些设计模式的应用让 SpringBoot 的架构更灵活、可扩展，也是其能快速集成各类组件的重要原因。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>为了实习说是</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>为了实习说是</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025Lilctf(Crypto)</title>
    <link href="/2025/08/15/2025Lilctf(Crypto)/"/>
    <url>/2025/08/15/2025Lilctf(Crypto)/</url>
    
    <content type="html"><![CDATA[<h1 id="2025Lilctf-Crypto"><a href="#2025Lilctf-Crypto" class="headerlink" title="2025Lilctf(Crypto)"></a>2025Lilctf(Crypto)</h1><h2 id="1-ez-math"><a href="#1-ez-math" class="headerlink" title="1.ez_math"></a>1.<strong>ez_math</strong></h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;LILCTF&#123;test_flag&#125;&#x27;</span>[<span class="hljs-number">7</span>:-<span class="hljs-number">1</span>]<br>lambda1 = bytes_to_long(flag[:<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">2</span>])<br>lambda2 = bytes_to_long(flag[<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">2</span>:])<br>p = getPrime(<span class="hljs-number">512</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">vector, c</span>):<br>    <span class="hljs-keyword">return</span> [vector[<span class="hljs-number">0</span>]*c, vector[<span class="hljs-number">1</span>]*c]<br><br>v1 = [getPrime(<span class="hljs-number">128</span>), getPrime(<span class="hljs-number">128</span>)]<br>v2 = [getPrime(<span class="hljs-number">128</span>), getPrime(<span class="hljs-number">128</span>)]<br><br>A = matrix(GF(p), [v1, v2])<br>B = matrix(GF(p), [mul(v1,lambda1), mul(v2,lambda2)])<br>C = A.inverse() * B<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;C = <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(C).replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;,&quot;</span>).replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>).replace(<span class="hljs-string">&quot;[,&quot;</span>, <span class="hljs-string">&quot;[&quot;</span>)&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># p = 9620154777088870694266521670168986508003314866222315790126552504304846236696183733266828489404860276326158191906907396234236947215466295418632056113826161</span><br><span class="hljs-comment"># C = [7062910478232783138765983170626687981202937184255408287607971780139482616525215270216675887321965798418829038273232695370210503086491228434856538620699645,7096268905956462643320137667780334763649635657732499491108171622164208662688609295607684620630301031789132814209784948222802930089030287484015336757787801],[7341430053606172329602911405905754386729224669425325419124733847060694853483825396200841609125574923525535532184467150746385826443392039086079562905059808,2557244298856087555500538499542298526800377681966907502518580724165363620170968463050152602083665991230143669519866828587671059318627542153367879596260872]</span><br><br><br></code></pre></td></tr></table></figure><p>根据矩阵求flag，跟moe那个有点像</p><p><img src="/2025/08/15/2025Lilctf(Crypto)/image-20250815131251617.png" alt="image-20250815131251617"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-comment"># 已知的p和C矩阵元素</span><br>p = <span class="hljs-number">9620154777088870694266521670168986508003314866222315790126552504304846236696183733266828489404860276326158191906907396234236947215466295418632056113826161</span><br>c11 = <span class="hljs-number">7062910478232783138765983170626687981202937184255408287607971780139482616525215270216675887321965798418829038273232695370210503086491228434856538620699645</span><br>c12 = <span class="hljs-number">7096268905956462643320137667780334763649635657732499491108171622164208662688609295607684620630301031789132814209784948222802930089030287484015336757787801</span><br>c21 = <span class="hljs-number">7341430053606172329602911405905754386729224669425325419124733847060694853483825396200841609125574923525535532184467150746385826443392039086079562905059808</span><br>c22 = <span class="hljs-number">2557244298856087555500538499542298526800377681966907502518580724165363620170968463050152602083665991230143669519866828587671059318627542153367879596260872</span><br><br><span class="hljs-comment"># 在GF(p)域上进行计算</span><br>F = GF(p)<br>c11 = F(c11)<br>c12 = F(c12)<br>c21 = F(c21)<br>c22 = F(c22)<br><br><span class="hljs-comment"># 计算特征方程的系数</span><br>sum_c = c11 + c22<br>product_c = c11 * c22 - c12 * c21<br><br><span class="hljs-comment"># 计算判别式和平方根</span><br>D = sum_c^<span class="hljs-number">2</span> - <span class="hljs-number">4</span> * product_c<br>sqrt_D = D.sqrt()<br><br><span class="hljs-comment"># 计算2的逆元</span><br>inv2 = F(<span class="hljs-number">2</span>)^-<span class="hljs-number">1</span><br><br><span class="hljs-comment"># 求解特征值（λ₁和λ₂）</span><br>lambda1 = <span class="hljs-built_in">int</span>((sum_c + sqrt_D) * inv2)<br>lambda2 = <span class="hljs-built_in">int</span>((sum_c - sqrt_D) * inv2)<br><br><span class="hljs-comment"># 转换为字节</span><br>part1 = long_to_bytes(lambda1)<br>part2 = long_to_bytes(lambda2)<br><br><span class="hljs-comment"># 生成可能的flag（两种组合，因为λ₁和λ₂可能顺序互换）</span><br>flag1 = <span class="hljs-string">b&#x27;LILCTF&#123;&#x27;</span> + part1 + part2 + <span class="hljs-string">b&#x27;&#125;&#x27;</span><br>flag2 = <span class="hljs-string">b&#x27;LILCTF&#123;&#x27;</span> + part2 + part1 + <span class="hljs-string">b&#x27;&#125;&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;可能的flag1:&quot;</span>, flag1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;可能的flag2:&quot;</span>, flag2)<br><br></code></pre></td></tr></table></figure><p>可能的flag1: b’LILCTF{It_w4s_the_be5t_of_times_1t_wa5_the_w0rst_of_t1me5}’<br>可能的flag2: b’LILCTF{1t_wa5_the_w0rst_of_t1me5It_w4s_the_be5t_of_times_}’</p><h2 id="2-linear"><a href="#2-linear" class="headerlink" title="2.linear"></a>2.linear</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> signal<br><br>signal.alarm(<span class="hljs-number">10</span>)<br><br>flag = os.getenv(<span class="hljs-string">&quot;LILCTF_FLAG&quot;</span>, <span class="hljs-string">&quot;LILCTF&#123;default&#125;&quot;</span>)<br><br>nrows = <span class="hljs-number">16</span><br>ncols = <span class="hljs-number">32</span><br><br>A = [[random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">1919810</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ncols)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nrows)]<br>x = [random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">114514</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ncols)]<br><br>b = [<span class="hljs-built_in">sum</span>(A[i][j] * x[j] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ncols)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nrows)]<br><span class="hljs-built_in">print</span>(A)<br><span class="hljs-built_in">print</span>(b)<br><br>xx = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter your solution: &quot;</span>).strip().split()))<br><span class="hljs-keyword">if</span> xx != x:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oh, your linear algebra needs to be practiced.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Bravo! Here is your flag:&quot;</span>)<br>    <span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><p>比较简单的一个线性代数题，但是一般求出来的结果好像不准确，那么我们可以使用格基来求解，问题是要求是10s限制比较麻烦，因为我不会在sagemath连端口，所以就用vscode连接端口，使用sagemath出x，这样的话再复制到交互端口就好了</p><p>sagemath：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 读取文本数据</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;E:/edge下载/CTF/2025LilCTF/Crypto/problem_data.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    data = file.read()<br><br><span class="hljs-comment"># 假设数据的格式是类似于JSON或Python列表的结构</span><br><span class="hljs-comment"># 你可以手动解析文件内容，假设数据格式是这样的：</span><br><span class="hljs-comment"># A = [[...], [...], ...] 和 b = [...], 你可以使用eval()或json.loads()来解析</span><br><span class="hljs-keyword">import</span> ast<br><br><span class="hljs-comment"># 假设 data 中有 A 和 b 的定义</span><br>A = ast.literal_eval(data.split(<span class="hljs-string">&quot;A = &quot;</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot;b = &quot;</span>)[<span class="hljs-number">0</span>].strip())  <span class="hljs-comment"># 提取并解析A</span><br>b = ast.literal_eval(data.split(<span class="hljs-string">&quot;b = &quot;</span>)[<span class="hljs-number">1</span>].strip())  <span class="hljs-comment"># 提取并解析b</span><br><br><span class="hljs-comment"># 之后使用这些数据进行计算</span><br>n = <span class="hljs-number">32</span>  <span class="hljs-comment"># 变量数</span><br>m = <span class="hljs-number">16</span>  <span class="hljs-comment"># 方程数</span><br>W = <span class="hljs-number">2</span>**<span class="hljs-number">40</span>  <span class="hljs-comment"># 权重</span><br><br><span class="hljs-comment"># 构造格基矩阵</span><br>M = matrix(ZZ, n+<span class="hljs-number">1</span>, n+m)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    M[i, i] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        M[i, n+j] = A[j][i] * W  <span class="hljs-comment"># 注意：A是16行32列，所以A[j][i]是第j行第i列</span><br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    M[n, n+j] = b[j] * W<br><br><span class="hljs-comment"># LLL约简（使用更快参数）</span><br>M_lll = M.LLL(delta=<span class="hljs-number">0.99</span>, eta=<span class="hljs-number">0.51</span>)<br><br><span class="hljs-comment"># 寻找解</span><br>solution = <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>):<br>    <span class="hljs-comment"># 检查后m个分量是否全为0</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">all</span>(M_lll[i, n+j] == <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)):<br>        x_sol = [<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(M_lll[i, j])) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-comment"># 将解限制在[1,114514]范围内</span><br>        x_sol = [<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">min</span>(x, <span class="hljs-number">114514</span>)) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> x_sol]<br>        solution = x_sol<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># 如果LLL未找到解，使用伪逆作为备选</span><br><span class="hljs-keyword">if</span> solution <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LLL未找到解，使用伪逆法...&quot;</span>)<br>    A_np = matrix(RDF, A)<br>    b_np = vector(RDF, b)<br>    x_float = A_np.pseudoinverse() * b_np<br>    solution = [<span class="hljs-built_in">int</span>(<span class="hljs-built_in">round</span>(num)) <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> x_float]<br>    solution = [<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">min</span>(x, <span class="hljs-number">114514</span>)) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> solution]<br><br><span class="hljs-comment"># 打印解（复制这个到client.py）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">80</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解x (复制这个到client.py):&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, solution)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">80</span>)<br><br><span class="hljs-comment"># 验证解（可选）</span><br>b_calculated = [<span class="hljs-built_in">sum</span>(A[i][j] * solution[j] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)]<br><span class="hljs-keyword">if</span> b_calculated == b:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;验证成功: Ax = b&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;验证失败: Ax ≠ b&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;原始b: <span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;计算b: <span class="hljs-subst">&#123;b_calculated&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>vscode</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 连接到服务器</span><br>    io = remote(<span class="hljs-string">&quot;challenge.xinshi.fun&quot;</span>, <span class="hljs-number">46755</span>)<br>    <br>    <span class="hljs-comment"># 接收数据直到出现输入提示</span><br>    data = <span class="hljs-string">b&quot;&quot;</span><br>    start_time = time.time()<br>    <span class="hljs-keyword">while</span> <span class="hljs-string">b&quot;Enter your solution:&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>        chunk = io.recv(<span class="hljs-number">1024</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> chunk:<br>            <span class="hljs-keyword">break</span><br>        data += chunk<br>        <br>        <span class="hljs-comment"># 超时检查</span><br>        <span class="hljs-keyword">if</span> time.time() - start_time &gt; <span class="hljs-number">15</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Timeout waiting for data!&quot;</span>)<br>            io.close()<br>            <span class="hljs-keyword">return</span><br>    <br>    <span class="hljs-comment"># 提取并保存矩阵A和向量b</span><br>    A_start = data.find(<span class="hljs-string">b&quot;[[&quot;</span>)<br>    A_end = data.find(<span class="hljs-string">b&quot;]]&quot;</span>) + <span class="hljs-number">2</span><br>    b_start = data.find(<span class="hljs-string">b&quot;[&quot;</span>, A_end)<br>    b_end = data.find(<span class="hljs-string">b&quot;]&quot;</span>, b_start) + <span class="hljs-number">1</span><br>    <br>    A_str = data[A_start:A_end].decode()<br>    b_str = data[b_start:b_end].decode()<br>    <br>    <span class="hljs-comment"># 保存到文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;problem_data.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(<span class="hljs-string">f&quot;A = <span class="hljs-subst">&#123;A_str&#125;</span>\n&quot;</span>)<br>        f.write(<span class="hljs-string">f&quot;b = <span class="hljs-subst">&#123;b_str&#125;</span>\n&quot;</span>)<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;问题数据已保存到 problem_data.txt&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请立即运行SageMath脚本计算解...&quot;</span>)<br>    <br>    <span class="hljs-comment"># 等待用户粘贴解</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n计算完成后，将解x粘贴在这里（空格分隔的32个整数）&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;注意：您有10秒时间完成计算！&quot;</span>)<br>    xx = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>).strip()<br>    <br>    <span class="hljs-comment"># 提交解</span><br>    io.sendline(xx.encode())<br>    <br>    <span class="hljs-comment"># 获取结果</span><br>    <span class="hljs-keyword">try</span>:<br>        result = io.recvall(timeout=<span class="hljs-number">5</span>).decode()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nServer response:&quot;</span>)<br>        <span class="hljs-built_in">print</span>(result)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nTimeout waiting for server response&quot;</span>)<br>    <br>    io.close()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p><img src="/2025/08/15/2025Lilctf(Crypto)/image-20250815171516880.png" alt="image-20250815171516880"></p><p>flag：     LILCTF{60b2bfea-b0f7-4aed-9c94-b2301afd828f}</p><h2 id="3-mid-math"><a href="#3-mid-math" class="headerlink" title="3.mid_math"></a>3.<strong>mid_math</strong></h2><p>原题：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><br>flag = <span class="hljs-string">b&#x27;LILCTF&#123;test_flag&#125;&#x27;</span><br><br>p = getPrime(<span class="hljs-number">64</span>)<br>P = GF(p)<br><br>key = randint(<span class="hljs-number">2</span>**<span class="hljs-number">62</span>, p)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">vector, c</span>):<br>    <span class="hljs-keyword">return</span> [vector[<span class="hljs-number">0</span>]*c, vector[<span class="hljs-number">1</span>]*c, vector[<span class="hljs-number">2</span>]*c, vector[<span class="hljs-number">3</span>]*c, vector[<span class="hljs-number">4</span>]*c]<br><br>v1 = [getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>)]<br>v2 = [getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>)]<br>v3 = [getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>)]<br>v4 = [getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>)]<br>v5 = [getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>)]<br>a, b, c, d, e = getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>),  <span class="hljs-number">0</span><br><br>A = matrix(P, [v1, v2, v3, v4, v5])<br>B = matrix(P, [mul(v1,a), mul(v2,b), mul(v3, c), mul(v4, d), mul(v5, e)])<br>C = A.inverse() * B<br>D = C**key<br><br>key = pad(long_to_bytes(key), <span class="hljs-number">16</span>)<br>aes = AES.new(key,AES.MODE_ECB)<br>msg = aes.encrypt(pad(flag, <span class="hljs-number">64</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;C = <span class="hljs-subst">&#123;[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> C]&#125;</span>&#x27;</span>.replace(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>).replace(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;D = <span class="hljs-subst">&#123;[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> D]&#125;</span>&#x27;</span>.replace(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>).replace(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;msg = <span class="hljs-subst">&#123;msg&#125;</span>&quot;</span>)<br><br><span class="hljs-comment">#p = 14668080038311483271</span><br><span class="hljs-comment">#C = [[11315841881544731102, 2283439871732792326, 6800685968958241983, 6426158106328779372, 9681186993951502212], [4729583429936371197, 9934441408437898498, 12454838789798706101, 1137624354220162514, 8961427323294527914], [12212265161975165517, 8264257544674837561, 10531819068765930248, 4088354401871232602, 14653951889442072670], [6045978019175462652, 11202714988272207073, 13562937263226951112, 6648446245634067896, 13902820281072641413], [1046075193917103481, 3617988773170202613, 3590111338369894405, 2646640112163975771, 5966864698750134707]]</span><br><span class="hljs-comment">#D = [[1785348659555163021, 3612773974290420260, 8587341808081935796, 4393730037042586815, 10490463205723658044], [10457678631610076741, 1645527195687648140, 13013316081830726847, 12925223531522879912, 5478687620744215372], [9878636900393157276, 13274969755872629366, 3231582918568068174, 7045188483430589163, 5126509884591016427], [4914941908205759200, 7480989013464904670, 5860406622199128154, 8016615177615097542, 13266674393818320551], [3005316032591310201, 6624508725257625760, 7972954954270186094, 5331046349070112118, 6127026494304272395]]</span><br><span class="hljs-comment">#msg = b&quot;\xcc]B:\xe8\xbc\x91\xe2\x93\xaa\x88\x17\xc4\xe5\x97\x87@\x0fd\xb5p\x81\x1e\x98,Z\xe1n`\xaf\xe0%:\xb7\x8aD\x03\xd2Wu5\xcd\xc4#m&#x27;\xa7\xa4\x80\x0b\xf7\xda8\x1b\x82k#\xc1gP\xbd/\xb5j&quot;</span><br><br><br><br><br></code></pre></td></tr></table></figure><p>由于 <code>D = C ** key</code>，我们可以利用矩阵的特征值（eigenvalues）来恢复 <code>key</code>：</p><ol><li><strong>计算 <code>C</code> 和 <code>D</code> 的特征值</strong>：<ul><li><code>C</code> 的特征值 <code>eigC</code> 包含 <code>0</code> 和 4 个非零值。</li><li><code>D</code> 的特征值 <code>eigD</code> 包含 <code>0</code> 和 <code>eigC</code> 的非零值的 <code>key</code> 次幂。</li></ul></li><li><strong>过滤掉 <code>0</code>，得到非零特征值</strong>：<ul><li><code>L1 = [x for x in eigC if x != 0]</code></li><li><code>L2 = [x for x in eigD if x != 0]</code></li></ul></li><li><strong>通过离散对数恢复 <code>key</code></strong>：<ul><li>对 <code>L1</code> 和 <code>L2</code> 中的每一对 <code>(x, y)</code>，解 <code>y = x ** key mod p</code>。</li><li>由于 <code>key</code> 的范围是 <code>[2^62, p]</code>，解出的 <code>k</code> 必须满足这个范围。</li></ul></li><li><strong>验证 <code>key</code></strong>：<ul><li>检查是否 <code>&#123;x ** key for x in L1&#125; == set(L2)</code>。</li></ul></li><li><strong>解密 <code>msg</code></strong>：<ul><li>将 <code>key</code> 转为字节，填充到16字节，用AES-ECB解密 <code>msg</code></li></ul></li></ol><p>ai拷打两下就梭出来了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad  <span class="hljs-comment"># Import pad and unpad</span><br><br><span class="hljs-comment"># Given data</span><br>p = <span class="hljs-number">14668080038311483271</span><br>C_list = [<br>    [<span class="hljs-number">11315841881544731102</span>, <span class="hljs-number">2283439871732792326</span>, <span class="hljs-number">6800685968958241983</span>, <span class="hljs-number">6426158106328779372</span>, <span class="hljs-number">9681186993951502212</span>],<br>    [<span class="hljs-number">4729583429936371197</span>, <span class="hljs-number">9934441408437898498</span>, <span class="hljs-number">12454838789798706101</span>, <span class="hljs-number">1137624354220162514</span>, <span class="hljs-number">8961427323294527914</span>],<br>    [<span class="hljs-number">12212265161975165517</span>, <span class="hljs-number">8264257544674837561</span>, <span class="hljs-number">10531819068765930248</span>, <span class="hljs-number">4088354401871232602</span>, <span class="hljs-number">14653951889442072670</span>],<br>    [<span class="hljs-number">6045978019175462652</span>, <span class="hljs-number">11202714988272207073</span>, <span class="hljs-number">13562937263226951112</span>, <span class="hljs-number">6648446245634067896</span>, <span class="hljs-number">13902820281072641413</span>],<br>    [<span class="hljs-number">1046075193917103481</span>, <span class="hljs-number">3617988773170202613</span>, <span class="hljs-number">3590111338369894405</span>, <span class="hljs-number">2646640112163975771</span>, <span class="hljs-number">5966864698750134707</span>]<br>]<br>D_list = [<br>    [<span class="hljs-number">1785348659555163021</span>, <span class="hljs-number">3612773974290420260</span>, <span class="hljs-number">8587341808081935796</span>, <span class="hljs-number">4393730037042586815</span>, <span class="hljs-number">10490463205723658044</span>],<br>    [<span class="hljs-number">10457678631610076741</span>, <span class="hljs-number">1645527195687648140</span>, <span class="hljs-number">13013316081830726847</span>, <span class="hljs-number">12925223531522879912</span>, <span class="hljs-number">5478687620744215372</span>],<br>    [<span class="hljs-number">9878636900393157276</span>, <span class="hljs-number">13274969755872629366</span>, <span class="hljs-number">3231582918568068174</span>, <span class="hljs-number">7045188483430589163</span>, <span class="hljs-number">5126509884591016427</span>],<br>    [<span class="hljs-number">4914941908205759200</span>, <span class="hljs-number">7480989013464904670</span>, <span class="hljs-number">5860406622199128154</span>, <span class="hljs-number">8016615177615097542</span>, <span class="hljs-number">13266674393818320551</span>],<br>    [<span class="hljs-number">3005316032591310201</span>, <span class="hljs-number">6624508725257625760</span>, <span class="hljs-number">7972954954270186094</span>, <span class="hljs-number">5331046349070112118</span>, <span class="hljs-number">6127026494304272395</span>]<br>]<br>msg = <span class="hljs-string">b&quot;\xcc]B:\xe8\xbc\x91\xe2\x93\xaa\x88\x17\xc4\xe5\x97\x87@\x0fd\xb5p\x81\x1e\x98,Z\xe1n`\xaf\xe0%:\xb7\x8aD\x03\xd2Wu5\xcd\xc4#m&#x27;\xa7\xa4\x80\x0b\xf7\xda8\x1b\x82k#\xc1gP\xbd/\xb5j&quot;</span><br><br><span class="hljs-comment"># Set up finite field and matrices</span><br>F = GF(p)<br>C = matrix(F, C_list)<br>D = matrix(F, D_list)<br><br><span class="hljs-comment"># Compute eigenvalues</span><br>eigC = C.eigenvalues()<br>eigD = D.eigenvalues()<br><br><span class="hljs-comment"># Remove zero eigenvalues (one for each matrix)</span><br>L1 = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> eigC <span class="hljs-keyword">if</span> x != F(<span class="hljs-number">0</span>)]<br>L2 = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> eigD <span class="hljs-keyword">if</span> x != F(<span class="hljs-number">0</span>)]<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(L1) != <span class="hljs-number">4</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(L2) != <span class="hljs-number">4</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error: Expected 4 non-zero eigenvalues for both matrices.&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Find key by matching eigenvalues via discrete logarithm</span><br>key_candidate = <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    x0 = L1[i]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        y0 = L2[j]<br>        <span class="hljs-keyword">try</span>:<br>            k0 = discrete_log(y0, x0)  <span class="hljs-comment"># Solve y0 = x0^k0 mod p</span><br>            candidates = []<br>            <span class="hljs-comment"># Check if k0 is in the valid range</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-number">2</span>**<span class="hljs-number">62</span> &lt;= k0 &lt;= p:<br>                candidates.append(k0)<br>            <span class="hljs-comment"># If k0 is too small, try k0 + order of x0</span><br>            <span class="hljs-keyword">if</span> k0 &lt; <span class="hljs-number">2</span>**<span class="hljs-number">62</span>:<br>                ord_val = x0.multiplicative_order()<br>                k1 = k0 + ord_val<br>                <span class="hljs-keyword">if</span> <span class="hljs-number">2</span>**<span class="hljs-number">62</span> &lt;= k1 &lt;= p:<br>                    candidates.append(k1)<br>            <span class="hljs-comment"># Verify candidate keys</span><br>            <span class="hljs-keyword">for</span> k_cand <span class="hljs-keyword">in</span> candidates:<br>                S = <span class="hljs-built_in">set</span>(x**k_cand <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> L1)<br>                <span class="hljs-keyword">if</span> S == <span class="hljs-built_in">set</span>(L2):<br>                    key_candidate = k_cand<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found key: <span class="hljs-subst">&#123;key_candidate&#125;</span>&quot;</span>)<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> key_candidate <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> key_candidate <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> key_candidate <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to find key.&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Decrypt the message using the recovered key</span><br>key_bytes = long_to_bytes(key_candidate)<br><span class="hljs-comment"># Pad the key to 16 bytes for AES</span><br>key_padded = pad(key_bytes, <span class="hljs-number">16</span>)  <span class="hljs-comment"># Now pad is imported</span><br>aes = AES.new(key_padded, AES.MODE_ECB)<br>flag_padded = aes.decrypt(msg)<br>flag = unpad(flag_padded, <span class="hljs-number">64</span>)  <span class="hljs-comment"># Original padding was 64 bytes</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Flag: <span class="hljs-subst">&#123;flag.decode()&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p> key: 5273966641785501202</p><p>flag：LILCTF{Are_y0u_5till_4wake_que5t1on_m4ker!}</p><h2 id="4-Space-Travel"><a href="#4-Space-Travel" class="headerlink" title="4.Space Travel"></a>4.<strong>Space Travel</strong></h2><p>原题：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">from</span> params <span class="hljs-keyword">import</span> vecs<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><br>key = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join([vecs[<span class="hljs-built_in">int</span>.from_bytes(urandom(<span class="hljs-number">2</span>)) &amp; <span class="hljs-number">0xfff</span>] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>)]), <span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;🎁 :&quot;</span>, [[nonce := <span class="hljs-built_in">int</span>(urandom(<span class="hljs-number">50</span>*<span class="hljs-number">2</span>).<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>), (<span class="hljs-built_in">bin</span>(nonce &amp; key).count(<span class="hljs-string">&quot;1&quot;</span>)) % <span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">600</span>)])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;🚩 :&quot;</span>, AES.new(key=md5(<span class="hljs-built_in">str</span>(key).encode()).digest(), nonce=<span class="hljs-string">b&quot;Tiffany&quot;</span>, mode=AES.MODE_CTR).encrypt(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()))<br></code></pre></td></tr></table></figure><p>1.题面逻辑（来自 <code>task.py</code>）</p><ul><li>先从 <code>params.py</code> 里的 <code>vecs</code>（4096 个 16 位二进制串）中，用 12 位随机索引各取 50 次，拼成 50×16 &#x3D; 800 位的二进制串，作为大整数 <code>key</code>。</li><li>接着生成 600 组样本：每组里有一个 800 位随机数 <code>nonce</code>，以及一个比特 <code>parity</code>，它等于 <code>bin(nonce &amp; key)</code> 中 1 的个数的奇偶（即 <code>(nonce · key) mod 2</code> 的内积）。</li><li>最后用 <code>md5(str(key))</code> 作为 AES-CTR 的 key，nonce 固定为 <code>&quot;Tiffany&quot;</code>，加密出密文 <code>🚩</code>。</li></ul><p>2.观测与困难</p><ul><li>600 组样本提供了 600 条线性方程（GF(2) 上的内积），但未知量 <code>key</code> 有 800 个比特，直接解有 200 维自由度，不唯一。</li><li>关键是 <code>key</code> 的结构：它是 50 个 16 位小块的串联，每块都来自 <code>vecs</code>。而 <code>vecs</code> 的 4096 项，其差分集合（取任意一个基准 <code>v0</code>，看 <code>vecs ⊕ v0</code> 的行空间）维度是 <strong>12</strong>。这意味着 <code>vecs</code> 其实是一个 <strong>12 维线性<strong><strong>子空间</strong></strong>的仿射陪集</strong>（coset），大小正好 2^12&#x3D;4096。<ul><li>于是每个 16 位小块都可表示为 <code>v0 ⊕ (B * α)</code>，其中 <code>B</code> 是 12×16 的基矩阵，<code>α</code> 是 12 比特坐标。</li><li>50 个小块 → 一共 50×12 &#x3D; <strong>600 个</strong>未知比特。</li><li>与 600 条线性方程正好匹配！从而把原本 800 维未知，降成 600 维，得到可解的线性系统。</li></ul></li></ul><p>3.建模方式（对齐 bit 顺序很重要！）</p><ul><li>把 <code>vecs</code> 的 16 位字符串视作 <strong>LSB-first</strong>（与 <code>(nonce &amp; key)</code> 的位对齐一致），否则会解出错误的 key。</li><li>设第 <code>t</code> 个小块的未知 12 比特为 <code>α_t</code>。对每条样本方程，有</li><li><code>parity_i = ⊕_t &lt;nonce_chunk_i_t, v0 ⊕ (B * α_t)&gt; ``         = ⊕_t &lt;nonce_chunk_i_t, v0&gt; ⊕ ⊕_t &lt;nonce_chunk_i_t, B * α_t&gt;</code></li><li>把常量项 <code>⊕_t &lt;nonce_chunk_i_t, v0&gt;</code> 移到右边，剩余是关于所有 <code>α_t</code> 的 600×600 线性方程组，直接在 GF(2) 解之即可。</li><li>方程组秩通常是 599（有 1 维自由度），但这 <strong>不影响</strong>：任意解出的 <code>(α_t)</code> 都映射到 <code>v0 ⊕ B*α_t</code>，这个集合刚好就是 <code>vecs</code> 的那个仿射陪集，不会跑出集合之外。对那 1 维自由度，测试两种可能都很快，直接看哪一个能把密文正确解出可读明文（一般是标准 CTF flag）。</li></ul><p>4.解出 key 并还原明文</p><ul><li>用解出来的 50 个 16 位小块拼成 800 位 key（注意保持 LSB-first 与构造一致）。</li><li>取 <code>md5(str(key))</code>（Python 的 <code>str(key)</code> 即十进制串）当 AES-CTR key，nonce 用 <code>b&quot;Tiffany&quot;</code>，解密 <code>🚩</code>。</li><li>能得到清晰的 ASCII flag。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> re, ast, numpy <span class="hljs-keyword">as</span> np, hashlib<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><span class="hljs-comment"># ---- 工具：GF(2) 线性代数 ----</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gf2_rref</span>(<span class="hljs-params">M, rhs=<span class="hljs-literal">None</span></span>):<br>    M = M.copy().astype(np.uint8)<br>    <span class="hljs-keyword">if</span> rhs <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        rhs = rhs.copy().astype(np.uint8)<br>        M = np.concatenate([M, rhs.reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)], axis=<span class="hljs-number">1</span>)<br>    m, n_aug = M.shape<br>    n = n_aug <span class="hljs-keyword">if</span> rhs <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> n_aug - <span class="hljs-number">1</span><br>    row = <span class="hljs-number">0</span><br>    pivots = []<br>    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        pivot = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row, m):<br>            <span class="hljs-keyword">if</span> M[r,col]:<br>                pivot = r; <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> pivot <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> pivot != row:<br>            M[[row,pivot]] = M[[pivot,row]]<br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            <span class="hljs-keyword">if</span> r != row <span class="hljs-keyword">and</span> M[r,col]:<br>                M[r,:] ^= M[row,:]<br>        pivots.append(col)<br>        row += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> row == m: <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> M, pivots<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">int_to_bits_lsb</span>(<span class="hljs-params">n, width</span>):<br>    <span class="hljs-keyword">return</span> np.array([(n&gt;&gt;i) &amp; <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width)], dtype=np.uint8)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bits_to_int</span>(<span class="hljs-params">bits_lsb</span>):<br>    v = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i,b <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(bits_lsb):<br>        <span class="hljs-keyword">if</span> b: v |= (<span class="hljs-number">1</span>&lt;&lt;i)<br>    <span class="hljs-keyword">return</span> v<br><br><span class="hljs-comment"># ---- 读取 vecs（params.py）并转为 LSB-first ----</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;params.py&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,errors=<span class="hljs-string">&#x27;ignore&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    text = f.read()<br>vecs_list = re.findall(<span class="hljs-string">r&quot;&#x27;([01]&#123;16&#125;)&#x27;&quot;</span>, text)<br>vecs = np.array([[<span class="hljs-built_in">int</span>(b) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> s[::-<span class="hljs-number">1</span>]] <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> vecs_list], dtype=np.uint8)  <span class="hljs-comment"># reverse to LSB-first</span><br><br><span class="hljs-comment"># 取一个基向量 v0，并构造差分集合的行空间基 B（12×16）</span><br>v0 = vecs[<span class="hljs-number">0</span>]<br>diffs = (vecs ^ v0) % <span class="hljs-number">2</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gf2_basis_rows</span>(<span class="hljs-params">M</span>):<br>    A = M.copy().astype(np.uint8)<br>    m,n = A.shape<br>    row=<span class="hljs-number">0</span><br>    pivcols=[]<br>    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        pivot=<span class="hljs-literal">None</span><br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row,m):<br>            <span class="hljs-keyword">if</span> A[r,col]:<br>                pivot=r; <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> pivot <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>: <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> pivot!=row: A[[row,pivot]] = A[[pivot,row]]<br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            <span class="hljs-keyword">if</span> r!=row <span class="hljs-keyword">and</span> A[r,col]:<br>                A[r,:] ^= A[row,:]<br>        pivcols.append(col); row+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> row==m: <span class="hljs-keyword">break</span><br>    <span class="hljs-comment"># 抽取基行</span><br>    basis_rows=[]<br>    used=<span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">for</span> lead <span class="hljs-keyword">in</span> pivcols:<br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            <span class="hljs-keyword">if</span> r <span class="hljs-keyword">in</span> used: <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> A[r,lead]==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">all</span>(A[r,c]==<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(lead)):<br>                basis_rows.append(A[r].copy()); used.add(r); <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> np.array(basis_rows, dtype=np.uint8)<br><br>B = gf2_basis_rows(diffs)   <span class="hljs-comment"># 12 x 16</span><br><br><span class="hljs-comment"># ---- 解析样本和密文（output.txt）----</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,errors=<span class="hljs-string">&#x27;ignore&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data = f.read()<br><br>gift_text = re.search(<span class="hljs-string">r&quot;🎁\s*:\s*(\[\[.*?\]\])&quot;</span>, data, flags=re.S).group(<span class="hljs-number">1</span>)<br>cipher_text_literal = re.search(<span class="hljs-string">r&quot;🚩\s*:\s*(b?[&#x27;\&quot;][^&#x27;\&quot;]+[&#x27;\&quot;])|🚩\s*:\s*([0-9a-fA-Fx,\s\[\]]+)&quot;</span>, data).group(<span class="hljs-number">1</span>) \<br>                      <span class="hljs-keyword">or</span> re.search(<span class="hljs-string">r&quot;🚩\s*:\s*(b?[&#x27;\&quot;][^&#x27;\&quot;]+[&#x27;\&quot;])|🚩\s*:\s*([0-9a-fA-Fx,\s\[\]]+)&quot;</span>, data).group(<span class="hljs-number">2</span>)<br><br>gift = ast.literal_eval(gift_text)<br>cipher_literal = ast.literal_eval(cipher_text_literal)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(cipher_literal, <span class="hljs-built_in">bytes</span>):<br>    ct = cipher_literal<br><span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(cipher_literal, <span class="hljs-built_in">list</span>):<br>    ct = <span class="hljs-built_in">bytes</span>(cipher_literal)<br><span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(cipher_literal, <span class="hljs-built_in">str</span>):<br>    ct = <span class="hljs-built_in">bytes</span>.fromhex(cipher_literal)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;Unknown ciphertext!&quot;</span>)<br><br><span class="hljs-comment"># ---- 建立 600×600 线性方程组，未知为 50 个块的 12 比特坐标 ----</span><br>m = <span class="hljs-built_in">len</span>(gift)<br>T = <span class="hljs-number">50</span><br>k = B.shape[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 12</span><br>WIDTH = <span class="hljs-number">16</span>*T<br><br>A2 = np.zeros((m, T*k), dtype=np.uint8)<br>b2 = np.zeros(m, dtype=np.uint8)<br><br><span class="hljs-keyword">for</span> i,(nonce, par) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(gift):<br>    bits = int_to_bits_lsb(nonce, WIDTH)<br>    const = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(T):<br>        chunk = bits[<span class="hljs-number">16</span>*t:<span class="hljs-number">16</span>*(t+<span class="hljs-number">1</span>)]<br>        const ^= (np.dot(chunk, v0) % <span class="hljs-number">2</span>)<br>        <span class="hljs-comment"># 对 α_t（12 维），其系数即 &lt;chunk, B_row&gt;，等价于 (B @ chunk)</span><br>        A2[i, t*k:(t+<span class="hljs-number">1</span>)*k] = (B @ chunk) % <span class="hljs-number">2</span><br>    b2[i] = (par ^ const) % <span class="hljs-number">2</span><br><br><span class="hljs-comment"># ---- 解方程（可能秩 599，尝试两个候选）----</span><br>rref_A2, pivs = gf2_rref(A2, b2)<br>nvar = A2.shape[<span class="hljs-number">1</span>]<br><br>x_alpha = np.zeros(nvar, dtype=np.uint8)<br>row=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nvar):<br>    <span class="hljs-keyword">if</span> row &lt; <span class="hljs-built_in">len</span>(pivs) <span class="hljs-keyword">and</span> pivs[row]==col:<br>        x_alpha[col] = rref_A2[row,-<span class="hljs-number">1</span>]; row+=<span class="hljs-number">1</span><br><br>rrefA_only, pivs_only = gf2_rref(A2, <span class="hljs-literal">None</span>)<br>null = np.zeros(nvar, dtype=np.uint8)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(pivs_only) &lt; nvar:<br>    fcol = [c <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nvar) <span class="hljs-keyword">if</span> c <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> pivs_only][<span class="hljs-number">0</span>]<br>    null[fcol]=<span class="hljs-number">1</span><br>    row=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nvar):<br>        <span class="hljs-keyword">if</span> row &lt; <span class="hljs-built_in">len</span>(pivs_only) <span class="hljs-keyword">and</span> pivs_only[row]==col:<br>            s=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> kcol <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(col+<span class="hljs-number">1</span>, nvar):<br>                <span class="hljs-keyword">if</span> rrefA_only[row,kcol] <span class="hljs-keyword">and</span> null[kcol]:<br>                    s ^= <span class="hljs-number">1</span><br>            null[col]=s%<span class="hljs-number">2</span><br>            row+=<span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_key_bits</span>(<span class="hljs-params">alpha_concat</span>):<br>    blocks=[]<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(T):<br>        alpha_t = alpha_concat[t*k:(t+<span class="hljs-number">1</span>)*k]<br>        vec_t = (v0 ^ (alpha_t @ B) % <span class="hljs-number">2</span>) % <span class="hljs-number">2</span>  <span class="hljs-comment"># LSB-first 16 bits</span><br>        blocks.append(vec_t)<br>    <span class="hljs-keyword">return</span> np.concatenate(blocks)<br><br>cands = [x_alpha, (x_alpha ^ null) % <span class="hljs-number">2</span>]<br><span class="hljs-keyword">for</span> cand <span class="hljs-keyword">in</span> cands:<br>    key_bits = build_key_bits(cand)<br>    key_int = bits_to_int(key_bits)<br>    aes_key = hashlib.md5(<span class="hljs-built_in">str</span>(key_int).encode()).digest()<br>    cipher = AES.new(key=aes_key, nonce=<span class="hljs-string">b&quot;Tiffany&quot;</span>, mode=AES.MODE_CTR)<br>    pt = cipher.decrypt(ct)<br>    <span class="hljs-keyword">try</span>:<br>        s = pt.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;&#123;&quot;</span> <span class="hljs-keyword">in</span> s <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;&#125;&quot;</span> <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;FLAG:&quot;</span>, s)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure><p>flag： LILCTF{Un1qUe_s0luti0n_1N_sUbSp4C3!}</p><h2 id="5-baaaaaag"><a href="#5-baaaaaag" class="headerlink" title="5.baaaaaag"></a>5.<strong>baaaaaag</strong></h2><p>原题：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>p = random.getrandbits(<span class="hljs-number">72</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(p)[<span class="hljs-number">2</span>:]) == <span class="hljs-number">72</span><br><br>a = [getPrime(<span class="hljs-number">90</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">72</span>)]<br>b = <span class="hljs-number">0</span><br>t = p<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    temp = t % <span class="hljs-number">2</span><br>    b += temp * i<br>    t = t &gt;&gt; <span class="hljs-number">1</span><br><br>key = hashlib.sha256(<span class="hljs-built_in">str</span>(p).encode()).digest()<br>cipher = AES.new(key, AES.MODE_ECB)<br>flag = pad(flag,<span class="hljs-number">16</span>)<br>ciphertext = cipher.encrypt(flag)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a = <span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;b = <span class="hljs-subst">&#123;b&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ciphertext = <span class="hljs-subst">&#123;ciphertext&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">a = [965032030645819473226880279, 699680391768891665598556373, 1022177754214744901247677527, 680767714574395595448529297, 1051144590442830830160656147, 1168660688736302219798380151, 796387349856554292443995049, 740579849809188939723024937, 940772121362440582976978071, 787438752754751885229607747, 1057710371763143522769262019, 792170184324681833710987771, 912844392679297386754386581, 906787506373115208506221831, 1073356067972226734803331711, 1230248891920689478236428803, 713426848479513005774497331, 979527247256538239116435051, 979496765566798546828265437, 836939515442243300252499479, 1185281999050646451167583269, 673490198827213717568519179, 776378201435505605316348517, 809920773352200236442451667, 1032450692535471534282750757, 1116346000400545215913754039, 1147788846283552769049123803, 994439464049503065517009393, 825645323767262265006257537, 1076742721724413264636318241, 731782018659142904179016783, 656162889354758353371699131, 1045520414263498704019552571, 1213714972395170583781976983, 949950729999198576080781001, 1150032993579134750099465519, 975992662970919388672800773, 1129148699796142943831843099, 898871798141537568624106939, 997718314505250470787513281, 631543452089232890507925619, 831335899173370929279633943, 1186748765521175593031174791, 884252194903912680865071301, 1016020417916761281986717467, 896205582917201847609656147, 959440423632738884107086307, 993368100536690520995612807, 702602277993849887546504851, 1102807438605649402749034481, 629539427333081638691538089, 887663258680338594196147387, 1001965883259152684661493409, 1043811683483962480162133633, 938713759383186904819771339, 1023699641268310599371568653, 784025822858960757703945309, 986182634512707587971047731, 1064739425741411525721437119, 1209428051066908071290286953, 667510673843333963641751177, 642828919542760339851273551, 1086628537309368288204342599, 1084848944960506663668298859, 667827295200373631038775959, 752634137348312783761723507, 707994297795744761368888949, 747998982630688589828284363, 710184791175333909291593189, 651183930154725716807946709, 724836607223400074343868079, 1118993538091590299721647899]</span><br><span class="hljs-string">b = 34962396275078207988771864327</span><br><span class="hljs-string">ciphertext = b&#x27;Lo~G\xf46&gt;\xd609\x8e\x8e\xf5\xf83\xb5\xf0\x8f\x9f6&amp;\xea\x02\xfa\xb1_L\x85\x93\x93\xf7,`|\xc6\xbe\x05&amp;\x85\x8bC\xcd\xe6?TV4q&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>一个背包密码，解出p就能梭出来了。但是问题是怎么解出p：</p><p>据我已知的背包密码：b是背包容量，a是将要装进背包的物品。p可以由十进制转化为二进制，其中满足a[i],pi。pi只能为0或1,0代表对应的a[i]没有被装进背包，1代表对应的a[i]被装进背包。b会被a装满。</p><p>大概是这个意思，但是列数学表达式得出p的二进制需要线性代数知识。lll算法和bkz规约</p><p>这是deepseek给出的详细：</p><h3 id="如何解出-p？"><a href="#如何解出-p？" class="headerlink" title="如何解出 p？"></a>如何解出 <code>p</code>？</h3><p>为了解决这个问题，我们使用格基归约算法（如 LLL 或 BKZ）。格基归约可以将子集和问题转化为寻找格中的短向量问题。具体步骤如下：</p><ol><li><p><strong>格基构造</strong>：构造一个 <code>(n+1) x (n+1)</code> 的矩阵（<code>n</code> 是 <code>a</code> 的长度），其中：</p><ul><li>前 <code>n</code> 行：对角线元素为 2，最后一列为 <code>a[i]</code>。</li><li>最后一行：前 <code>n</code> 个元素为 1，最后一个元素为 <code>b</code>。</li></ul><p>这种构造确保了解向量 <code>(2*m_0 - 1, 2*m_1 - 1, ..., 2*m_&#123;n-1&#125; - 1, 0)</code> 在格中，其中 <code>m_i</code> 是 <code>p</code> 的二进制位。转换 <code>v_i = 2*m_i - 1</code> 将二进制位映射到 ±1，使得解向量更短且更易识别。</p></li><li><p><strong>格基归约</strong>：使用 BKZ 或 LLL 算法对格基进行归约。BKZ 通常更强（能找到更短的向量），但计算成本更高。如果 BKZ 失败，可以回退到 LLL。</p></li><li><p><strong>搜索解向量</strong>：在归约后的基中搜索满足条件的向量：</p><ul><li>前 <code>n</code> 个坐标为 ±1。</li><li>最后一个坐标为 0（或接近 0，容错处理）。</li></ul><p>如果找到，则从解向量恢复二进制位：<code>m_i = (v_i + 1) / 2</code>。</p></li><li><p><strong>恢复 <code>p</code></strong>：将二进制位组合成整数 <code>p</code>（注意：最低位对应 <code>m_0</code>）。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> Matrix, ZZ<br><br><br><span class="hljs-comment"># --------- 已知参数 ----------</span><br>a = [<span class="hljs-number">965032030645819473226880279</span>, <span class="hljs-number">699680391768891665598556373</span>, <span class="hljs-number">1022177754214744901247677527</span>, <span class="hljs-number">680767714574395595448529297</span>,<br>     <span class="hljs-number">1051144590442830830160656147</span>, <span class="hljs-number">1168660688736302219798380151</span>, <span class="hljs-number">796387349856554292443995049</span>, <span class="hljs-number">740579849809188939723024937</span>,<br>     <span class="hljs-number">940772121362440582976978071</span>, <span class="hljs-number">787438752754751885229607747</span>, <span class="hljs-number">1057710371763143522769262019</span>, <span class="hljs-number">792170184324681833710987771</span>,<br>     <span class="hljs-number">912844392679297386754386581</span>, <span class="hljs-number">906787506373115208506221831</span>, <span class="hljs-number">1073356067972226734803331711</span>, <span class="hljs-number">1230248891920689478236428803</span>,<br>     <span class="hljs-number">713426848479513005774497331</span>, <span class="hljs-number">979527247256538239116435051</span>, <span class="hljs-number">979496765566798546828265437</span>, <span class="hljs-number">836939515442243300252499479</span>,<br>     <span class="hljs-number">1185281999050646451167583269</span>, <span class="hljs-number">673490198827213717568519179</span>, <span class="hljs-number">776378201435505605316348517</span>, <span class="hljs-number">809920773352200236442451667</span>,<br>     <span class="hljs-number">1032450692535471534282750757</span>, <span class="hljs-number">1116346000400545215913754039</span>, <span class="hljs-number">1147788846283552769049123803</span>, <span class="hljs-number">994439464049503065517009393</span>,<br>     <span class="hljs-number">825645323767262265006257537</span>, <span class="hljs-number">1076742721724413264636318241</span>, <span class="hljs-number">731782018659142904179016783</span>, <span class="hljs-number">656162889354758353371699131</span>,<br>     <span class="hljs-number">1045520414263498704019552571</span>, <span class="hljs-number">1213714972395170583781976983</span>, <span class="hljs-number">949950729999198576080781001</span>, <span class="hljs-number">1150032993579134750099465519</span>,<br>     <span class="hljs-number">975992662970919388672800773</span>, <span class="hljs-number">1129148699796142943831843099</span>, <span class="hljs-number">898871798141537568624106939</span>, <span class="hljs-number">997718314505250470787513281</span>,<br>     <span class="hljs-number">631543452089232890507925619</span>, <span class="hljs-number">831335899173370929279633943</span>, <span class="hljs-number">1186748765521175593031174791</span>, <span class="hljs-number">884252194903912680865071301</span>,<br>     <span class="hljs-number">1016020417916761281986717467</span>, <span class="hljs-number">896205582917201847609656147</span>, <span class="hljs-number">959440423632738884107086307</span>, <span class="hljs-number">993368100536690520995612807</span>,<br>     <span class="hljs-number">702602277993849887546504851</span>, <span class="hljs-number">1102807438605649402749034481</span>, <span class="hljs-number">629539427333081638691538089</span>, <span class="hljs-number">887663258680338594196147387</span>,<br>     <span class="hljs-number">1001965883259152684661493409</span>, <span class="hljs-number">1043811683483962480162133633</span>, <span class="hljs-number">938713759383186904819771339</span>, <span class="hljs-number">1023699641268310599371568653</span>,<br>     <span class="hljs-number">784025822858960757703945309</span>, <span class="hljs-number">986182634512707587971047731</span>, <span class="hljs-number">1064739425741411525721437119</span>, <span class="hljs-number">1209428051066908071290286953</span>,<br>     <span class="hljs-number">667510673843333963641751177</span>, <span class="hljs-number">642828919542760339851273551</span>, <span class="hljs-number">1086628537309368288204342599</span>, <span class="hljs-number">1084848944960506663668298859</span>,<br>     <span class="hljs-number">667827295200373631038775959</span>, <span class="hljs-number">752634137348312783761723507</span>, <span class="hljs-number">707994297795744761368888949</span>, <span class="hljs-number">747998982630688589828284363</span>,<br>     <span class="hljs-number">710184791175333909291593189</span>, <span class="hljs-number">651183930154725716807946709</span>, <span class="hljs-number">724836607223400074343868079</span>, <span class="hljs-number">1118993538091590299721647899</span>]<br><br>b = <span class="hljs-number">34962396275078207988771864327</span><br><br>ciphertext = <span class="hljs-string">b&#x27;Lo~G\xf46&gt;\xd609\x8e\x8e\xf5\xf83\xb5\xf0\x8f\x9f6&amp;\xea\x02\xfa\xb1_L\x85\x93\x93\xf7,`|\xc6\xbe\x05&amp;\x85\x8bC\xcd\xe6?TV4q&#x27;</span><br><br>n = <span class="hljs-built_in">len</span>(a)   <span class="hljs-comment"># 72</span><br><br><span class="hljs-comment"># --------- 构造格基 ----------</span><br>Ge = Matrix(ZZ, n+<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    Ge[i, i] = <span class="hljs-number">2</span><br>    Ge[i, -<span class="hljs-number">1</span>] = a[i]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    Ge[-<span class="hljs-number">1</span>, i] = <span class="hljs-number">1</span><br>Ge[-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>] = b<br><br><span class="hljs-comment"># --------- BKZ / LLL 归约 ----------</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Running BKZ...&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    B = Ge.BKZ(block_size=<span class="hljs-number">28</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BKZ 失败，退回 LLL：&quot;</span>, e)<br>    B = Ge.LLL()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Reduction done. Searching for solution vector...&quot;</span>)<br><br>found = <span class="hljs-literal">False</span><br>candidate = <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 搜索解向量</span><br><span class="hljs-keyword">for</span> row_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(B.nrows()):<br>    v = [<span class="hljs-built_in">int</span>(B[row_idx, j]) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>    last = v[-<span class="hljs-number">1</span>]<br>    front = v[:-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> last == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">all</span>(x <span class="hljs-keyword">in</span> (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> front):<br>        candidate = front<br>        found = <span class="hljs-literal">True</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found exact candidate in basis row <span class="hljs-subst">&#123;row_idx&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found:<br>    <span class="hljs-keyword">for</span> row_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(B.nrows()):<br>        v = [<span class="hljs-built_in">int</span>(B[row_idx, j]) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>        front = v[:-<span class="hljs-number">1</span>]<br>        last = v[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(last) &lt;= <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">all</span>(<span class="hljs-built_in">abs</span>(x) <span class="hljs-keyword">in</span> (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> front):<br>            possibly = []<br>            ok = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> front:<br>                <span class="hljs-keyword">if</span> x &gt;= <span class="hljs-number">1</span>:<br>                    possibly.append(<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">elif</span> x &lt;= -<span class="hljs-number">1</span>:<br>                    possibly.append(-<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    ok = <span class="hljs-literal">False</span><br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> ok:<br>                candidate = possibly<br>                found = <span class="hljs-literal">True</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found tolerant candidate in basis row <span class="hljs-subst">&#123;row_idx&#125;</span> (last=<span class="hljs-subst">&#123;last&#125;</span>)&quot;</span>)<br>                <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有在基中直接找到满足 (±1,...,0) 形式的向量。&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你可以：\n - 提高 BKZ 的 block_size（更强但更慢），\n - 或尝试搜索基向量的短线性组合 / 使用 fpylll 的 shortest_vector.&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 恢复 p</span><br>m_bits = [(x + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> candidate]<br>p_recovered = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i, bit <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(m_bits):<br>    p_recovered |= (bit &lt;&lt; i)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recovered p (decimal):&quot;</span>, p_recovered)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recovered p (bin length):&quot;</span>, <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(p_recovered)) - <span class="hljs-number">2</span>)<br><br></code></pre></td></tr></table></figure><p>Running BKZ…<br>Reduction done. Searching for solution vector…<br>Found exact candidate in basis row 0<br>Recovered p (decimal): 4208626653103825685156<br>Recovered p (bin length): 72</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> unpad<br><span class="hljs-keyword">import</span> hashlib<br><br>ciphertext=<span class="hljs-string">b&#x27;Lo~G\xf46&gt;\xd609\x8e\x8e\xf5\xf83\xb5\xf0\x8f\x9f6&amp;\xea\x02\xfa\xb1_L\x85\x93\x93\xf7,`|\xc6\xbe\x05&amp;\x85\x8bC\xcd\xe6?TV4q&#x27;</span><br>p_recovered=<span class="hljs-number">4208626653103825685156</span><br><br><br>key = hashlib.sha256(<span class="hljs-built_in">str</span>(p_recovered).encode()).digest()<br>cipher = AES.new(key, AES.MODE_ECB)<br><span class="hljs-keyword">try</span>:<br>    plaintext = unpad(cipher.decrypt(ciphertext), <span class="hljs-number">16</span>)<br><span class="hljs-keyword">except</span> ValueError:<br>    plaintext = cipher.decrypt(ciphertext)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Warning: unpad failed; raw decrypted bytes shown.&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted plaintext (bytes):&quot;</span>, plaintext)<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted plaintext (utf-8):&quot;</span>, plaintext.decode())<br><span class="hljs-keyword">except</span> Exception:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>Decrypted plaintext (bytes): b’LILCTF{M4ybe_7he_brut3_f0rce_1s_be5t}’<br>Decrypted plaintext (utf-8): LILCTF{M4ybe_7he_brut3_f0rce_1s_be5t}</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025Lilctf(Reverse)</title>
    <link href="/2025/08/15/2025Lilctf(Revese)/"/>
    <url>/2025/08/15/2025Lilctf(Revese)/</url>
    
    <content type="html"><![CDATA[<h1 id="2025Lilctf-Reverse"><a href="#2025Lilctf-Reverse" class="headerlink" title="2025Lilctf(Reverse)"></a>2025Lilctf(Reverse)</h1><h2 id="1-ARM-ASM"><a href="#1-ARM-ASM" class="headerlink" title="1.ARM ASM"></a>1.<strong>ARM ASM</strong></h2><p>发现是apk，放到jadx看一下，发现：</p><p><img src="/2025/08/15/2025Lilctf(Revese)/image-20250815220846564.png" alt="image-20250815220846564"></p><p>然后ida打开看到：</p><p><img src="/2025/08/15/2025Lilctf(Revese)/image-20250815220944516.png" alt="image-20250815220944516"></p><p>找到这三个关键函数以及：</p><p><img src="/2025/08/15/2025Lilctf(Revese)/image-20250815221012488.png" alt="image-20250815221012488"></p><p>推测是变表和移位的base64，扔给ai分析一下，生成脚本：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment"># 自定义Base64表</span><br>custom_b64_table = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ3456780129+/&quot;</span><br>standard_b64_table = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><br><span class="hljs-comment"># 目标密文</span><br>target_b64 = <span class="hljs-string">&quot;KRD2c1XRSJL9e0fqCIbiyJrHW1bu0ZnTYJvYw1DM2RzPK1XIQJnN2ZfRMY4So09S&quot;</span><br><br><span class="hljs-comment"># 转换到标准Base64</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">to_standard_b64</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> s.translate(<span class="hljs-built_in">str</span>.maketrans(custom_b64_table, standard_b64_table))<br><br><span class="hljs-comment"># 解码Base64</span><br>std_b64_str = to_standard_b64(target_b64)<br>decoded = base64.b64decode(std_b64_str)<br>data = <span class="hljs-built_in">list</span>(decoded)  <span class="hljs-comment"># 解码后的48字节数据</span><br><br><span class="hljs-comment"># 移位逆操作（每3字节一组）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_shift</span>(<span class="hljs-params">data</span>):<br>    result = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(data), <span class="hljs-number">3</span>):<br>        <span class="hljs-comment"># 第1字节：循环右移3位（加密时循环左移3位）</span><br>        b0 = data[i]<br>        b0 = ((b0 &gt;&gt; <span class="hljs-number">3</span>) | (b0 &lt;&lt; <span class="hljs-number">5</span>)) &amp; <span class="hljs-number">0xFF</span><br>        <br>        <span class="hljs-comment"># 第2字节：循环左移1位（加密时循环右移1位）</span><br>        b1 = data[i+<span class="hljs-number">1</span>]<br>        b1 = ((b1 &lt;&lt; <span class="hljs-number">1</span>) | (b1 &gt;&gt; <span class="hljs-number">7</span>)) &amp; <span class="hljs-number">0xFF</span><br>        <br>        <span class="hljs-comment"># 第3字节不变</span><br>        b2 = data[i+<span class="hljs-number">2</span>]<br>        result.extend([b0, b1, b2])<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-comment"># 置换表t</span><br>t0 = [<span class="hljs-number">0x0D</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x08</span>, <br>      <span class="hljs-number">0x06</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>]<br><br><span class="hljs-comment"># 构造逆置换表</span><br>inv_t = [<span class="hljs-number">0</span>] * <span class="hljs-number">16</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    inv_t[t0[i]] = i<br><br><span class="hljs-comment"># 三轮变换逆操作（正确密钥）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_blocks</span>(<span class="hljs-params">blocks</span>):<br>    <span class="hljs-comment"># 块0：使用密钥 t0</span><br>    block0 = [blocks[<span class="hljs-number">0</span>][i] ^ t0[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    block0 = [block0[inv_t[i]] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    <br>    <span class="hljs-comment"># 块1：使用密钥 t0</span><br>    block1 = [blocks[<span class="hljs-number">1</span>][i] ^ t0[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    block1 = [block1[inv_t[i]] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    <br>    <span class="hljs-comment"># 块2：使用密钥 t0⊕1（关键修正！）</span><br>    key2 = [b ^ <span class="hljs-number">0x01</span> <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> t0]<br>    block2 = [blocks[<span class="hljs-number">2</span>][i] ^ key2[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    block2 = [block2[inv_t[i]] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    <br>    <span class="hljs-keyword">return</span> block0 + block1 + block2<br><br><span class="hljs-comment"># 步骤1: 移位逆操作</span><br>data = reverse_shift(data)<br><br><span class="hljs-comment"># 分块（16字节/块）</span><br>blocks = [<br>    data[<span class="hljs-number">0</span>:<span class="hljs-number">16</span>],   <span class="hljs-comment"># 块0: 0-15字节</span><br>    data[<span class="hljs-number">16</span>:<span class="hljs-number">32</span>],  <span class="hljs-comment"># 块1: 16-31字节</span><br>    data[<span class="hljs-number">32</span>:<span class="hljs-number">48</span>]   <span class="hljs-comment"># 块2: 32-47字节</span><br>]<br><br><span class="hljs-comment"># 步骤2: 三轮逆操作（使用正确密钥）</span><br>original_data = reverse_blocks(blocks)<br><br><span class="hljs-comment"># 转换为字符串</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(b) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> original_data)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完整的Flag:&quot;</span>, flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag长度:&quot;</span>, <span class="hljs-built_in">len</span>(flag))<br></code></pre></td></tr></table></figure><p>完整的Flag: LILCTF{ez_arm_asm_meow_meow_meowm_oe_wemwom_oe}w<br>Flag长度: 48</p><p>提交不上，猜了一下，最后试了试这个</p><p>LILCTF{ez_arm_asm_meow_meow_meow_meow_meow_meow}</p><p>提交成功</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwitchHosts下载安装使用</title>
    <link href="/2025/08/11/SwitchHosts%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/08/11/SwitchHosts%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="SwitchHosts下载安装使用"><a href="#SwitchHosts下载安装使用" class="headerlink" title="SwitchHosts下载安装使用"></a>SwitchHosts下载安装使用</h1><p>github直接搜然后下载</p><p><img src="/2025/08/11/SwitchHosts%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/image-20250811232346188.png" alt="image-20250811232346188"></p><p>然后直接修改</p><p><img src="/2025/08/11/SwitchHosts%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/image-20250811235635131.png" alt="image-20250811235635131"></p><p>注意，要关代理并且重启浏览器！！！</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>util</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>util</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025天机学堂</title>
    <link href="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/"/>
    <url>/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/</url>
    
    <content type="html"><![CDATA[<h1 id="2025天机学堂"><a href="#2025天机学堂" class="headerlink" title="2025天机学堂"></a>2025天机学堂</h1><h2 id="day01：初始化项目"><a href="#day01：初始化项目" class="headerlink" title="day01：初始化项目"></a>day01：初始化项目</h2><p>虚拟机密码：root      123321</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.150.101</span> git.tianji.com  tjxt  <span class="hljs-number">123321</span><br><span class="hljs-number">192.168.150.101</span> jenkins.tianji.com    root  <span class="hljs-number">123</span><br><span class="hljs-number">192.168.150.101</span> mq.tianji.com    tjxt  <span class="hljs-number">123321</span><br><span class="hljs-number">192.168.150.101</span> nacos.tianji.com      nacos   nacos<br><span class="hljs-number">192.168.150.101</span> xxljob.tianji.com<br><span class="hljs-number">192.168.150.101</span> es.tianji.com<br><span class="hljs-number">192.168.150.101</span> api.tianji.com<br><span class="hljs-number">192.168.150.101</span> www.tianji.com      jack  <span class="hljs-number">123</span>   Rose  <span class="hljs-number">123456</span><br><span class="hljs-number">192.168.150.101</span> manage.tianji.com<br><span class="hljs-number">192.168.150.101</span> cpolar.tianji.com<br></code></pre></td></tr></table></figure><p>点击init初始化虚拟机：</p><p>在VMware得到：</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250811230026583.png" alt="image-20250811230026583"></p><p>然后初始化网络配置，改成这样：</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250811230229943.png" alt="image-20250811230229943"></p><p>启动虚拟机，虚拟机中的环境会自启动，我们可以访问一个进行测试，访问是要访问我画红框的url：192.168.150.101:8848</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250811230339618.png" alt="image-20250811230339618"></p><p>然后我们也可以使用switchhost来代理，具体可以看我switchhost的文章</p><p>nginx无法启动问题，尝试重启进行解决：解决失败，但最后耗时四小时左右解决了，问题在于nginx的conf的语法问题，大概改成这样就好了：</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250813173345522.png" alt="image-20250813173345522"></p><p>然后复制初始化项目到本地：</p><p><a href="http://192.168.150.101:10880/tjxt/tianji.git">http://192.168.150.101:10880/tjxt/tianji.git</a></p><p>git clone <a href="http://192.168.150.101:10880/tjxt/tianji.git">http://192.168.150.101:10880/tjxt/tianji.git</a> -b lesson-init</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250813151129175.png" alt="image-20250813151129175"></p><p>然后打开项目刷新一下maven下下依赖就好了</p><p>遇到bug：</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250813174959296.png" alt="image-20250813174959296"></p><p>解决了一下午，到最后还是依赖问题：把这个注释的# 删掉</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250814001958375.png" alt="image-20250814001958375"></p><p>查找bug，Rose删除订单时显示不能删除他人订单</p><p>想远程调试，改成这样：</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250814141612054.png" alt="image-20250814141612054"></p><p>然后关掉tj-trade，启动tj-trade-debug</p><p>当然也可以直接本地调试，但是注意调试前编辑配置改为local</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250814144004334.png" alt="image-20250814144004334"></p><p>回到bug问题，将&#x3D;改成equals或者&#x3D;&#x3D;就好了</p><p>然后推送到本地的git就好了</p><h2 id="day02：我的课表"><a href="#day02：我的课表" class="headerlink" title="day02：我的课表"></a>day02：我的课表</h2><p>导入domain和enums然后下载mybatisplus插件然后连接：</p><p>jdbc:mysql:&#x2F;&#x2F;localhost:192.168.150.101:3306&#x2F;tj_learning?useSSL&#x3D;false&amp;serverTimezone&#x3D;UTC</p><p>但是遇到问题：</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250822133807249.png" alt="image-20250822133807249"></p><p>还没解决，因为我数据库能连上但是这个插件连不上，所以暂时没管还能继续学下去</p><p>然后写那个课程弄到我的课表的代码，这就不复制了，比较简单</p><p>然后进行测试，他会显示报名失败，因为数据库数据太老了，你自己改一下时间就能报名成功了</p><p>然后第二个是分页查询课表，也是不难，但是别忘了在请求头中加user-info，要不然会报401</p><p>第三个查询正在学习的课程也是一样</p><p>课后作业我直接搬了</p><p>但是day02有个问题，没有解决：</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250822224704178.png" alt="image-20250822224704178"></p><p>但是后端接口正常使用，我就没管他</p><h2 id="day03学习计划和进度"><a href="#day03学习计划和进度" class="headerlink" title="day03学习计划和进度"></a>day03学习计划和进度</h2><p>写完代码后出现bug：</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250823225231379.png" alt="image-20250823225231379"></p><p>然后发现是serviceImpl忘加service注解了，加了就能解决了</p><p>遇到了问题：</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250824001502238.png" alt="image-20250824001502238"></p><p>这是数据库建表的问题，但感觉修改太麻烦了，我不改了。代码本身没问题</p><p>另外还是前端问题，导致数据没回显但是接口测试没问题</p><p>day3基本是水过去的</p><h2 id="day04高并发优化"><a href="#day04高并发优化" class="headerlink" title="day04高并发优化"></a>day04高并发优化</h2><p>u1s1面对高并发你会怎么办？hm飞书的答案：</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250824233342480.png" alt="image-20250824233342480"></p><p>要我说，口头表达一下大概就是：</p><p>1.存入redis后续更新数据库</p><p>2.消息队列，慢慢处理</p><p>3.限流</p><p>4.异步请求，先返回东西后进行处理  &#x2F;&#x2F;感觉和2重复了</p><p>然后就是改造代码，懒得看了，太无聊。</p><h2 id="day05问答系统"><a href="#day05问答系统" class="headerlink" title="day05问答系统"></a>day05问答系统</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>complete_item</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>complete_item</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025moectf(Crypto)</title>
    <link href="/2025/08/09/2025moectf(Crypto)/"/>
    <url>/2025/08/09/2025moectf(Crypto)/</url>
    
    <content type="html"><![CDATA[<h1 id="2025moectf-Crypto"><a href="#2025moectf-Crypto" class="headerlink" title="2025moectf(Crypto)"></a>2025moectf(Crypto)</h1><h2 id="1-moectf-Crypto"><a href="#1-moectf-Crypto" class="headerlink" title="1.moectf(Crypto)"></a>1.moectf(Crypto)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> ElGamal<br><span class="hljs-keyword">from</span> Crypto.Random <span class="hljs-keyword">import</span> get_random_bytes, random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_elgamal_keypair</span>(<span class="hljs-params">bits=<span class="hljs-number">512</span></span>):<br>p = getPrime(bits)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>g = getRandomRange(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(g, (p - <span class="hljs-number">1</span>) // <span class="hljs-number">2</span>, p) != <span class="hljs-number">1</span>:<br><span class="hljs-keyword">break</span><br>x = randrange(<span class="hljs-number">2</span>, p - <span class="hljs-number">1</span>)<br>注:此处的secret模块可以理解为存储了明文flag的python文件，属于未知信息，而非公开的可用模<br>块。你需要尝试从密文去恢复原始的flag，而不是去下载secret模块。secrets则是一个用于生成管<br>理密码的安全随机数的python标准库。<br>bytes_to_long函数用于将flag编码为整数。<br>Hint：什么是 Elgamal<br>还是附个链接吧Elgamal<br>y = <span class="hljs-built_in">pow</span>(g, x, p)<br><span class="hljs-keyword">return</span> p, g, y, x<br>key=generate_elgamal_keypair(bits=<span class="hljs-number">512</span>)<br>p, g, y ,x= key<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=== 公钥 (p, g, y) ===&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p =&quot;</span>, p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;g =&quot;</span>, g)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;y =&quot;</span>, y)<br><span class="hljs-built_in">print</span>()<br>k = randrange(<span class="hljs-number">1</span>, p - <span class="hljs-number">2</span>)<br>m = bytes_to_long(flag)<br>c1 = <span class="hljs-built_in">pow</span>(g, k, p)<br>c2 = (m * <span class="hljs-built_in">pow</span>(y, k, p)) % p<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=== 密文 (c1, c2) ===&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c1 =&quot;</span>, c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c2 =&quot;</span>, c2)<br><span class="hljs-comment">#不小心把x输出了()</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x =&quot;</span>, x)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=== 公钥 (p, g, y) ===</span><br><span class="hljs-string">p =</span><br><span class="hljs-string">115409637159621449517635782553574175289667159048490149855475976576983048910448410</span><br><span class="hljs-string">99894993117258279094910424033273299863589407477091830213468539451196239863</span><br><span class="hljs-string">g = 2</span><br><span class="hljs-string">y =</span><br><span class="hljs-string">831342478336601128701462358277352159533328529138054068946707321221293164841558006</span><br><span class="hljs-string">5207081449784135835711205324186662482526357834042013400765421925274271853</span><br><span class="hljs-string">=== 密文 (c1, c2) ===</span><br><span class="hljs-string">c1 =</span><br><span class="hljs-string">665205355305564535827536225955485652597693184131825115294046454317510856013294961</span><br><span class="hljs-string">0916012490837970851191204144757409335011811874896056430105292534244732863</span><br><span class="hljs-string">c2 =</span><br><span class="hljs-string">231491356808152642824798171910095233144493885239903182663547597194748466341836253</span><br><span class="hljs-string">3363591441216570597417789120470703548843342170567039399830377459228297983</span><br><span class="hljs-string">x =</span><br><span class="hljs-string">801095707808655428402095966412478447961091359656003501195114326955976122911402773</span><br><span class="hljs-string">8791440961864150225798049120582540951874956255115884539333966429021004214</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>注:此处的secret模块可以理解为存储了明文flag的python文件，属于未知信息，而非公开的可用模<br>块。你需要尝试从密文去恢复原始的flag，而不是去下载secret模块。secrets则是一个用于生成管<br>理密码的安全随机数的python标准库。<br>bytes_to_long函数用于将flag编码为整数。<br></code></pre></td></tr></table></figure><p>ai可以一把梭，明个再来写解题过程：</p><p><img src="/2025/08/09/2025moectf(Crypto)/image-20250810004708703.png" alt="image-20250810004708703"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-comment"># 给定的公钥和私钥</span><br>p = <span class="hljs-number">11540963715962144951763578255357417528966715904849014985547597657698304891044841099894993117258279094910424033273299863589407477091830213468539451196239863</span><br>g = <span class="hljs-number">2</span><br>y = <span class="hljs-number">8313424783366011287014623582773521595333285291380540689467073212212931648415580065207081449784135835711205324186662482526357834042013400765421925274271853</span><br>c1 = <span class="hljs-number">6652053553055645358275362259554856525976931841318251152940464543175108560132949610916012490837970851191204144757409335011811874896056430105292534244732863</span><br>c2 = <span class="hljs-number">2314913568081526428247981719100952331444938852399031826635475971947484663418362533363591441216570597417789120470703548843342170567039399830377459228297983</span><br>x = <span class="hljs-number">8010957078086554284020959664124784479610913596560035011951143269559761229114027738791440961864150225798049120582540951874956255115884539333966429021004214</span><br><br><span class="hljs-comment"># 计算共享密钥 s = c1^x mod p</span><br>s = <span class="hljs-built_in">pow</span>(c1, x, p)<br><br><span class="hljs-comment"># 计算 s 的模逆元</span><br>s_inv = <span class="hljs-built_in">pow</span>(s, -<span class="hljs-number">1</span>, p)<br><br><span class="hljs-comment"># 解密消息 m = c2 * s_inv mod p</span><br>m = (c2 * s_inv) % p<br><br><span class="hljs-comment"># 将整数转换为字节串</span><br>flag = long_to_bytes(m)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密后的 flag:&quot;</span>, flag.decode())<br></code></pre></td></tr></table></figure><p>flag:   moectf{th1s_1s_y0ur_f1rst_ElG@m@l}</p><h2 id="2-ez-DES"><a href="#2-ez-DES" class="headerlink" title="2.ez_DES"></a>2.ez_DES</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">import</span> secrets<br><span class="hljs-keyword">import</span> string<br><br>flag = <span class="hljs-string">&#x27;moectf&#123;???&#125;&#x27;</span><br>characters = string.ascii_letters + string.digits + string.punctuation<br>key = <span class="hljs-string">&#x27;ezdes&#x27;</span>+<span class="hljs-string">&#x27;&#x27;</span>.join(secrets.choice(characters) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>))<br><span class="hljs-keyword">assert</span> key[:<span class="hljs-number">5</span>] == <span class="hljs-string">&#x27;ezdes&#x27;</span><br>key = key.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>l = <span class="hljs-number">8</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">text, key</span>):<br>    cipher = DES.new(key, DES.MODE_ECB)<br>    padded_text = text + (l - <span class="hljs-built_in">len</span>(text) % l) * <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">len</span>(text))<br>    data = cipher.encrypt(padded_text.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-keyword">return</span> data<br><br>c = encrypt(flag, key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>, c)<br><br><span class="hljs-comment"># c = b&#x27;\xe6\x8b0\xc8m\t?\x1d\xf6\x99sA&gt;\xce \rN\x83z\xa0\xdc&#123;\xbc\xb8X\xb2\xe2q\xa4&quot;\xfc\x07&#x27;</span><br></code></pre></td></tr></table></figure><p>爆破秘钥就好，ai能一把梭：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> product<br><br><span class="hljs-comment"># 给定的密文</span><br>c = <span class="hljs-string">b&#x27;\xe6\x8b0\xc8m\t?\x1d\xf6\x99sA&gt;\xce \rN\x83z\xa0\xdc&#123;\xbc\xb8X\xb2\xe2q\xa4&quot;\xfc\x07&#x27;</span><br><br><span class="hljs-comment"># 可能的字符集</span><br>characters = string.ascii_letters + string.digits + string.punctuation<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">ciphertext, key</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;尝试使用给定的密钥解密，使用题目特定的填充方案&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        cipher = DES.new(key, DES.MODE_ECB)<br>        data = cipher.decrypt(ciphertext)<br>        <br>        <span class="hljs-comment"># 获取原始消息长度（填充字符的值）</span><br>        msg_len = data[-<span class="hljs-number">1</span>]<br>        <br>        <span class="hljs-comment"># 计算填充长度</span><br>        pad_len = <span class="hljs-number">8</span> - (msg_len % <span class="hljs-number">8</span>)<br>        <span class="hljs-keyword">if</span> pad_len == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 如果长度是8的倍数</span><br>            pad_len = <span class="hljs-number">8</span><br>        <br>        <span class="hljs-comment"># 验证填充是否正确</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">all</span>(byte == msg_len <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> data[-pad_len:]):<br>            <span class="hljs-comment"># 移除填充并返回原始消息</span><br>            <span class="hljs-keyword">return</span> data[:-pad_len]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;主函数，爆破密钥并解密&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 生成所有可能的3字符组合</span><br>    total = <span class="hljs-built_in">len</span>(characters) ** <span class="hljs-number">3</span><br>    count = <span class="hljs-number">0</span><br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;开始爆破 <span class="hljs-subst">&#123;total&#125;</span> 种可能的密钥组合...&quot;</span>)<br>    <br>    <span class="hljs-comment"># 使用笛卡尔积生成所有可能的3字符后缀</span><br>    <span class="hljs-keyword">for</span> suffix <span class="hljs-keyword">in</span> product(characters, repeat=<span class="hljs-number">3</span>):<br>        count += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> count % <span class="hljs-number">100000</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;进度: <span class="hljs-subst">&#123;count&#125;</span>/<span class="hljs-subst">&#123;total&#125;</span> (<span class="hljs-subst">&#123;count/total*<span class="hljs-number">100</span>:<span class="hljs-number">.1</span>f&#125;</span>%)&quot;</span>)<br>        <br>        <span class="hljs-comment"># 构建完整密钥</span><br>        key_str = <span class="hljs-string">&#x27;ezdes&#x27;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(suffix)<br>        key = key_str.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <br>        <span class="hljs-comment"># 尝试解密</span><br>        result = decrypt(c, key)<br>        <br>        <span class="hljs-comment"># 如果解密成功并且结果包含 moectf 标志</span><br>        <span class="hljs-keyword">if</span> result <span class="hljs-keyword">and</span> <span class="hljs-string">b&#x27;moectf&#123;&#x27;</span> <span class="hljs-keyword">in</span> result:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n找到有效密钥: <span class="hljs-subst">&#123;key_str&#125;</span>&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解密结果: <span class="hljs-subst">&#123;result.decode()&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;爆破完成，未找到有效密钥。尝试检查填充逻辑或密钥空间。&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>找到有效密钥: ezdes8br<br>解密结果: moectf{_Ju5t envmEra+e.!}</p><h2 id="3-baby-next"><a href="#3-baby-next" class="headerlink" title="3.baby_next"></a>3.baby_next</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> next_prime<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">38</span><br><span class="hljs-keyword">assert</span> flag[:<span class="hljs-number">7</span>] == <span class="hljs-string">b&#x27;moectf&#123;&#x27;</span><br><span class="hljs-keyword">assert</span> flag[-<span class="hljs-number">1</span>:] == <span class="hljs-string">b&#x27;&#125;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = <span class="hljs-built_in">int</span>(reduce(<span class="hljs-keyword">lambda</span> res, _: next_prime(res), <span class="hljs-built_in">range</span>(<span class="hljs-number">114514</span>), p))<br><br>    n = p * q<br>    e = <span class="hljs-number">65537</span><br><br>    m = bytes_to_long(flag)<br><br>    c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;n = &#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;c = &#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n = 96742777571959902478849172116992100058097986518388851527052638944778038830381328778848540098201307724752598903628039482354215330671373992156290837979842156381411957754907190292238010742130674404082688791216045656050228686469536688900043735264177699512562466087275808541376525564145453954694429605944189276397</span><br><span class="hljs-string">c = 17445962474813629559693587749061112782648120738023354591681532173123918523200368390246892643206880043853188835375836941118739796280111891950421612990713883817902247767311707918305107969264361136058458670735307702064189010952773013588328843994478490621886896074511809007736368751211179727573924125553940385967</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>next_prime的应用，也是爆破一下，因为数据量不大，给点描述就能一把梭了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> isqrt, next_prime, mpz<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = mpz(<span class="hljs-number">96742777571959902478849172116992100058097986518388851527052638944778038830381328778848540098201307724752598903628039482354215330671373992156290837979842156381411957754907190292238010742130674404082688791216045656050228686469536688900043735264177699512562466087275808541376525564145453954694429605944189276397</span>)<br>c = mpz(<span class="hljs-number">17445962474813629559693587749061112782648120738023354591681532173123918523200368390246892643206880043853188835375836941118739796280111891950421612990713883817902247767311707918305107969264361136058458670735307702064189010952773013588328843994478490621886896074511809007736368751211179727573924125553940385967</span>)<br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factor_n</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;高效分解接近的素数因子&quot;&quot;&quot;</span><br>    a = isqrt(n)  <span class="hljs-comment"># 精确整数平方根</span><br>    <br>    <span class="hljs-comment"># 从平方根开始向前搜索素数作为候选p</span><br>    p = next_prime(a - <span class="hljs-number">10</span>**<span class="hljs-number">7</span>)  <span class="hljs-comment"># 从稍低于平方根的位置开始</span><br>    <br>    <span class="hljs-comment"># 尝试p和p后面的114514个素数作为q</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>):  <span class="hljs-comment"># 安全范围内搜索</span><br>        q = n // p<br>        <br>        <span class="hljs-comment"># 检查是否找到有效因子</span><br>        <span class="hljs-keyword">if</span> p * q == n:<br>            <span class="hljs-keyword">return</span> p, q<br>        <br>        <span class="hljs-comment"># 移动到下一个候选p</span><br>        p = next_prime(p)<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>p, q = factor_n(n)<br><br><span class="hljs-keyword">if</span> p <span class="hljs-keyword">and</span> q:<br>    phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>    d = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, phi)<br>    m = <span class="hljs-built_in">pow</span>(c, d, n)<br>    flag = long_to_bytes(<span class="hljs-built_in">int</span>(m))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag:&quot;</span>, flag.decode())<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;未找到因子&quot;</span>)<br></code></pre></td></tr></table></figure><p>flag：  moectf{vv0W_p_m1nu5_q_i5_r34l1y_sm4lI}</p><h2 id="4-ez-square"><a href="#4-ez-square" class="headerlink" title="4.ez_square"></a>4.ez_square</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">35</span><br><span class="hljs-keyword">assert</span> flag[:<span class="hljs-number">7</span>] == <span class="hljs-string">b&#x27;moectf&#123;&#x27;</span><br><span class="hljs-keyword">assert</span> flag[-<span class="hljs-number">1</span>:] == <span class="hljs-string">b&#x27;&#125;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = getPrime(<span class="hljs-number">512</span>)<br><br>    n = p * q<br>    e = <span class="hljs-number">65537</span><br><br>    m = bytes_to_long(flag)<br><br>    c = <span class="hljs-built_in">pow</span>(m, e, n)<br>    hint = <span class="hljs-built_in">pow</span>(p + q, <span class="hljs-number">2</span>, n)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;n = &#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;c = &#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;hint = &#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n = 83917281059209836833837824007690691544699901753577294450739161840987816051781770716778159151802639720854808886223999296102766845876403271538287419091422744267873129896312388567406645946985868002735024896571899580581985438021613509956651683237014111116217116870686535030557076307205101926450610365611263289149</span><br><span class="hljs-string">c = 69694813399964784535448926320621517155870332267827466101049186858004350675634768405333171732816667487889978017750378262941788713673371418944090831542155613846263236805141090585331932145339718055875857157018510852176248031272419248573911998354239587587157830782446559008393076144761176799690034691298870022190</span><br><span class="hljs-string">hint = 5491796378615699391870545352353909903258578093592392113819670099563278086635523482350754035015775218028095468852040957207028066409846581454987397954900268152836625448524886929236711403732984563866312512753483333102094024510204387673875968726154625598491190530093961973354413317757182213887911644502704780304</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>rsa加密公式的考察，不难，也能一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-comment"># 已知参数</span><br>n = <span class="hljs-number">83917281059209836833837824007690691544699901753577294450739161840987816051781770716778159151802639720854808886223999296102766845876403271538287419091422744267873129896312388567406645946985868002735024896571899580581985438021613509956651683237014111116217116870686535030557076307205101926450610365611263289149</span><br>c = <span class="hljs-number">69694813399964784535448926320621517155870332267827466101049186858004350675634768405333171732816667487889978017750378262941788713673371418944090831542155613846263236805141090585331932145339718055875857157018510852176248031272419248573911998354239587587157830782446559008393076144761176799690034691298870022190</span><br>hint = <span class="hljs-number">5491796378615699391870545352353909903258578093592392113819670099563278086635523482350754035015775218028095468852040957207028066409846581454987397954900268152836625448524886929236711403732984563866312512753483333102094024510204387673875968726154625598491190530093961973354413317757182213887911644502704780304</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-comment"># 关键推导：(p+q)² = (p-q)² + 4pq，而hint = (p+q)² mod n = (p-q)² mod n</span><br><span class="hljs-comment"># 计算s = (p+q)² = 4n + hint（因为hint = (p-q)²且小于n）</span><br>s = <span class="hljs-number">4</span> * n + hint<br><br><span class="hljs-comment"># 求s的平方根得到p+q</span><br>s_sqrt = math.isqrt(s)<br><span class="hljs-keyword">assert</span> s_sqrt * s_sqrt == s, <span class="hljs-string">&quot;s不是完全平方数，推导错误&quot;</span><br><br><span class="hljs-comment"># 求hint的平方根得到p-q</span><br>d_sqrt = math.isqrt(hint)<br><span class="hljs-keyword">assert</span> d_sqrt * d_sqrt == hint, <span class="hljs-string">&quot;hint不是完全平方数，推导错误&quot;</span><br><br><span class="hljs-comment"># 计算p和q</span><br>p = (s_sqrt + d_sqrt) // <span class="hljs-number">2</span><br>q = (s_sqrt - d_sqrt) // <span class="hljs-number">2</span><br><br><span class="hljs-comment"># 验证p*q是否等于n</span><br><span class="hljs-keyword">assert</span> p * q == n, <span class="hljs-string">&quot;分解n失败&quot;</span><br><br><span class="hljs-comment"># 计算欧拉函数φ(n)</span><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 计算私钥d（e的逆元）</span><br>d = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, phi)<br><br><span class="hljs-comment"># 解密得到明文m</span><br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><br><span class="hljs-comment"># 转换为flag</span><br>flag = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密得到的flag:&quot;</span>, flag.decode())<br><br></code></pre></td></tr></table></figure><p>flag：   moectf{Ma7hm4t1c5_is_@_k1nd_0f_a2t}</p><h2 id="5-ezlegendre"><a href="#5-ezlegendre" class="headerlink" title="5.ezlegendre"></a>5.<strong>ezlegendre</strong></h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, bytes_to_long<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>p = <span class="hljs-number">258669765135238783146000574794031096183</span><br>a = <span class="hljs-number">144901483389896508632771215712413815934</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_flag</span>(<span class="hljs-params">flag</span>):<br>    ciphertext = []<br>    plaintext = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">bin</span>(i)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag])<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> plaintext:<br>        e = getPrime(<span class="hljs-number">16</span>)<br>        d = randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)<br>        n = <span class="hljs-built_in">pow</span>(a+<span class="hljs-built_in">int</span>(b)*d, e, p)<br>        ciphertext.append(n)<br>    <span class="hljs-keyword">return</span> ciphertext<br><br><span class="hljs-built_in">print</span>(encrypt_flag(flag))<br><br></code></pre></td></tr></table></figure><p>数据都给你了，直接读数据得出未知数就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> isPrime<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br><span class="hljs-comment"># 已知参数</span><br>p = <span class="hljs-number">258669765135238783146000574794031096183</span><br>a = <span class="hljs-number">144901483389896508632771215712413815934</span><br><br><span class="hljs-comment"># 假设我们有部分密文</span><br>ciphertext = [<span class="hljs-number">102230607782303286066661803375943337852</span>, <span class="hljs-number">196795077203291879584123548614536291210</span>, <span class="hljs-number">41820965969318717978206410470942308653</span>, <span class="hljs-number">207485265608553973031638961376379316991</span>, <span class="hljs-number">126241934830164184030184483965965358511</span>, <span class="hljs-number">20250852993510047910828861636740192486</span>, <span class="hljs-number">103669039044817273633962139070912140023</span>, <span class="hljs-number">97337342479349334554052986501856387313</span>, <span class="hljs-number">159127719377115088432849153087501377529</span>, <span class="hljs-number">45764236700940832554086668329121194445</span>, <span class="hljs-number">35275004033464216369574866255836768148</span>, <span class="hljs-number">52905563179465420745275423120979831405</span>, <span class="hljs-number">17032180473319795641143474346227445013</span>, <span class="hljs-number">29477780450507011415073117531375947096</span>, <span class="hljs-number">55487351149573346854028771906741727601</span>, <span class="hljs-number">121576510894250531063152466107000055279</span>, <span class="hljs-number">69959515052241122548546701060784004682</span>, <span class="hljs-number">173839335744520746760315021378911211216</span>, <span class="hljs-number">28266103662329817802592951699263023295</span>, <span class="hljs-number">194965730205655016437216590690038884309</span>, <span class="hljs-number">208284966254343254016582889051763066574</span>, <span class="hljs-number">137680272193449000169293006333866420934</span>, <span class="hljs-number">250634504150859449051246497912830488025</span>, <span class="hljs-number">124228075953362483108097926850143387433</span>, <span class="hljs-number">232956176229023369857830577971626577196</span>, <span class="hljs-number">149441784891021006224395235471825205661</span>, <span class="hljs-number">118758326165875568431376314508740278934</span>, <span class="hljs-number">222296215466271835013184903421917936512</span>, <span class="hljs-number">49132466023594939909761224481560782731</span>, <span class="hljs-number">406286678537520849308828749751513339</span>, <span class="hljs-number">215122152883292859254246948661946520324</span>, <span class="hljs-number">81283590250399459209567683991648438199</span>, <span class="hljs-number">150395133067480380674905743031927410663</span>, <span class="hljs-number">5710878479977467762548400320726575491</span>, <span class="hljs-number">83627753774286426170934105100463456109</span>, <span class="hljs-number">164968224377869331545649899270867630850</span>, <span class="hljs-number">241057183685774160581265732812497247167</span>, <span class="hljs-number">109136287048010096863680430193408099828</span>, <span class="hljs-number">116313129605409961931811582899075031153</span>, <span class="hljs-number">202739016625709380026000805340243458300</span>, <span class="hljs-number">25408225921774957745573142542576755590</span>, <span class="hljs-number">151336258796933656160956289529558246702</span>, <span class="hljs-number">2947189044370494063643525166023973095</span>, <span class="hljs-number">228678413963736672394976193093568181979</span>, <span class="hljs-number">40627063032321835707220414670018641024</span>, <span class="hljs-number">55446789315226949622969082042881319148</span>, <span class="hljs-number">32219108726651509070669836923591948459</span>, <span class="hljs-number">134454924722414419191920784435633637634</span>, <span class="hljs-number">97952023967728640730045857104376826039</span>, <span class="hljs-number">20659076942504417479953787092276592682</span>, <span class="hljs-number">93281761173713729777326842152860901050</span>, <span class="hljs-number">133634773495582264000160065317239987936</span>, <span class="hljs-number">79976720152435218818731114555425458470</span>, <span class="hljs-number">234654694673289327542859971371886984118</span>, <span class="hljs-number">51332273108989067644245919615090753756</span>, <span class="hljs-number">134120280423303717489979349737802826605</span>, <span class="hljs-number">182001158305920226320085758522717203725</span>, <span class="hljs-number">98408798757865562737462169470346158516</span>, <span class="hljs-number">78200435603900368619334272308272773797</span>, <span class="hljs-number">232796357836930341547987600782979821555</span>, <span class="hljs-number">589106968861493082018132081244848952</span>, <span class="hljs-number">24186003230092331554886767628744415123</span>, <span class="hljs-number">236070626491251466741246103662922841423</span>, <span class="hljs-number">238699080882667864827094121849090696547</span>, <span class="hljs-number">141659873734297659078160283051728812410</span>, <span class="hljs-number">228977113517120063860252637394240795552</span>, <span class="hljs-number">236613527842969921794004708284265628300</span>, <span class="hljs-number">145522034982744654991661857596541755396</span>, <span class="hljs-number">249608374387044047328725156440984678776</span>, <span class="hljs-number">325110572051913836681821746093704556</span>, <span class="hljs-number">171492052199838424502681030556098576483</span>, <span class="hljs-number">156498865212994371079795360268866413702</span>, <span class="hljs-number">196747701509389071931992996873572785043</span>, <span class="hljs-number">70811811603137896158765356680364490781</span>, <span class="hljs-number">83672551582385607422240464086955462541</span>, <span class="hljs-number">117961603623637997457153763936550310698</span>, <span class="hljs-number">224448821395214505399297116719025174412</span>, <span class="hljs-number">4598815373009554321735225938200807251</span>, <span class="hljs-number">194892269604260726530091473301914449005</span>, <span class="hljs-number">127484628022155760909820605666827662175</span>, <span class="hljs-number">208706240846212140439291547368645656474</span>, <span class="hljs-number">14102286481104997303651684152195298336</span>, <span class="hljs-number">6129503335471304345451795609683770657</span>, <span class="hljs-number">103799668048593149396277157385628834185</span>, <span class="hljs-number">185813375481410513002496683918106238351</span>, <span class="hljs-number">233491689316882978147517340230794025796</span>, <span class="hljs-number">46274083097168831187719988888816378961</span>, <span class="hljs-number">119487551553664772614629936285345836934</span>, <span class="hljs-number">84340029922118279362389419277915602509</span>, <span class="hljs-number">88253743193124528032223101368846247085</span>, <span class="hljs-number">227895357640018330099501504941388167432</span>, <span class="hljs-number">92189947144174433744195727086236905626</span>, <span class="hljs-number">83114957902192791332190922428847199876</span>, <span class="hljs-number">173535754090441937731619031520699325122</span>, <span class="hljs-number">192309407933789484835602071782330798398</span>, <span class="hljs-number">255421921600128994923738650157598053776</span>, <span class="hljs-number">155535082468314012733563336837641958625</span>, <span class="hljs-number">49064798421022327310707074253263463055</span>, <span class="hljs-number">161216416471071644769301963857685054031</span>, <span class="hljs-number">252480348817188872515008985698620059851</span>, <span class="hljs-number">75854882798183185741756645038434215611</span>, <span class="hljs-number">256065006192683011190132982128640682537</span>, <span class="hljs-number">87507510173514424105732562474643251223</span>, <span class="hljs-number">163309795132131534875147566536485288212</span>, <span class="hljs-number">253583084320404985699510129361746869059</span>, <span class="hljs-number">253300112521651972637580307326576568313</span>, <span class="hljs-number">239027717080729650738678032571840680727</span>, <span class="hljs-number">117444657686971615526398894470673026034</span>, <span class="hljs-number">215470942802874046857958621181684551426</span>, <span class="hljs-number">58767098748728136687851735836323448020</span>, <span class="hljs-number">249357164697409977883764098879705065535</span>, <span class="hljs-number">174705348385893117518084017669958647345</span>, <span class="hljs-number">211108767177375215605155301209259781232</span>, <span class="hljs-number">57829566748907062397366819001461941421</span>, <span class="hljs-number">88265742700024922112974862134385921564</span>, <span class="hljs-number">80952107622167923709226013231566882261</span>, <span class="hljs-number">236078582132483864916117213281193714198</span>, <span class="hljs-number">193448482646563141692726575550417225891</span>, <span class="hljs-number">245972799166806058223048506073553726233</span>, <span class="hljs-number">10132977708896091601871557249244373666</span>, <span class="hljs-number">201785418152654519825849206312616081028</span>, <span class="hljs-number">15169816744048531212384271865884567710</span>, <span class="hljs-number">122545328290385950043826822277924297182</span>, <span class="hljs-number">202918646192255177261567701479991753600</span>, <span class="hljs-number">32696887488223731055835744711207261936</span>, <span class="hljs-number">88319352182963224921157305627381030375</span>, <span class="hljs-number">92381505322264045777004475690398861771</span>, <span class="hljs-number">189745654013352563126968415157143821842</span>, <span class="hljs-number">152254915005998949299817641843658795579</span>, <span class="hljs-number">198032433618991362619448347415342295581</span>, <span class="hljs-number">84073892809321676935569114878067118319</span>, <span class="hljs-number">82243805869584256211699602267760745768</span>, <span class="hljs-number">61994229948266781537191603999495995852</span>, <span class="hljs-number">253668765227759797787675352833142466255</span>, <span class="hljs-number">38865376724677211964966907748953557125</span>, <span class="hljs-number">134615436811268347303232550777225944929</span>, <span class="hljs-number">176932422465426107783498083830285780588</span>, <span class="hljs-number">207573742393618910694054452362826628208</span>, <span class="hljs-number">200033130835394442710748301293534928706</span>, <span class="hljs-number">127536063935293533700918451145963158658</span>, <span class="hljs-number">219125698281820710910675956971948816959</span>, <span class="hljs-number">179795893258398750139395156587561075767</span>, <span class="hljs-number">69649628109726874051635160004398498964</span>, <span class="hljs-number">241433717681314766463039563422535023524</span>, <span class="hljs-number">202664264135718511331695232476272832350</span>, <span class="hljs-number">205151096657425932591242432052912914182</span>, <span class="hljs-number">210305712465948130683966275157181140301</span>, <span class="hljs-number">196555690055906934925300527324955477733</span>, <span class="hljs-number">66817932643964538216259564711698986077</span>, <span class="hljs-number">95270796440975607179107356182889534333</span>, <span class="hljs-number">123226880424532374188134357659879826495</span>, <span class="hljs-number">53506495440223773538415807620524749240</span>, <span class="hljs-number">19253217887083870834249774316467647628</span>, <span class="hljs-number">165699356396365023442008488156823647206</span>, <span class="hljs-number">107809175498119862854792975070673056027</span>, <span class="hljs-number">250453989887421415931162217952559757164</span>, <span class="hljs-number">171492052199838424502681030556098576483</span>, <span class="hljs-number">133778166882550119563444625306816232463</span>, <span class="hljs-number">149009301604122447269581792013291889175</span>, <span class="hljs-number">9982418254629616281350713836647603294</span>, <span class="hljs-number">203486292122499140756846060502464655972</span>, <span class="hljs-number">157686696123400087437836943220926921848</span>, <span class="hljs-number">88338919773540412238116717043122711811</span>, <span class="hljs-number">113265824169274322024623493892867211478</span>, <span class="hljs-number">5549372099744960679418616304893848801</span>, <span class="hljs-number">12431828907518852062050349123660880165</span>, <span class="hljs-number">183957934738536914983862053251433028750</span>, <span class="hljs-number">42027289270308356303682029801998790750</span>, <span class="hljs-number">117406080036483925915502666019795783905</span>, <span class="hljs-number">154312255292300186042636734144948304054</span>, <span class="hljs-number">143706917273862261295046346995206133170</span>, <span class="hljs-number">50088136095338601440516112338120787526</span>, <span class="hljs-number">250634504150859449051246497912830488025</span>, <span class="hljs-number">8073010289877796888705519374892639903</span>, <span class="hljs-number">40049582814576788803483039836229025416</span>, <span class="hljs-number">227012342545923833983403067401561291645</span>, <span class="hljs-number">201776603581414625783054400184026088994</span>, <span class="hljs-number">55474945478884522762318445841998187357</span>, <span class="hljs-number">221515530211550293408010846844218019597</span>, <span class="hljs-number">172650752042211610909190315288155597255</span>, <span class="hljs-number">67046194931321172530462444254204111483</span>, <span class="hljs-number">207435868835185636819659137800256834557</span>, <span class="hljs-number">188063222224545200294767050268070647452</span>, <span class="hljs-number">58099349021260301211275261896736590564</span>, <span class="hljs-number">23598877596106927870697531042828774738</span>, <span class="hljs-number">58546308516383335224739442370238545000</span>, <span class="hljs-number">58125311541947998710088435169901475101</span>, <span class="hljs-number">238219925698115060748249043752036454438</span>, <span class="hljs-number">203910234934340893915761800653823457631</span>, <span class="hljs-number">190854889967769152565565000250829375099</span>, <span class="hljs-number">37573623890629846209257307181880876288</span>, <span class="hljs-number">226220240200270623843038279593586687278</span>, <span class="hljs-number">144246075981535671790438155977352345487</span>, <span class="hljs-number">14665770553338784222331493932533448756</span>, <span class="hljs-number">37992062606775322664977502677838074649</span>, <span class="hljs-number">47370175759976523832233910009306151684</span>, <span class="hljs-number">97047813247943880266351445874642842468</span>, <span class="hljs-number">237607444658797800072728280983357541134</span>, <span class="hljs-number">174853113478993738890584814806707459112</span>, <span class="hljs-number">17104608155861584438824639050715857607</span>, <span class="hljs-number">83639027011494777283064583268678718843</span>, <span class="hljs-number">237826165608708003941944469905843354705</span>, <span class="hljs-number">231707683915242052796886276983724691027</span>, <span class="hljs-number">146089830852925550139294146760718642221</span>, <span class="hljs-number">25604562707667550478623425477029052785</span>, <span class="hljs-number">108577663147976992047614498924706939204</span>, <span class="hljs-number">69040319834829375335287614995435269276</span>, <span class="hljs-number">169933229202934375632745753379104389929</span>, <span class="hljs-number">72693008284867494808267387710985847974</span>, <span class="hljs-number">158548279589965576940349068403862889270</span>, <span class="hljs-number">49458101234256610254825879149914255140</span>, <span class="hljs-number">24389558269688411084589654047215902968</span>, <span class="hljs-number">210567980379246548727819953025607019254</span>, <span class="hljs-number">110423375132252997825868399832298953831</span>, <span class="hljs-number">109589895677661968369424757992411668628</span>, <span class="hljs-number">66177577069199763925999718357846633613</span>, <span class="hljs-number">83602293803708828242273186265396676466</span>, <span class="hljs-number">172226271050176278536911356541786290551</span>, <span class="hljs-number">85799805809703976643034084477579915867</span>, <span class="hljs-number">179399990302447560847151603157937241688</span>, <span class="hljs-number">81687654752229170984692833277072534294</span>, <span class="hljs-number">160766441640281044008645821822296569868</span>, <span class="hljs-number">100306680611749750243920501921769642984</span>, <span class="hljs-number">42195187332833922597871030332905266026</span>, <span class="hljs-number">238918420772178508359295233180536910768</span>, <span class="hljs-number">221685929158944699801776621298532178665</span>, <span class="hljs-number">209349638787804999657456057184702655805</span>, <span class="hljs-number">183953393268431043006359511952782903516</span>, <span class="hljs-number">137364333131365794683132159746962959967</span>, <span class="hljs-number">15637689373906596015395350692459218048</span>, <span class="hljs-number">145956368418289159411911667337899986262</span>, <span class="hljs-number">197987711355277581048877821432652325207</span>, <span class="hljs-number">125421308989313724733467092345532539875</span>, <span class="hljs-number">90525081516582408488547894471421476595</span>, <span class="hljs-number">107405840115256692042814887586009104950</span>, <span class="hljs-number">71587500700172519801649824611045199280</span>, <span class="hljs-number">10155721246869986043302768283257682883</span>, <span class="hljs-number">100522792569358427133597834727509523742</span>, <span class="hljs-number">244473925018526409824670892423775482110</span>, <span class="hljs-number">50746138425761666610345252577572889037</span>, <span class="hljs-number">142188269919422432629363225167297071042</span>, <span class="hljs-number">8235113926890598897465093754260801947</span>, <span class="hljs-number">174540885017405784646782293055852044631</span>, <span class="hljs-number">171949847901434672429841435895697323702</span>, <span class="hljs-number">34391199559497599434575002007581170988</span>, <span class="hljs-number">7337868660819385932166025474594964373</span>, <span class="hljs-number">89608475952042154068811282935241824949</span>, <span class="hljs-number">162561097613906905390170334328135062933</span>, <span class="hljs-number">252566077272083954707900007055640560669</span>, <span class="hljs-number">4284637988579219107997224848114896904</span>, <span class="hljs-number">220026371387782427901244689037957398829</span>, <span class="hljs-number">86019060485320999498155965142619258089</span>, <span class="hljs-number">19304861731281576405798605142335886482</span>, <span class="hljs-number">123188238667151068575810494833929221938</span>, <span class="hljs-number">125089740978532716086813732154638565196</span>, <span class="hljs-number">252061524500088702951562270741214799294</span>, <span class="hljs-number">89528875472312768404823823905699760649</span>, <span class="hljs-number">63307407053590054220492282094909190524</span>, <span class="hljs-number">24389558269688411084589654047215902968</span>, <span class="hljs-number">43835777110183833958990705735152973942</span>, <span class="hljs-number">196543204310466258426232803779025620993</span>, <span class="hljs-number">225032412767857179129234169288824097261</span>, <span class="hljs-number">50292890880286260984317361296226049436</span>, <span class="hljs-number">64928956886509273090981701066528078331</span>, <span class="hljs-number">25408225921774957745573142542576755590</span>, <span class="hljs-number">235921667882292842303120860570747218086</span>, <span class="hljs-number">217132603855089441017750752624514343437</span>, <span class="hljs-number">11106129204256119599329380588789107048</span>, <span class="hljs-number">147501327490657927610543345089238991876</span>, <span class="hljs-number">158091159632919983870444592039392730373</span>, <span class="hljs-number">254215886971254771885657857148535673338</span>, <span class="hljs-number">129869106474614345624950211566868568809</span>, <span class="hljs-number">10425702332274469498479699675668087022</span>, <span class="hljs-number">136595953187315682777976356839442311764</span>, <span class="hljs-number">1607792140397737044118662059498732982</span>, <span class="hljs-number">23710000155612873207506044342091514799</span>, <span class="hljs-number">118571340370877720354330132780832828911</span>, <span class="hljs-number">194624784476702188629452374731837038856</span>, <span class="hljs-number">51332273108989067644245919615090753756</span>, <span class="hljs-number">240921043405288511960365826273938845156</span>, <span class="hljs-number">158670188709175825212687487436006138030</span>, <span class="hljs-number">133641825913283256858340618209700716053</span>, <span class="hljs-number">43054466484232130048301271684438593412</span>, <span class="hljs-number">20361972967806283315536154125012604660</span>, <span class="hljs-number">135700832615866572032111395529532615300</span>, <span class="hljs-number">160609169788639387827865051539103507016</span>, <span class="hljs-number">100576279475451993660766480883708996211</span>, <span class="hljs-number">215424685541583305069271024253690375127</span>, <span class="hljs-number">60018956375784961551937423504137141702</span>, <span class="hljs-number">107997941230633604720421526632224279451</span>, <span class="hljs-number">219482010609171816035007605036664317041</span>, <span class="hljs-number">22173526221024380740269311947729076493</span>, <span class="hljs-number">249746554302052221287371350978970766087</span>, <span class="hljs-number">93207359085331319264650563354951254906</span>, <span class="hljs-number">221421697282310997113867048083058096452</span>, <span class="hljs-number">61834092635779365101011109381392037516</span>, <span class="hljs-number">162215218701897689647766394615098617152</span>, <span class="hljs-number">141856131587452385513407955541400099703</span>, <span class="hljs-number">177910903795887762773545874929605680469</span>, <span class="hljs-number">228832704523723308335513552177377803295</span>, <span class="hljs-number">229427981969125094398744034150988525118</span>, <span class="hljs-number">217938760689082034514008764751385239765</span>, <span class="hljs-number">3238055163645731541423094980789895030</span>, <span class="hljs-number">42308449860804765793467328093112118974</span>, <span class="hljs-number">254764518926620089428032312378507653680</span>, <span class="hljs-number">215733901156118606036318409454786603209</span>, <span class="hljs-number">59640829345183339336712595595022506261</span>, <span class="hljs-number">33515071724475649656070325837411550208</span>, <span class="hljs-number">51175659069843551646353202764296812462</span>, <span class="hljs-number">211462959696081863041546889096760952490</span>, <span class="hljs-number">230559603938699838189391087728971115767</span>, <span class="hljs-number">85878911733601049548471257838175175563</span>, <span class="hljs-number">214134904074265214033878852207103328297</span>, <span class="hljs-number">160702405980652445507529591230654474171</span>, <span class="hljs-number">223755040649990285320102091954198427148</span>, <span class="hljs-number">166476753890268002826149533120107157745</span>, <span class="hljs-number">26283916639129998224675164834425763384</span>, <span class="hljs-number">232971495542024495583092055361321729894</span>, <span class="hljs-number">79741799146769724681649849525636816379</span>, <span class="hljs-number">228506526471280046809909301748098760369</span>, <span class="hljs-number">167502422063741368765891061653686283332</span>, <span class="hljs-number">26984184590668253713951516794937308166</span>, <span class="hljs-number">105952393031190074432183821281493254</span>, <span class="hljs-number">113823192955281698937767041115166174652</span>, <span class="hljs-number">93264047694114869263275726820602569731</span>, <span class="hljs-number">55481974783112950660682138071588408040</span>, <span class="hljs-number">108961894273530837550182447112767144669</span>, <span class="hljs-number">47975793549419083945738147934068241928</span>, <span class="hljs-number">204024371586357035343484206754422857590</span>, <span class="hljs-number">251859351272989525849999231358507018068</span>, <span class="hljs-number">75939709807860493804628805619699991501</span>, <span class="hljs-number">129031774446142139804436921156668129187</span>, <span class="hljs-number">110764318451937254261883856778359218969</span>, <span class="hljs-number">246404864722813298477426808193494673610</span>, <span class="hljs-number">153818236564405157581869620439634140065</span>, <span class="hljs-number">246125932167584353084676586883038397451</span>]<br><br><span class="hljs-comment"># 预计算16位素数</span><br>primes_16bit = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>**<span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> isPrime(i)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_bit</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]:  <span class="hljs-comment"># 尝试0和1</span><br>        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):  <span class="hljs-comment"># 尝试d从1到10</span><br>            <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> primes_16bit:  <span class="hljs-comment"># 尝试所有16位素数</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(a + b*d, e, p) == n:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(b)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;?&#x27;</span>  <span class="hljs-comment"># 未找到</span><br><br><span class="hljs-comment"># 解密所有位</span><br>plain_bits = []<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> tqdm(ciphertext):<br>    plain_bits.append(decrypt_bit(n))<br><br><span class="hljs-comment"># 将二进制字符串转换回字节</span><br>plaintext = <span class="hljs-string">&#x27;&#x27;</span>.join(plain_bits)<br>flag = <span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">int</span>(plaintext[i:i+<span class="hljs-number">8</span>], <span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(plaintext), <span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>flag：b‘moectf{Y0u_h@v3_ju5t_s01v3d_7h1s_pr0b13m!}’</p><p>总结：为数不多能ak的密码（如果后续不上题的话），刚学两三个月的密码手适合做，可以增强一下信心以及练一下基本功</p><p>最后，测试一下图片：</p><p><img src="/2025/08/09/2025moectf(Crypto)/099f596209ac5396bf92b5f661c7ed24.jpeg" alt="099f596209ac5396bf92b5f661c7ed24"></p><p>哦，后续会继续上题</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
