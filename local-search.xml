<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2025Lilctf(Reverse)</title>
    <link href="/2025/08/15/2025Lilctf(Revese)/"/>
    <url>/2025/08/15/2025Lilctf(Revese)/</url>
    
    <content type="html"><![CDATA[<h1 id="2025Lilctf-Reverse"><a href="#2025Lilctf-Reverse" class="headerlink" title="2025Lilctf(Reverse)"></a>2025Lilctf(Reverse)</h1><h2 id="1-ARM-ASM"><a href="#1-ARM-ASM" class="headerlink" title="1.ARM ASM"></a>1.<strong>ARM ASM</strong></h2><p>发现是apk，放到jadx看一下，发现：</p><p><img src="/2025/08/15/2025Lilctf(Revese)/image-20250815220846564.png" alt="image-20250815220846564"></p><p>然后ida打开看到：</p><p><img src="/2025/08/15/2025Lilctf(Revese)/image-20250815220944516.png" alt="image-20250815220944516"></p><p>找到这三个关键函数以及：</p><p><img src="/2025/08/15/2025Lilctf(Revese)/image-20250815221012488.png" alt="image-20250815221012488"></p><p>推测是变表和移位的base64，扔给ai分析一下，生成脚本：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment"># 自定义Base64表</span><br>custom_b64_table = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ3456780129+/&quot;</span><br>standard_b64_table = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><br><span class="hljs-comment"># 目标密文</span><br>target_b64 = <span class="hljs-string">&quot;KRD2c1XRSJL9e0fqCIbiyJrHW1bu0ZnTYJvYw1DM2RzPK1XIQJnN2ZfRMY4So09S&quot;</span><br><br><span class="hljs-comment"># 转换到标准Base64</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">to_standard_b64</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> s.translate(<span class="hljs-built_in">str</span>.maketrans(custom_b64_table, standard_b64_table))<br><br><span class="hljs-comment"># 解码Base64</span><br>std_b64_str = to_standard_b64(target_b64)<br>decoded = base64.b64decode(std_b64_str)<br>data = <span class="hljs-built_in">list</span>(decoded)  <span class="hljs-comment"># 解码后的48字节数据</span><br><br><span class="hljs-comment"># 移位逆操作（每3字节一组）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_shift</span>(<span class="hljs-params">data</span>):<br>    result = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(data), <span class="hljs-number">3</span>):<br>        <span class="hljs-comment"># 第1字节：循环右移3位（加密时循环左移3位）</span><br>        b0 = data[i]<br>        b0 = ((b0 &gt;&gt; <span class="hljs-number">3</span>) | (b0 &lt;&lt; <span class="hljs-number">5</span>)) &amp; <span class="hljs-number">0xFF</span><br>        <br>        <span class="hljs-comment"># 第2字节：循环左移1位（加密时循环右移1位）</span><br>        b1 = data[i+<span class="hljs-number">1</span>]<br>        b1 = ((b1 &lt;&lt; <span class="hljs-number">1</span>) | (b1 &gt;&gt; <span class="hljs-number">7</span>)) &amp; <span class="hljs-number">0xFF</span><br>        <br>        <span class="hljs-comment"># 第3字节不变</span><br>        b2 = data[i+<span class="hljs-number">2</span>]<br>        result.extend([b0, b1, b2])<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-comment"># 置换表t</span><br>t0 = [<span class="hljs-number">0x0D</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x08</span>, <br>      <span class="hljs-number">0x06</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>]<br><br><span class="hljs-comment"># 构造逆置换表</span><br>inv_t = [<span class="hljs-number">0</span>] * <span class="hljs-number">16</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    inv_t[t0[i]] = i<br><br><span class="hljs-comment"># 三轮变换逆操作（正确密钥）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_blocks</span>(<span class="hljs-params">blocks</span>):<br>    <span class="hljs-comment"># 块0：使用密钥 t0</span><br>    block0 = [blocks[<span class="hljs-number">0</span>][i] ^ t0[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    block0 = [block0[inv_t[i]] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    <br>    <span class="hljs-comment"># 块1：使用密钥 t0</span><br>    block1 = [blocks[<span class="hljs-number">1</span>][i] ^ t0[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    block1 = [block1[inv_t[i]] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    <br>    <span class="hljs-comment"># 块2：使用密钥 t0⊕1（关键修正！）</span><br>    key2 = [b ^ <span class="hljs-number">0x01</span> <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> t0]<br>    block2 = [blocks[<span class="hljs-number">2</span>][i] ^ key2[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    block2 = [block2[inv_t[i]] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>    <br>    <span class="hljs-keyword">return</span> block0 + block1 + block2<br><br><span class="hljs-comment"># 步骤1: 移位逆操作</span><br>data = reverse_shift(data)<br><br><span class="hljs-comment"># 分块（16字节/块）</span><br>blocks = [<br>    data[<span class="hljs-number">0</span>:<span class="hljs-number">16</span>],   <span class="hljs-comment"># 块0: 0-15字节</span><br>    data[<span class="hljs-number">16</span>:<span class="hljs-number">32</span>],  <span class="hljs-comment"># 块1: 16-31字节</span><br>    data[<span class="hljs-number">32</span>:<span class="hljs-number">48</span>]   <span class="hljs-comment"># 块2: 32-47字节</span><br>]<br><br><span class="hljs-comment"># 步骤2: 三轮逆操作（使用正确密钥）</span><br>original_data = reverse_blocks(blocks)<br><br><span class="hljs-comment"># 转换为字符串</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(b) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> original_data)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完整的Flag:&quot;</span>, flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag长度:&quot;</span>, <span class="hljs-built_in">len</span>(flag))<br></code></pre></td></tr></table></figure><p>完整的Flag: LILCTF{ez_arm_asm_meow_meow_meowm_oe_wemwom_oe}w<br>Flag长度: 48</p><p>提交不上，猜了一下，最后试了试这个</p><p>LILCTF{ez_arm_asm_meow_meow_meow_meow_meow_meow}</p><p>提交成功</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025Lilctf(Crypto)</title>
    <link href="/2025/08/15/2025Lilctf(Crypto)/"/>
    <url>/2025/08/15/2025Lilctf(Crypto)/</url>
    
    <content type="html"><![CDATA[<h1 id="2025Lilctf-Crypto"><a href="#2025Lilctf-Crypto" class="headerlink" title="2025Lilctf(Crypto)"></a>2025Lilctf(Crypto)</h1><h2 id="1-ez-math"><a href="#1-ez-math" class="headerlink" title="1.ez_math"></a>1.<strong>ez_math</strong></h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;LILCTF&#123;test_flag&#125;&#x27;</span>[<span class="hljs-number">7</span>:-<span class="hljs-number">1</span>]<br>lambda1 = bytes_to_long(flag[:<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">2</span>])<br>lambda2 = bytes_to_long(flag[<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">2</span>:])<br>p = getPrime(<span class="hljs-number">512</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">vector, c</span>):<br>    <span class="hljs-keyword">return</span> [vector[<span class="hljs-number">0</span>]*c, vector[<span class="hljs-number">1</span>]*c]<br><br>v1 = [getPrime(<span class="hljs-number">128</span>), getPrime(<span class="hljs-number">128</span>)]<br>v2 = [getPrime(<span class="hljs-number">128</span>), getPrime(<span class="hljs-number">128</span>)]<br><br>A = matrix(GF(p), [v1, v2])<br>B = matrix(GF(p), [mul(v1,lambda1), mul(v2,lambda2)])<br>C = A.inverse() * B<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;C = <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(C).replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;,&quot;</span>).replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>).replace(<span class="hljs-string">&quot;[,&quot;</span>, <span class="hljs-string">&quot;[&quot;</span>)&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># p = 9620154777088870694266521670168986508003314866222315790126552504304846236696183733266828489404860276326158191906907396234236947215466295418632056113826161</span><br><span class="hljs-comment"># C = [7062910478232783138765983170626687981202937184255408287607971780139482616525215270216675887321965798418829038273232695370210503086491228434856538620699645,7096268905956462643320137667780334763649635657732499491108171622164208662688609295607684620630301031789132814209784948222802930089030287484015336757787801],[7341430053606172329602911405905754386729224669425325419124733847060694853483825396200841609125574923525535532184467150746385826443392039086079562905059808,2557244298856087555500538499542298526800377681966907502518580724165363620170968463050152602083665991230143669519866828587671059318627542153367879596260872]</span><br><br><br></code></pre></td></tr></table></figure><p>根据矩阵求flag，跟moe那个有点像</p><p><img src="/2025/08/15/2025Lilctf(Crypto)/image-20250815131251617.png" alt="image-20250815131251617"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-comment"># 已知的p和C矩阵元素</span><br>p = <span class="hljs-number">9620154777088870694266521670168986508003314866222315790126552504304846236696183733266828489404860276326158191906907396234236947215466295418632056113826161</span><br>c11 = <span class="hljs-number">7062910478232783138765983170626687981202937184255408287607971780139482616525215270216675887321965798418829038273232695370210503086491228434856538620699645</span><br>c12 = <span class="hljs-number">7096268905956462643320137667780334763649635657732499491108171622164208662688609295607684620630301031789132814209784948222802930089030287484015336757787801</span><br>c21 = <span class="hljs-number">7341430053606172329602911405905754386729224669425325419124733847060694853483825396200841609125574923525535532184467150746385826443392039086079562905059808</span><br>c22 = <span class="hljs-number">2557244298856087555500538499542298526800377681966907502518580724165363620170968463050152602083665991230143669519866828587671059318627542153367879596260872</span><br><br><span class="hljs-comment"># 在GF(p)域上进行计算</span><br>F = GF(p)<br>c11 = F(c11)<br>c12 = F(c12)<br>c21 = F(c21)<br>c22 = F(c22)<br><br><span class="hljs-comment"># 计算特征方程的系数</span><br>sum_c = c11 + c22<br>product_c = c11 * c22 - c12 * c21<br><br><span class="hljs-comment"># 计算判别式和平方根</span><br>D = sum_c^<span class="hljs-number">2</span> - <span class="hljs-number">4</span> * product_c<br>sqrt_D = D.sqrt()<br><br><span class="hljs-comment"># 计算2的逆元</span><br>inv2 = F(<span class="hljs-number">2</span>)^-<span class="hljs-number">1</span><br><br><span class="hljs-comment"># 求解特征值（λ₁和λ₂）</span><br>lambda1 = <span class="hljs-built_in">int</span>((sum_c + sqrt_D) * inv2)<br>lambda2 = <span class="hljs-built_in">int</span>((sum_c - sqrt_D) * inv2)<br><br><span class="hljs-comment"># 转换为字节</span><br>part1 = long_to_bytes(lambda1)<br>part2 = long_to_bytes(lambda2)<br><br><span class="hljs-comment"># 生成可能的flag（两种组合，因为λ₁和λ₂可能顺序互换）</span><br>flag1 = <span class="hljs-string">b&#x27;LILCTF&#123;&#x27;</span> + part1 + part2 + <span class="hljs-string">b&#x27;&#125;&#x27;</span><br>flag2 = <span class="hljs-string">b&#x27;LILCTF&#123;&#x27;</span> + part2 + part1 + <span class="hljs-string">b&#x27;&#125;&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;可能的flag1:&quot;</span>, flag1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;可能的flag2:&quot;</span>, flag2)<br><br></code></pre></td></tr></table></figure><p>可能的flag1: b’LILCTF{It_w4s_the_be5t_of_times_1t_wa5_the_w0rst_of_t1me5}’<br>可能的flag2: b’LILCTF{1t_wa5_the_w0rst_of_t1me5It_w4s_the_be5t_of_times_}’</p><h2 id="2-linear"><a href="#2-linear" class="headerlink" title="2.linear"></a>2.linear</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> signal<br><br>signal.alarm(<span class="hljs-number">10</span>)<br><br>flag = os.getenv(<span class="hljs-string">&quot;LILCTF_FLAG&quot;</span>, <span class="hljs-string">&quot;LILCTF&#123;default&#125;&quot;</span>)<br><br>nrows = <span class="hljs-number">16</span><br>ncols = <span class="hljs-number">32</span><br><br>A = [[random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">1919810</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ncols)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nrows)]<br>x = [random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">114514</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ncols)]<br><br>b = [<span class="hljs-built_in">sum</span>(A[i][j] * x[j] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ncols)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nrows)]<br><span class="hljs-built_in">print</span>(A)<br><span class="hljs-built_in">print</span>(b)<br><br>xx = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter your solution: &quot;</span>).strip().split()))<br><span class="hljs-keyword">if</span> xx != x:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Oh, your linear algebra needs to be practiced.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Bravo! Here is your flag:&quot;</span>)<br>    <span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><p>比较简单的一个线性代数题，但是一般求出来的结果好像不准确，那么我们可以使用格基来求解，问题是要求是10s限制比较麻烦，因为我不会在sagemath连端口，所以就用vscode连接端口，使用sagemath出x，这样的话再复制到交互端口就好了</p><p>sagemath：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 读取文本数据</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;E:/edge下载/CTF/2025LilCTF/Crypto/problem_data.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    data = file.read()<br><br><span class="hljs-comment"># 假设数据的格式是类似于JSON或Python列表的结构</span><br><span class="hljs-comment"># 你可以手动解析文件内容，假设数据格式是这样的：</span><br><span class="hljs-comment"># A = [[...], [...], ...] 和 b = [...], 你可以使用eval()或json.loads()来解析</span><br><span class="hljs-keyword">import</span> ast<br><br><span class="hljs-comment"># 假设 data 中有 A 和 b 的定义</span><br>A = ast.literal_eval(data.split(<span class="hljs-string">&quot;A = &quot;</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot;b = &quot;</span>)[<span class="hljs-number">0</span>].strip())  <span class="hljs-comment"># 提取并解析A</span><br>b = ast.literal_eval(data.split(<span class="hljs-string">&quot;b = &quot;</span>)[<span class="hljs-number">1</span>].strip())  <span class="hljs-comment"># 提取并解析b</span><br><br><span class="hljs-comment"># 之后使用这些数据进行计算</span><br>n = <span class="hljs-number">32</span>  <span class="hljs-comment"># 变量数</span><br>m = <span class="hljs-number">16</span>  <span class="hljs-comment"># 方程数</span><br>W = <span class="hljs-number">2</span>**<span class="hljs-number">40</span>  <span class="hljs-comment"># 权重</span><br><br><span class="hljs-comment"># 构造格基矩阵</span><br>M = matrix(ZZ, n+<span class="hljs-number">1</span>, n+m)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    M[i, i] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        M[i, n+j] = A[j][i] * W  <span class="hljs-comment"># 注意：A是16行32列，所以A[j][i]是第j行第i列</span><br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    M[n, n+j] = b[j] * W<br><br><span class="hljs-comment"># LLL约简（使用更快参数）</span><br>M_lll = M.LLL(delta=<span class="hljs-number">0.99</span>, eta=<span class="hljs-number">0.51</span>)<br><br><span class="hljs-comment"># 寻找解</span><br>solution = <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>):<br>    <span class="hljs-comment"># 检查后m个分量是否全为0</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">all</span>(M_lll[i, n+j] == <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)):<br>        x_sol = [<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">int</span>(M_lll[i, j])) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-comment"># 将解限制在[1,114514]范围内</span><br>        x_sol = [<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">min</span>(x, <span class="hljs-number">114514</span>)) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> x_sol]<br>        solution = x_sol<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># 如果LLL未找到解，使用伪逆作为备选</span><br><span class="hljs-keyword">if</span> solution <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LLL未找到解，使用伪逆法...&quot;</span>)<br>    A_np = matrix(RDF, A)<br>    b_np = vector(RDF, b)<br>    x_float = A_np.pseudoinverse() * b_np<br>    solution = [<span class="hljs-built_in">int</span>(<span class="hljs-built_in">round</span>(num)) <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> x_float]<br>    solution = [<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">min</span>(x, <span class="hljs-number">114514</span>)) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> solution]<br><br><span class="hljs-comment"># 打印解（复制这个到client.py）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">80</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解x (复制这个到client.py):&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, solution)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">80</span>)<br><br><span class="hljs-comment"># 验证解（可选）</span><br>b_calculated = [<span class="hljs-built_in">sum</span>(A[i][j] * solution[j] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)]<br><span class="hljs-keyword">if</span> b_calculated == b:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;验证成功: Ax = b&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;验证失败: Ax ≠ b&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;原始b: <span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;计算b: <span class="hljs-subst">&#123;b_calculated&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>vscode</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 连接到服务器</span><br>    io = remote(<span class="hljs-string">&quot;challenge.xinshi.fun&quot;</span>, <span class="hljs-number">46755</span>)<br>    <br>    <span class="hljs-comment"># 接收数据直到出现输入提示</span><br>    data = <span class="hljs-string">b&quot;&quot;</span><br>    start_time = time.time()<br>    <span class="hljs-keyword">while</span> <span class="hljs-string">b&quot;Enter your solution:&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>        chunk = io.recv(<span class="hljs-number">1024</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> chunk:<br>            <span class="hljs-keyword">break</span><br>        data += chunk<br>        <br>        <span class="hljs-comment"># 超时检查</span><br>        <span class="hljs-keyword">if</span> time.time() - start_time &gt; <span class="hljs-number">15</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Timeout waiting for data!&quot;</span>)<br>            io.close()<br>            <span class="hljs-keyword">return</span><br>    <br>    <span class="hljs-comment"># 提取并保存矩阵A和向量b</span><br>    A_start = data.find(<span class="hljs-string">b&quot;[[&quot;</span>)<br>    A_end = data.find(<span class="hljs-string">b&quot;]]&quot;</span>) + <span class="hljs-number">2</span><br>    b_start = data.find(<span class="hljs-string">b&quot;[&quot;</span>, A_end)<br>    b_end = data.find(<span class="hljs-string">b&quot;]&quot;</span>, b_start) + <span class="hljs-number">1</span><br>    <br>    A_str = data[A_start:A_end].decode()<br>    b_str = data[b_start:b_end].decode()<br>    <br>    <span class="hljs-comment"># 保存到文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;problem_data.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(<span class="hljs-string">f&quot;A = <span class="hljs-subst">&#123;A_str&#125;</span>\n&quot;</span>)<br>        f.write(<span class="hljs-string">f&quot;b = <span class="hljs-subst">&#123;b_str&#125;</span>\n&quot;</span>)<br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;问题数据已保存到 problem_data.txt&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请立即运行SageMath脚本计算解...&quot;</span>)<br>    <br>    <span class="hljs-comment"># 等待用户粘贴解</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n计算完成后，将解x粘贴在这里（空格分隔的32个整数）&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;注意：您有10秒时间完成计算！&quot;</span>)<br>    xx = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>).strip()<br>    <br>    <span class="hljs-comment"># 提交解</span><br>    io.sendline(xx.encode())<br>    <br>    <span class="hljs-comment"># 获取结果</span><br>    <span class="hljs-keyword">try</span>:<br>        result = io.recvall(timeout=<span class="hljs-number">5</span>).decode()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nServer response:&quot;</span>)<br>        <span class="hljs-built_in">print</span>(result)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nTimeout waiting for server response&quot;</span>)<br>    <br>    io.close()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p><img src="/2025/08/15/2025Lilctf(Crypto)/image-20250815171516880.png" alt="image-20250815171516880"></p><p>flag：     LILCTF{60b2bfea-b0f7-4aed-9c94-b2301afd828f}</p><h2 id="3-mid-math"><a href="#3-mid-math" class="headerlink" title="3.mid_math"></a>3.<strong>mid_math</strong></h2><p>原题：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><br>flag = <span class="hljs-string">b&#x27;LILCTF&#123;test_flag&#125;&#x27;</span><br><br>p = getPrime(<span class="hljs-number">64</span>)<br>P = GF(p)<br><br>key = randint(<span class="hljs-number">2</span>**<span class="hljs-number">62</span>, p)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">vector, c</span>):<br>    <span class="hljs-keyword">return</span> [vector[<span class="hljs-number">0</span>]*c, vector[<span class="hljs-number">1</span>]*c, vector[<span class="hljs-number">2</span>]*c, vector[<span class="hljs-number">3</span>]*c, vector[<span class="hljs-number">4</span>]*c]<br><br>v1 = [getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>)]<br>v2 = [getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>)]<br>v3 = [getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>)]<br>v4 = [getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>)]<br>v5 = [getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>)]<br>a, b, c, d, e = getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>), getPrime(<span class="hljs-number">64</span>),  <span class="hljs-number">0</span><br><br>A = matrix(P, [v1, v2, v3, v4, v5])<br>B = matrix(P, [mul(v1,a), mul(v2,b), mul(v3, c), mul(v4, d), mul(v5, e)])<br>C = A.inverse() * B<br>D = C**key<br><br>key = pad(long_to_bytes(key), <span class="hljs-number">16</span>)<br>aes = AES.new(key,AES.MODE_ECB)<br>msg = aes.encrypt(pad(flag, <span class="hljs-number">64</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;C = <span class="hljs-subst">&#123;[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> C]&#125;</span>&#x27;</span>.replace(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>).replace(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;D = <span class="hljs-subst">&#123;[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> D]&#125;</span>&#x27;</span>.replace(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>).replace(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;msg = <span class="hljs-subst">&#123;msg&#125;</span>&quot;</span>)<br><br><span class="hljs-comment">#p = 14668080038311483271</span><br><span class="hljs-comment">#C = [[11315841881544731102, 2283439871732792326, 6800685968958241983, 6426158106328779372, 9681186993951502212], [4729583429936371197, 9934441408437898498, 12454838789798706101, 1137624354220162514, 8961427323294527914], [12212265161975165517, 8264257544674837561, 10531819068765930248, 4088354401871232602, 14653951889442072670], [6045978019175462652, 11202714988272207073, 13562937263226951112, 6648446245634067896, 13902820281072641413], [1046075193917103481, 3617988773170202613, 3590111338369894405, 2646640112163975771, 5966864698750134707]]</span><br><span class="hljs-comment">#D = [[1785348659555163021, 3612773974290420260, 8587341808081935796, 4393730037042586815, 10490463205723658044], [10457678631610076741, 1645527195687648140, 13013316081830726847, 12925223531522879912, 5478687620744215372], [9878636900393157276, 13274969755872629366, 3231582918568068174, 7045188483430589163, 5126509884591016427], [4914941908205759200, 7480989013464904670, 5860406622199128154, 8016615177615097542, 13266674393818320551], [3005316032591310201, 6624508725257625760, 7972954954270186094, 5331046349070112118, 6127026494304272395]]</span><br><span class="hljs-comment">#msg = b&quot;\xcc]B:\xe8\xbc\x91\xe2\x93\xaa\x88\x17\xc4\xe5\x97\x87@\x0fd\xb5p\x81\x1e\x98,Z\xe1n`\xaf\xe0%:\xb7\x8aD\x03\xd2Wu5\xcd\xc4#m&#x27;\xa7\xa4\x80\x0b\xf7\xda8\x1b\x82k#\xc1gP\xbd/\xb5j&quot;</span><br><br><br><br><br></code></pre></td></tr></table></figure><p>由于 <code>D = C ** key</code>，我们可以利用矩阵的特征值（eigenvalues）来恢复 <code>key</code>：</p><ol><li><strong>计算 <code>C</code> 和 <code>D</code> 的特征值</strong>：<ul><li><code>C</code> 的特征值 <code>eigC</code> 包含 <code>0</code> 和 4 个非零值。</li><li><code>D</code> 的特征值 <code>eigD</code> 包含 <code>0</code> 和 <code>eigC</code> 的非零值的 <code>key</code> 次幂。</li></ul></li><li><strong>过滤掉 <code>0</code>，得到非零特征值</strong>：<ul><li><code>L1 = [x for x in eigC if x != 0]</code></li><li><code>L2 = [x for x in eigD if x != 0]</code></li></ul></li><li><strong>通过离散对数恢复 <code>key</code></strong>：<ul><li>对 <code>L1</code> 和 <code>L2</code> 中的每一对 <code>(x, y)</code>，解 <code>y = x ** key mod p</code>。</li><li>由于 <code>key</code> 的范围是 <code>[2^62, p]</code>，解出的 <code>k</code> 必须满足这个范围。</li></ul></li><li><strong>验证 <code>key</code></strong>：<ul><li>检查是否 <code>&#123;x ** key for x in L1&#125; == set(L2)</code>。</li></ul></li><li><strong>解密 <code>msg</code></strong>：<ul><li>将 <code>key</code> 转为字节，填充到16字节，用AES-ECB解密 <code>msg</code></li></ul></li></ol><p>ai拷打两下就梭出来了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad, unpad  <span class="hljs-comment"># Import pad and unpad</span><br><br><span class="hljs-comment"># Given data</span><br>p = <span class="hljs-number">14668080038311483271</span><br>C_list = [<br>    [<span class="hljs-number">11315841881544731102</span>, <span class="hljs-number">2283439871732792326</span>, <span class="hljs-number">6800685968958241983</span>, <span class="hljs-number">6426158106328779372</span>, <span class="hljs-number">9681186993951502212</span>],<br>    [<span class="hljs-number">4729583429936371197</span>, <span class="hljs-number">9934441408437898498</span>, <span class="hljs-number">12454838789798706101</span>, <span class="hljs-number">1137624354220162514</span>, <span class="hljs-number">8961427323294527914</span>],<br>    [<span class="hljs-number">12212265161975165517</span>, <span class="hljs-number">8264257544674837561</span>, <span class="hljs-number">10531819068765930248</span>, <span class="hljs-number">4088354401871232602</span>, <span class="hljs-number">14653951889442072670</span>],<br>    [<span class="hljs-number">6045978019175462652</span>, <span class="hljs-number">11202714988272207073</span>, <span class="hljs-number">13562937263226951112</span>, <span class="hljs-number">6648446245634067896</span>, <span class="hljs-number">13902820281072641413</span>],<br>    [<span class="hljs-number">1046075193917103481</span>, <span class="hljs-number">3617988773170202613</span>, <span class="hljs-number">3590111338369894405</span>, <span class="hljs-number">2646640112163975771</span>, <span class="hljs-number">5966864698750134707</span>]<br>]<br>D_list = [<br>    [<span class="hljs-number">1785348659555163021</span>, <span class="hljs-number">3612773974290420260</span>, <span class="hljs-number">8587341808081935796</span>, <span class="hljs-number">4393730037042586815</span>, <span class="hljs-number">10490463205723658044</span>],<br>    [<span class="hljs-number">10457678631610076741</span>, <span class="hljs-number">1645527195687648140</span>, <span class="hljs-number">13013316081830726847</span>, <span class="hljs-number">12925223531522879912</span>, <span class="hljs-number">5478687620744215372</span>],<br>    [<span class="hljs-number">9878636900393157276</span>, <span class="hljs-number">13274969755872629366</span>, <span class="hljs-number">3231582918568068174</span>, <span class="hljs-number">7045188483430589163</span>, <span class="hljs-number">5126509884591016427</span>],<br>    [<span class="hljs-number">4914941908205759200</span>, <span class="hljs-number">7480989013464904670</span>, <span class="hljs-number">5860406622199128154</span>, <span class="hljs-number">8016615177615097542</span>, <span class="hljs-number">13266674393818320551</span>],<br>    [<span class="hljs-number">3005316032591310201</span>, <span class="hljs-number">6624508725257625760</span>, <span class="hljs-number">7972954954270186094</span>, <span class="hljs-number">5331046349070112118</span>, <span class="hljs-number">6127026494304272395</span>]<br>]<br>msg = <span class="hljs-string">b&quot;\xcc]B:\xe8\xbc\x91\xe2\x93\xaa\x88\x17\xc4\xe5\x97\x87@\x0fd\xb5p\x81\x1e\x98,Z\xe1n`\xaf\xe0%:\xb7\x8aD\x03\xd2Wu5\xcd\xc4#m&#x27;\xa7\xa4\x80\x0b\xf7\xda8\x1b\x82k#\xc1gP\xbd/\xb5j&quot;</span><br><br><span class="hljs-comment"># Set up finite field and matrices</span><br>F = GF(p)<br>C = matrix(F, C_list)<br>D = matrix(F, D_list)<br><br><span class="hljs-comment"># Compute eigenvalues</span><br>eigC = C.eigenvalues()<br>eigD = D.eigenvalues()<br><br><span class="hljs-comment"># Remove zero eigenvalues (one for each matrix)</span><br>L1 = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> eigC <span class="hljs-keyword">if</span> x != F(<span class="hljs-number">0</span>)]<br>L2 = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> eigD <span class="hljs-keyword">if</span> x != F(<span class="hljs-number">0</span>)]<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(L1) != <span class="hljs-number">4</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(L2) != <span class="hljs-number">4</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error: Expected 4 non-zero eigenvalues for both matrices.&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Find key by matching eigenvalues via discrete logarithm</span><br>key_candidate = <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    x0 = L1[i]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        y0 = L2[j]<br>        <span class="hljs-keyword">try</span>:<br>            k0 = discrete_log(y0, x0)  <span class="hljs-comment"># Solve y0 = x0^k0 mod p</span><br>            candidates = []<br>            <span class="hljs-comment"># Check if k0 is in the valid range</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-number">2</span>**<span class="hljs-number">62</span> &lt;= k0 &lt;= p:<br>                candidates.append(k0)<br>            <span class="hljs-comment"># If k0 is too small, try k0 + order of x0</span><br>            <span class="hljs-keyword">if</span> k0 &lt; <span class="hljs-number">2</span>**<span class="hljs-number">62</span>:<br>                ord_val = x0.multiplicative_order()<br>                k1 = k0 + ord_val<br>                <span class="hljs-keyword">if</span> <span class="hljs-number">2</span>**<span class="hljs-number">62</span> &lt;= k1 &lt;= p:<br>                    candidates.append(k1)<br>            <span class="hljs-comment"># Verify candidate keys</span><br>            <span class="hljs-keyword">for</span> k_cand <span class="hljs-keyword">in</span> candidates:<br>                S = <span class="hljs-built_in">set</span>(x**k_cand <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> L1)<br>                <span class="hljs-keyword">if</span> S == <span class="hljs-built_in">set</span>(L2):<br>                    key_candidate = k_cand<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found key: <span class="hljs-subst">&#123;key_candidate&#125;</span>&quot;</span>)<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> key_candidate <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> key_candidate <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> key_candidate <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to find key.&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Decrypt the message using the recovered key</span><br>key_bytes = long_to_bytes(key_candidate)<br><span class="hljs-comment"># Pad the key to 16 bytes for AES</span><br>key_padded = pad(key_bytes, <span class="hljs-number">16</span>)  <span class="hljs-comment"># Now pad is imported</span><br>aes = AES.new(key_padded, AES.MODE_ECB)<br>flag_padded = aes.decrypt(msg)<br>flag = unpad(flag_padded, <span class="hljs-number">64</span>)  <span class="hljs-comment"># Original padding was 64 bytes</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Flag: <span class="hljs-subst">&#123;flag.decode()&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p> key: 5273966641785501202</p><p>flag：LILCTF{Are_y0u_5till_4wake_que5t1on_m4ker!}</p><h2 id="4-Space-Travel"><a href="#4-Space-Travel" class="headerlink" title="4.Space Travel"></a>4.<strong>Space Travel</strong></h2><p>原题：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">from</span> params <span class="hljs-keyword">import</span> vecs<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><br>key = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join([vecs[<span class="hljs-built_in">int</span>.from_bytes(urandom(<span class="hljs-number">2</span>)) &amp; <span class="hljs-number">0xfff</span>] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>)]), <span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;🎁 :&quot;</span>, [[nonce := <span class="hljs-built_in">int</span>(urandom(<span class="hljs-number">50</span>*<span class="hljs-number">2</span>).<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>), (<span class="hljs-built_in">bin</span>(nonce &amp; key).count(<span class="hljs-string">&quot;1&quot;</span>)) % <span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">600</span>)])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;🚩 :&quot;</span>, AES.new(key=md5(<span class="hljs-built_in">str</span>(key).encode()).digest(), nonce=<span class="hljs-string">b&quot;Tiffany&quot;</span>, mode=AES.MODE_CTR).encrypt(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()))<br></code></pre></td></tr></table></figure><p>1.题面逻辑（来自 <code>task.py</code>）</p><ul><li>先从 <code>params.py</code> 里的 <code>vecs</code>（4096 个 16 位二进制串）中，用 12 位随机索引各取 50 次，拼成 50×16 &#x3D; 800 位的二进制串，作为大整数 <code>key</code>。</li><li>接着生成 600 组样本：每组里有一个 800 位随机数 <code>nonce</code>，以及一个比特 <code>parity</code>，它等于 <code>bin(nonce &amp; key)</code> 中 1 的个数的奇偶（即 <code>(nonce · key) mod 2</code> 的内积）。</li><li>最后用 <code>md5(str(key))</code> 作为 AES-CTR 的 key，nonce 固定为 <code>&quot;Tiffany&quot;</code>，加密出密文 <code>🚩</code>。</li></ul><p>2.观测与困难</p><ul><li>600 组样本提供了 600 条线性方程（GF(2) 上的内积），但未知量 <code>key</code> 有 800 个比特，直接解有 200 维自由度，不唯一。</li><li>关键是 <code>key</code> 的结构：它是 50 个 16 位小块的串联，每块都来自 <code>vecs</code>。而 <code>vecs</code> 的 4096 项，其差分集合（取任意一个基准 <code>v0</code>，看 <code>vecs ⊕ v0</code> 的行空间）维度是 <strong>12</strong>。这意味着 <code>vecs</code> 其实是一个 <strong>12 维线性<strong><strong>子空间</strong></strong>的仿射陪集</strong>（coset），大小正好 2^12&#x3D;4096。<ul><li>于是每个 16 位小块都可表示为 <code>v0 ⊕ (B * α)</code>，其中 <code>B</code> 是 12×16 的基矩阵，<code>α</code> 是 12 比特坐标。</li><li>50 个小块 → 一共 50×12 &#x3D; <strong>600 个</strong>未知比特。</li><li>与 600 条线性方程正好匹配！从而把原本 800 维未知，降成 600 维，得到可解的线性系统。</li></ul></li></ul><p>3.建模方式（对齐 bit 顺序很重要！）</p><ul><li>把 <code>vecs</code> 的 16 位字符串视作 <strong>LSB-first</strong>（与 <code>(nonce &amp; key)</code> 的位对齐一致），否则会解出错误的 key。</li><li>设第 <code>t</code> 个小块的未知 12 比特为 <code>α_t</code>。对每条样本方程，有</li><li><code>parity_i = ⊕_t &lt;nonce_chunk_i_t, v0 ⊕ (B * α_t)&gt; ``         = ⊕_t &lt;nonce_chunk_i_t, v0&gt; ⊕ ⊕_t &lt;nonce_chunk_i_t, B * α_t&gt;</code></li><li>把常量项 <code>⊕_t &lt;nonce_chunk_i_t, v0&gt;</code> 移到右边，剩余是关于所有 <code>α_t</code> 的 600×600 线性方程组，直接在 GF(2) 解之即可。</li><li>方程组秩通常是 599（有 1 维自由度），但这 <strong>不影响</strong>：任意解出的 <code>(α_t)</code> 都映射到 <code>v0 ⊕ B*α_t</code>，这个集合刚好就是 <code>vecs</code> 的那个仿射陪集，不会跑出集合之外。对那 1 维自由度，测试两种可能都很快，直接看哪一个能把密文正确解出可读明文（一般是标准 CTF flag）。</li></ul><p>4.解出 key 并还原明文</p><ul><li>用解出来的 50 个 16 位小块拼成 800 位 key（注意保持 LSB-first 与构造一致）。</li><li>取 <code>md5(str(key))</code>（Python 的 <code>str(key)</code> 即十进制串）当 AES-CTR key，nonce 用 <code>b&quot;Tiffany&quot;</code>，解密 <code>🚩</code>。</li><li>能得到清晰的 ASCII flag。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> re, ast, numpy <span class="hljs-keyword">as</span> np, hashlib<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><span class="hljs-comment"># ---- 工具：GF(2) 线性代数 ----</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gf2_rref</span>(<span class="hljs-params">M, rhs=<span class="hljs-literal">None</span></span>):<br>    M = M.copy().astype(np.uint8)<br>    <span class="hljs-keyword">if</span> rhs <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        rhs = rhs.copy().astype(np.uint8)<br>        M = np.concatenate([M, rhs.reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)], axis=<span class="hljs-number">1</span>)<br>    m, n_aug = M.shape<br>    n = n_aug <span class="hljs-keyword">if</span> rhs <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> n_aug - <span class="hljs-number">1</span><br>    row = <span class="hljs-number">0</span><br>    pivots = []<br>    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        pivot = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row, m):<br>            <span class="hljs-keyword">if</span> M[r,col]:<br>                pivot = r; <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> pivot <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> pivot != row:<br>            M[[row,pivot]] = M[[pivot,row]]<br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            <span class="hljs-keyword">if</span> r != row <span class="hljs-keyword">and</span> M[r,col]:<br>                M[r,:] ^= M[row,:]<br>        pivots.append(col)<br>        row += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> row == m: <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> M, pivots<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">int_to_bits_lsb</span>(<span class="hljs-params">n, width</span>):<br>    <span class="hljs-keyword">return</span> np.array([(n&gt;&gt;i) &amp; <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width)], dtype=np.uint8)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bits_to_int</span>(<span class="hljs-params">bits_lsb</span>):<br>    v = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i,b <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(bits_lsb):<br>        <span class="hljs-keyword">if</span> b: v |= (<span class="hljs-number">1</span>&lt;&lt;i)<br>    <span class="hljs-keyword">return</span> v<br><br><span class="hljs-comment"># ---- 读取 vecs（params.py）并转为 LSB-first ----</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;params.py&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,errors=<span class="hljs-string">&#x27;ignore&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    text = f.read()<br>vecs_list = re.findall(<span class="hljs-string">r&quot;&#x27;([01]&#123;16&#125;)&#x27;&quot;</span>, text)<br>vecs = np.array([[<span class="hljs-built_in">int</span>(b) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> s[::-<span class="hljs-number">1</span>]] <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> vecs_list], dtype=np.uint8)  <span class="hljs-comment"># reverse to LSB-first</span><br><br><span class="hljs-comment"># 取一个基向量 v0，并构造差分集合的行空间基 B（12×16）</span><br>v0 = vecs[<span class="hljs-number">0</span>]<br>diffs = (vecs ^ v0) % <span class="hljs-number">2</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gf2_basis_rows</span>(<span class="hljs-params">M</span>):<br>    A = M.copy().astype(np.uint8)<br>    m,n = A.shape<br>    row=<span class="hljs-number">0</span><br>    pivcols=[]<br>    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        pivot=<span class="hljs-literal">None</span><br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row,m):<br>            <span class="hljs-keyword">if</span> A[r,col]:<br>                pivot=r; <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> pivot <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>: <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> pivot!=row: A[[row,pivot]] = A[[pivot,row]]<br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            <span class="hljs-keyword">if</span> r!=row <span class="hljs-keyword">and</span> A[r,col]:<br>                A[r,:] ^= A[row,:]<br>        pivcols.append(col); row+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> row==m: <span class="hljs-keyword">break</span><br>    <span class="hljs-comment"># 抽取基行</span><br>    basis_rows=[]<br>    used=<span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">for</span> lead <span class="hljs-keyword">in</span> pivcols:<br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            <span class="hljs-keyword">if</span> r <span class="hljs-keyword">in</span> used: <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> A[r,lead]==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">all</span>(A[r,c]==<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(lead)):<br>                basis_rows.append(A[r].copy()); used.add(r); <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> np.array(basis_rows, dtype=np.uint8)<br><br>B = gf2_basis_rows(diffs)   <span class="hljs-comment"># 12 x 16</span><br><br><span class="hljs-comment"># ---- 解析样本和密文（output.txt）----</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,errors=<span class="hljs-string">&#x27;ignore&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data = f.read()<br><br>gift_text = re.search(<span class="hljs-string">r&quot;🎁\s*:\s*(\[\[.*?\]\])&quot;</span>, data, flags=re.S).group(<span class="hljs-number">1</span>)<br>cipher_text_literal = re.search(<span class="hljs-string">r&quot;🚩\s*:\s*(b?[&#x27;\&quot;][^&#x27;\&quot;]+[&#x27;\&quot;])|🚩\s*:\s*([0-9a-fA-Fx,\s\[\]]+)&quot;</span>, data).group(<span class="hljs-number">1</span>) \<br>                      <span class="hljs-keyword">or</span> re.search(<span class="hljs-string">r&quot;🚩\s*:\s*(b?[&#x27;\&quot;][^&#x27;\&quot;]+[&#x27;\&quot;])|🚩\s*:\s*([0-9a-fA-Fx,\s\[\]]+)&quot;</span>, data).group(<span class="hljs-number">2</span>)<br><br>gift = ast.literal_eval(gift_text)<br>cipher_literal = ast.literal_eval(cipher_text_literal)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(cipher_literal, <span class="hljs-built_in">bytes</span>):<br>    ct = cipher_literal<br><span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(cipher_literal, <span class="hljs-built_in">list</span>):<br>    ct = <span class="hljs-built_in">bytes</span>(cipher_literal)<br><span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(cipher_literal, <span class="hljs-built_in">str</span>):<br>    ct = <span class="hljs-built_in">bytes</span>.fromhex(cipher_literal)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;Unknown ciphertext!&quot;</span>)<br><br><span class="hljs-comment"># ---- 建立 600×600 线性方程组，未知为 50 个块的 12 比特坐标 ----</span><br>m = <span class="hljs-built_in">len</span>(gift)<br>T = <span class="hljs-number">50</span><br>k = B.shape[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 12</span><br>WIDTH = <span class="hljs-number">16</span>*T<br><br>A2 = np.zeros((m, T*k), dtype=np.uint8)<br>b2 = np.zeros(m, dtype=np.uint8)<br><br><span class="hljs-keyword">for</span> i,(nonce, par) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(gift):<br>    bits = int_to_bits_lsb(nonce, WIDTH)<br>    const = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(T):<br>        chunk = bits[<span class="hljs-number">16</span>*t:<span class="hljs-number">16</span>*(t+<span class="hljs-number">1</span>)]<br>        const ^= (np.dot(chunk, v0) % <span class="hljs-number">2</span>)<br>        <span class="hljs-comment"># 对 α_t（12 维），其系数即 &lt;chunk, B_row&gt;，等价于 (B @ chunk)</span><br>        A2[i, t*k:(t+<span class="hljs-number">1</span>)*k] = (B @ chunk) % <span class="hljs-number">2</span><br>    b2[i] = (par ^ const) % <span class="hljs-number">2</span><br><br><span class="hljs-comment"># ---- 解方程（可能秩 599，尝试两个候选）----</span><br>rref_A2, pivs = gf2_rref(A2, b2)<br>nvar = A2.shape[<span class="hljs-number">1</span>]<br><br>x_alpha = np.zeros(nvar, dtype=np.uint8)<br>row=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nvar):<br>    <span class="hljs-keyword">if</span> row &lt; <span class="hljs-built_in">len</span>(pivs) <span class="hljs-keyword">and</span> pivs[row]==col:<br>        x_alpha[col] = rref_A2[row,-<span class="hljs-number">1</span>]; row+=<span class="hljs-number">1</span><br><br>rrefA_only, pivs_only = gf2_rref(A2, <span class="hljs-literal">None</span>)<br>null = np.zeros(nvar, dtype=np.uint8)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(pivs_only) &lt; nvar:<br>    fcol = [c <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nvar) <span class="hljs-keyword">if</span> c <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> pivs_only][<span class="hljs-number">0</span>]<br>    null[fcol]=<span class="hljs-number">1</span><br>    row=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nvar):<br>        <span class="hljs-keyword">if</span> row &lt; <span class="hljs-built_in">len</span>(pivs_only) <span class="hljs-keyword">and</span> pivs_only[row]==col:<br>            s=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> kcol <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(col+<span class="hljs-number">1</span>, nvar):<br>                <span class="hljs-keyword">if</span> rrefA_only[row,kcol] <span class="hljs-keyword">and</span> null[kcol]:<br>                    s ^= <span class="hljs-number">1</span><br>            null[col]=s%<span class="hljs-number">2</span><br>            row+=<span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_key_bits</span>(<span class="hljs-params">alpha_concat</span>):<br>    blocks=[]<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(T):<br>        alpha_t = alpha_concat[t*k:(t+<span class="hljs-number">1</span>)*k]<br>        vec_t = (v0 ^ (alpha_t @ B) % <span class="hljs-number">2</span>) % <span class="hljs-number">2</span>  <span class="hljs-comment"># LSB-first 16 bits</span><br>        blocks.append(vec_t)<br>    <span class="hljs-keyword">return</span> np.concatenate(blocks)<br><br>cands = [x_alpha, (x_alpha ^ null) % <span class="hljs-number">2</span>]<br><span class="hljs-keyword">for</span> cand <span class="hljs-keyword">in</span> cands:<br>    key_bits = build_key_bits(cand)<br>    key_int = bits_to_int(key_bits)<br>    aes_key = hashlib.md5(<span class="hljs-built_in">str</span>(key_int).encode()).digest()<br>    cipher = AES.new(key=aes_key, nonce=<span class="hljs-string">b&quot;Tiffany&quot;</span>, mode=AES.MODE_CTR)<br>    pt = cipher.decrypt(ct)<br>    <span class="hljs-keyword">try</span>:<br>        s = pt.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;&#123;&quot;</span> <span class="hljs-keyword">in</span> s <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;&#125;&quot;</span> <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;FLAG:&quot;</span>, s)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure><p>flag： LILCTF{Un1qUe_s0luti0n_1N_sUbSp4C3!}</p><h2 id="5-baaaaaag"><a href="#5-baaaaaag" class="headerlink" title="5.baaaaaag"></a>5.<strong>baaaaaag</strong></h2><p>原题：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>p = random.getrandbits(<span class="hljs-number">72</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(p)[<span class="hljs-number">2</span>:]) == <span class="hljs-number">72</span><br><br>a = [getPrime(<span class="hljs-number">90</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">72</span>)]<br>b = <span class="hljs-number">0</span><br>t = p<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    temp = t % <span class="hljs-number">2</span><br>    b += temp * i<br>    t = t &gt;&gt; <span class="hljs-number">1</span><br><br>key = hashlib.sha256(<span class="hljs-built_in">str</span>(p).encode()).digest()<br>cipher = AES.new(key, AES.MODE_ECB)<br>flag = pad(flag,<span class="hljs-number">16</span>)<br>ciphertext = cipher.encrypt(flag)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a = <span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;b = <span class="hljs-subst">&#123;b&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ciphertext = <span class="hljs-subst">&#123;ciphertext&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">a = [965032030645819473226880279, 699680391768891665598556373, 1022177754214744901247677527, 680767714574395595448529297, 1051144590442830830160656147, 1168660688736302219798380151, 796387349856554292443995049, 740579849809188939723024937, 940772121362440582976978071, 787438752754751885229607747, 1057710371763143522769262019, 792170184324681833710987771, 912844392679297386754386581, 906787506373115208506221831, 1073356067972226734803331711, 1230248891920689478236428803, 713426848479513005774497331, 979527247256538239116435051, 979496765566798546828265437, 836939515442243300252499479, 1185281999050646451167583269, 673490198827213717568519179, 776378201435505605316348517, 809920773352200236442451667, 1032450692535471534282750757, 1116346000400545215913754039, 1147788846283552769049123803, 994439464049503065517009393, 825645323767262265006257537, 1076742721724413264636318241, 731782018659142904179016783, 656162889354758353371699131, 1045520414263498704019552571, 1213714972395170583781976983, 949950729999198576080781001, 1150032993579134750099465519, 975992662970919388672800773, 1129148699796142943831843099, 898871798141537568624106939, 997718314505250470787513281, 631543452089232890507925619, 831335899173370929279633943, 1186748765521175593031174791, 884252194903912680865071301, 1016020417916761281986717467, 896205582917201847609656147, 959440423632738884107086307, 993368100536690520995612807, 702602277993849887546504851, 1102807438605649402749034481, 629539427333081638691538089, 887663258680338594196147387, 1001965883259152684661493409, 1043811683483962480162133633, 938713759383186904819771339, 1023699641268310599371568653, 784025822858960757703945309, 986182634512707587971047731, 1064739425741411525721437119, 1209428051066908071290286953, 667510673843333963641751177, 642828919542760339851273551, 1086628537309368288204342599, 1084848944960506663668298859, 667827295200373631038775959, 752634137348312783761723507, 707994297795744761368888949, 747998982630688589828284363, 710184791175333909291593189, 651183930154725716807946709, 724836607223400074343868079, 1118993538091590299721647899]</span><br><span class="hljs-string">b = 34962396275078207988771864327</span><br><span class="hljs-string">ciphertext = b&#x27;Lo~G\xf46&gt;\xd609\x8e\x8e\xf5\xf83\xb5\xf0\x8f\x9f6&amp;\xea\x02\xfa\xb1_L\x85\x93\x93\xf7,`|\xc6\xbe\x05&amp;\x85\x8bC\xcd\xe6?TV4q&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>一个背包密码，解出p就能梭出来了。但是问题是怎么解出p：</p><p>据我已知的背包密码：b是背包容量，a是将要装进背包的物品。p可以由十进制转化为二进制，其中满足a[i],pi。pi只能为0或1,0代表对应的a[i]没有被装进背包，1代表对应的a[i]被装进背包。b会被a装满。</p><p>大概是这个意思，但是列数学表达式得出p的二进制需要线性代数知识。lll算法和bkz规约</p><p>这是deepseek给出的详细：</p><h3 id="如何解出-p？"><a href="#如何解出-p？" class="headerlink" title="如何解出 p？"></a>如何解出 <code>p</code>？</h3><p>为了解决这个问题，我们使用格基归约算法（如 LLL 或 BKZ）。格基归约可以将子集和问题转化为寻找格中的短向量问题。具体步骤如下：</p><ol><li><p><strong>格基构造</strong>：构造一个 <code>(n+1) x (n+1)</code> 的矩阵（<code>n</code> 是 <code>a</code> 的长度），其中：</p><ul><li>前 <code>n</code> 行：对角线元素为 2，最后一列为 <code>a[i]</code>。</li><li>最后一行：前 <code>n</code> 个元素为 1，最后一个元素为 <code>b</code>。</li></ul><p>这种构造确保了解向量 <code>(2*m_0 - 1, 2*m_1 - 1, ..., 2*m_&#123;n-1&#125; - 1, 0)</code> 在格中，其中 <code>m_i</code> 是 <code>p</code> 的二进制位。转换 <code>v_i = 2*m_i - 1</code> 将二进制位映射到 ±1，使得解向量更短且更易识别。</p></li><li><p><strong>格基归约</strong>：使用 BKZ 或 LLL 算法对格基进行归约。BKZ 通常更强（能找到更短的向量），但计算成本更高。如果 BKZ 失败，可以回退到 LLL。</p></li><li><p><strong>搜索解向量</strong>：在归约后的基中搜索满足条件的向量：</p><ul><li>前 <code>n</code> 个坐标为 ±1。</li><li>最后一个坐标为 0（或接近 0，容错处理）。</li></ul><p>如果找到，则从解向量恢复二进制位：<code>m_i = (v_i + 1) / 2</code>。</p></li><li><p><strong>恢复 <code>p</code></strong>：将二进制位组合成整数 <code>p</code>（注意：最低位对应 <code>m_0</code>）。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> Matrix, ZZ<br><br><br><span class="hljs-comment"># --------- 已知参数 ----------</span><br>a = [<span class="hljs-number">965032030645819473226880279</span>, <span class="hljs-number">699680391768891665598556373</span>, <span class="hljs-number">1022177754214744901247677527</span>, <span class="hljs-number">680767714574395595448529297</span>,<br>     <span class="hljs-number">1051144590442830830160656147</span>, <span class="hljs-number">1168660688736302219798380151</span>, <span class="hljs-number">796387349856554292443995049</span>, <span class="hljs-number">740579849809188939723024937</span>,<br>     <span class="hljs-number">940772121362440582976978071</span>, <span class="hljs-number">787438752754751885229607747</span>, <span class="hljs-number">1057710371763143522769262019</span>, <span class="hljs-number">792170184324681833710987771</span>,<br>     <span class="hljs-number">912844392679297386754386581</span>, <span class="hljs-number">906787506373115208506221831</span>, <span class="hljs-number">1073356067972226734803331711</span>, <span class="hljs-number">1230248891920689478236428803</span>,<br>     <span class="hljs-number">713426848479513005774497331</span>, <span class="hljs-number">979527247256538239116435051</span>, <span class="hljs-number">979496765566798546828265437</span>, <span class="hljs-number">836939515442243300252499479</span>,<br>     <span class="hljs-number">1185281999050646451167583269</span>, <span class="hljs-number">673490198827213717568519179</span>, <span class="hljs-number">776378201435505605316348517</span>, <span class="hljs-number">809920773352200236442451667</span>,<br>     <span class="hljs-number">1032450692535471534282750757</span>, <span class="hljs-number">1116346000400545215913754039</span>, <span class="hljs-number">1147788846283552769049123803</span>, <span class="hljs-number">994439464049503065517009393</span>,<br>     <span class="hljs-number">825645323767262265006257537</span>, <span class="hljs-number">1076742721724413264636318241</span>, <span class="hljs-number">731782018659142904179016783</span>, <span class="hljs-number">656162889354758353371699131</span>,<br>     <span class="hljs-number">1045520414263498704019552571</span>, <span class="hljs-number">1213714972395170583781976983</span>, <span class="hljs-number">949950729999198576080781001</span>, <span class="hljs-number">1150032993579134750099465519</span>,<br>     <span class="hljs-number">975992662970919388672800773</span>, <span class="hljs-number">1129148699796142943831843099</span>, <span class="hljs-number">898871798141537568624106939</span>, <span class="hljs-number">997718314505250470787513281</span>,<br>     <span class="hljs-number">631543452089232890507925619</span>, <span class="hljs-number">831335899173370929279633943</span>, <span class="hljs-number">1186748765521175593031174791</span>, <span class="hljs-number">884252194903912680865071301</span>,<br>     <span class="hljs-number">1016020417916761281986717467</span>, <span class="hljs-number">896205582917201847609656147</span>, <span class="hljs-number">959440423632738884107086307</span>, <span class="hljs-number">993368100536690520995612807</span>,<br>     <span class="hljs-number">702602277993849887546504851</span>, <span class="hljs-number">1102807438605649402749034481</span>, <span class="hljs-number">629539427333081638691538089</span>, <span class="hljs-number">887663258680338594196147387</span>,<br>     <span class="hljs-number">1001965883259152684661493409</span>, <span class="hljs-number">1043811683483962480162133633</span>, <span class="hljs-number">938713759383186904819771339</span>, <span class="hljs-number">1023699641268310599371568653</span>,<br>     <span class="hljs-number">784025822858960757703945309</span>, <span class="hljs-number">986182634512707587971047731</span>, <span class="hljs-number">1064739425741411525721437119</span>, <span class="hljs-number">1209428051066908071290286953</span>,<br>     <span class="hljs-number">667510673843333963641751177</span>, <span class="hljs-number">642828919542760339851273551</span>, <span class="hljs-number">1086628537309368288204342599</span>, <span class="hljs-number">1084848944960506663668298859</span>,<br>     <span class="hljs-number">667827295200373631038775959</span>, <span class="hljs-number">752634137348312783761723507</span>, <span class="hljs-number">707994297795744761368888949</span>, <span class="hljs-number">747998982630688589828284363</span>,<br>     <span class="hljs-number">710184791175333909291593189</span>, <span class="hljs-number">651183930154725716807946709</span>, <span class="hljs-number">724836607223400074343868079</span>, <span class="hljs-number">1118993538091590299721647899</span>]<br><br>b = <span class="hljs-number">34962396275078207988771864327</span><br><br>ciphertext = <span class="hljs-string">b&#x27;Lo~G\xf46&gt;\xd609\x8e\x8e\xf5\xf83\xb5\xf0\x8f\x9f6&amp;\xea\x02\xfa\xb1_L\x85\x93\x93\xf7,`|\xc6\xbe\x05&amp;\x85\x8bC\xcd\xe6?TV4q&#x27;</span><br><br>n = <span class="hljs-built_in">len</span>(a)   <span class="hljs-comment"># 72</span><br><br><span class="hljs-comment"># --------- 构造格基 ----------</span><br>Ge = Matrix(ZZ, n+<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    Ge[i, i] = <span class="hljs-number">2</span><br>    Ge[i, -<span class="hljs-number">1</span>] = a[i]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    Ge[-<span class="hljs-number">1</span>, i] = <span class="hljs-number">1</span><br>Ge[-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>] = b<br><br><span class="hljs-comment"># --------- BKZ / LLL 归约 ----------</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Running BKZ...&quot;</span>)<br><span class="hljs-keyword">try</span>:<br>    B = Ge.BKZ(block_size=<span class="hljs-number">28</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;BKZ 失败，退回 LLL：&quot;</span>, e)<br>    B = Ge.LLL()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Reduction done. Searching for solution vector...&quot;</span>)<br><br>found = <span class="hljs-literal">False</span><br>candidate = <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 搜索解向量</span><br><span class="hljs-keyword">for</span> row_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(B.nrows()):<br>    v = [<span class="hljs-built_in">int</span>(B[row_idx, j]) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>    last = v[-<span class="hljs-number">1</span>]<br>    front = v[:-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> last == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">all</span>(x <span class="hljs-keyword">in</span> (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> front):<br>        candidate = front<br>        found = <span class="hljs-literal">True</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found exact candidate in basis row <span class="hljs-subst">&#123;row_idx&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found:<br>    <span class="hljs-keyword">for</span> row_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(B.nrows()):<br>        v = [<span class="hljs-built_in">int</span>(B[row_idx, j]) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>        front = v[:-<span class="hljs-number">1</span>]<br>        last = v[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(last) &lt;= <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">all</span>(<span class="hljs-built_in">abs</span>(x) <span class="hljs-keyword">in</span> (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> front):<br>            possibly = []<br>            ok = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> front:<br>                <span class="hljs-keyword">if</span> x &gt;= <span class="hljs-number">1</span>:<br>                    possibly.append(<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">elif</span> x &lt;= -<span class="hljs-number">1</span>:<br>                    possibly.append(-<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    ok = <span class="hljs-literal">False</span><br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> ok:<br>                candidate = possibly<br>                found = <span class="hljs-literal">True</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Found tolerant candidate in basis row <span class="hljs-subst">&#123;row_idx&#125;</span> (last=<span class="hljs-subst">&#123;last&#125;</span>)&quot;</span>)<br>                <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有在基中直接找到满足 (±1,...,0) 形式的向量。&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;你可以：\n - 提高 BKZ 的 block_size（更强但更慢），\n - 或尝试搜索基向量的短线性组合 / 使用 fpylll 的 shortest_vector.&quot;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 恢复 p</span><br>m_bits = [(x + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> candidate]<br>p_recovered = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i, bit <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(m_bits):<br>    p_recovered |= (bit &lt;&lt; i)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recovered p (decimal):&quot;</span>, p_recovered)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recovered p (bin length):&quot;</span>, <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(p_recovered)) - <span class="hljs-number">2</span>)<br><br></code></pre></td></tr></table></figure><p>Running BKZ…<br>Reduction done. Searching for solution vector…<br>Found exact candidate in basis row 0<br>Recovered p (decimal): 4208626653103825685156<br>Recovered p (bin length): 72</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> unpad<br><span class="hljs-keyword">import</span> hashlib<br><br>ciphertext=<span class="hljs-string">b&#x27;Lo~G\xf46&gt;\xd609\x8e\x8e\xf5\xf83\xb5\xf0\x8f\x9f6&amp;\xea\x02\xfa\xb1_L\x85\x93\x93\xf7,`|\xc6\xbe\x05&amp;\x85\x8bC\xcd\xe6?TV4q&#x27;</span><br>p_recovered=<span class="hljs-number">4208626653103825685156</span><br><br><br>key = hashlib.sha256(<span class="hljs-built_in">str</span>(p_recovered).encode()).digest()<br>cipher = AES.new(key, AES.MODE_ECB)<br><span class="hljs-keyword">try</span>:<br>    plaintext = unpad(cipher.decrypt(ciphertext), <span class="hljs-number">16</span>)<br><span class="hljs-keyword">except</span> ValueError:<br>    plaintext = cipher.decrypt(ciphertext)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Warning: unpad failed; raw decrypted bytes shown.&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted plaintext (bytes):&quot;</span>, plaintext)<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted plaintext (utf-8):&quot;</span>, plaintext.decode())<br><span class="hljs-keyword">except</span> Exception:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>Decrypted plaintext (bytes): b’LILCTF{M4ybe_7he_brut3_f0rce_1s_be5t}’<br>Decrypted plaintext (utf-8): LILCTF{M4ybe_7he_brut3_f0rce_1s_be5t}</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SwitchHosts下载安装使用</title>
    <link href="/2025/08/11/SwitchHosts%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/08/11/SwitchHosts%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="SwitchHosts下载安装使用"><a href="#SwitchHosts下载安装使用" class="headerlink" title="SwitchHosts下载安装使用"></a>SwitchHosts下载安装使用</h1><p>github直接搜然后下载</p><p><img src="/2025/08/11/SwitchHosts%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/image-20250811232346188.png" alt="image-20250811232346188"></p><p>然后直接修改</p><p><img src="/2025/08/11/SwitchHosts%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/image-20250811235635131.png" alt="image-20250811235635131"></p><p>注意，要关代理并且重启浏览器！！！</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>util</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>util</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025天机学堂</title>
    <link href="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/"/>
    <url>/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/</url>
    
    <content type="html"><![CDATA[<h1 id="2025天机学堂"><a href="#2025天机学堂" class="headerlink" title="2025天机学堂"></a>2025天机学堂</h1><h2 id="day01：初始化项目"><a href="#day01：初始化项目" class="headerlink" title="day01：初始化项目"></a>day01：初始化项目</h2><p>虚拟机密码：root      123321</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.150.101</span> git.tianji.com  tjxt  <span class="hljs-number">123321</span><br><span class="hljs-number">192.168.150.101</span> jenkins.tianji.com    root  <span class="hljs-number">123</span><br><span class="hljs-number">192.168.150.101</span> mq.tianji.com<br><span class="hljs-number">192.168.150.101</span> nacos.tianji.com      nacos   nacos<br><span class="hljs-number">192.168.150.101</span> xxljob.tianji.com<br><span class="hljs-number">192.168.150.101</span> es.tianji.com<br><span class="hljs-number">192.168.150.101</span> api.tianji.com<br><span class="hljs-number">192.168.150.101</span> www.tianji.com      jack  <span class="hljs-number">123</span>   Rose  <span class="hljs-number">123456</span><br><span class="hljs-number">192.168.150.101</span> manage.tianji.com<br><span class="hljs-number">192.168.150.101</span> cpolar.tianji.com<br></code></pre></td></tr></table></figure><p>点击init初始化虚拟机：</p><p>在VMware得到：</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250811230026583.png" alt="image-20250811230026583"></p><p>然后初始化网络配置，改成这样：</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250811230229943.png" alt="image-20250811230229943"></p><p>启动虚拟机，虚拟机中的环境会自启动，我们可以访问一个进行测试，访问是要访问我画红框的url：192.168.150.101:8848</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250811230339618.png" alt="image-20250811230339618"></p><p>然后我们也可以使用switchhost来代理，具体可以看我switchhost的文章</p><p>nginx无法启动问题，尝试重启进行解决：解决失败，但最后耗时四小时左右解决了，问题在于nginx的conf的语法问题，大概改成这样就好了：</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250813173345522.png" alt="image-20250813173345522"></p><p>然后复制初始化项目到本地：</p><p><a href="http://192.168.150.101:10880/tjxt/tianji.git">http://192.168.150.101:10880/tjxt/tianji.git</a></p><p>git clone <a href="http://192.168.150.101:10880/tjxt/tianji.git">http://192.168.150.101:10880/tjxt/tianji.git</a> -b lesson-init</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250813151129175.png" alt="image-20250813151129175"></p><p>然后打开项目刷新一下maven下下依赖就好了</p><p>遇到bug：</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250813174959296.png" alt="image-20250813174959296"></p><p>解决了一下午，到最后还是依赖问题：把这个注释的# 删掉</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250814001958375.png" alt="image-20250814001958375"></p><p>查找bug，Rose删除订单时显示不能删除他人订单</p><p>想远程调试，改成这样：</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250814141612054.png" alt="image-20250814141612054"></p><p>然后关掉tj-trade，启动tj-trade-debug</p><p>当然也可以直接本地调试，但是注意调试前编辑配置改为local</p><p><img src="/2025/08/11/2025%E5%A4%A9%E6%9C%BA%E5%AD%A6%E5%A0%82/image-20250814144004334.png" alt="image-20250814144004334"></p><p>回到bug问题，将&#x3D;改成equals或者&#x3D;&#x3D;就好了</p><p>然后推送到本地的git就好了</p><h2 id="day02：我的课表"><a href="#day02：我的课表" class="headerlink" title="day02：我的课表"></a>day02：我的课表</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>complete_item</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>complete_item</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025moectf(Crypto)</title>
    <link href="/2025/08/09/2025moectf(Crypto)/"/>
    <url>/2025/08/09/2025moectf(Crypto)/</url>
    
    <content type="html"><![CDATA[<h1 id="2025moectf-Crypto"><a href="#2025moectf-Crypto" class="headerlink" title="2025moectf(Crypto)"></a>2025moectf(Crypto)</h1><h2 id="1-moectf-Crypto"><a href="#1-moectf-Crypto" class="headerlink" title="1.moectf(Crypto)"></a>1.moectf(Crypto)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> ElGamal<br><span class="hljs-keyword">from</span> Crypto.Random <span class="hljs-keyword">import</span> get_random_bytes, random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_elgamal_keypair</span>(<span class="hljs-params">bits=<span class="hljs-number">512</span></span>):<br>p = getPrime(bits)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>g = getRandomRange(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(g, (p - <span class="hljs-number">1</span>) // <span class="hljs-number">2</span>, p) != <span class="hljs-number">1</span>:<br><span class="hljs-keyword">break</span><br>x = randrange(<span class="hljs-number">2</span>, p - <span class="hljs-number">1</span>)<br>注:此处的secret模块可以理解为存储了明文flag的python文件，属于未知信息，而非公开的可用模<br>块。你需要尝试从密文去恢复原始的flag，而不是去下载secret模块。secrets则是一个用于生成管<br>理密码的安全随机数的python标准库。<br>bytes_to_long函数用于将flag编码为整数。<br>Hint：什么是 Elgamal<br>还是附个链接吧Elgamal<br>y = <span class="hljs-built_in">pow</span>(g, x, p)<br><span class="hljs-keyword">return</span> p, g, y, x<br>key=generate_elgamal_keypair(bits=<span class="hljs-number">512</span>)<br>p, g, y ,x= key<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=== 公钥 (p, g, y) ===&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p =&quot;</span>, p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;g =&quot;</span>, g)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;y =&quot;</span>, y)<br><span class="hljs-built_in">print</span>()<br>k = randrange(<span class="hljs-number">1</span>, p - <span class="hljs-number">2</span>)<br>m = bytes_to_long(flag)<br>c1 = <span class="hljs-built_in">pow</span>(g, k, p)<br>c2 = (m * <span class="hljs-built_in">pow</span>(y, k, p)) % p<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=== 密文 (c1, c2) ===&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c1 =&quot;</span>, c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c2 =&quot;</span>, c2)<br><span class="hljs-comment">#不小心把x输出了()</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x =&quot;</span>, x)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=== 公钥 (p, g, y) ===</span><br><span class="hljs-string">p =</span><br><span class="hljs-string">115409637159621449517635782553574175289667159048490149855475976576983048910448410</span><br><span class="hljs-string">99894993117258279094910424033273299863589407477091830213468539451196239863</span><br><span class="hljs-string">g = 2</span><br><span class="hljs-string">y =</span><br><span class="hljs-string">831342478336601128701462358277352159533328529138054068946707321221293164841558006</span><br><span class="hljs-string">5207081449784135835711205324186662482526357834042013400765421925274271853</span><br><span class="hljs-string">=== 密文 (c1, c2) ===</span><br><span class="hljs-string">c1 =</span><br><span class="hljs-string">665205355305564535827536225955485652597693184131825115294046454317510856013294961</span><br><span class="hljs-string">0916012490837970851191204144757409335011811874896056430105292534244732863</span><br><span class="hljs-string">c2 =</span><br><span class="hljs-string">231491356808152642824798171910095233144493885239903182663547597194748466341836253</span><br><span class="hljs-string">3363591441216570597417789120470703548843342170567039399830377459228297983</span><br><span class="hljs-string">x =</span><br><span class="hljs-string">801095707808655428402095966412478447961091359656003501195114326955976122911402773</span><br><span class="hljs-string">8791440961864150225798049120582540951874956255115884539333966429021004214</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>注:此处的secret模块可以理解为存储了明文flag的python文件，属于未知信息，而非公开的可用模<br>块。你需要尝试从密文去恢复原始的flag，而不是去下载secret模块。secrets则是一个用于生成管<br>理密码的安全随机数的python标准库。<br>bytes_to_long函数用于将flag编码为整数。<br></code></pre></td></tr></table></figure><p>ai可以一把梭，明个再来写解题过程：</p><p><img src="/2025/08/09/2025moectf(Crypto)/image-20250810004708703.png" alt="image-20250810004708703"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-comment"># 给定的公钥和私钥</span><br>p = <span class="hljs-number">11540963715962144951763578255357417528966715904849014985547597657698304891044841099894993117258279094910424033273299863589407477091830213468539451196239863</span><br>g = <span class="hljs-number">2</span><br>y = <span class="hljs-number">8313424783366011287014623582773521595333285291380540689467073212212931648415580065207081449784135835711205324186662482526357834042013400765421925274271853</span><br>c1 = <span class="hljs-number">6652053553055645358275362259554856525976931841318251152940464543175108560132949610916012490837970851191204144757409335011811874896056430105292534244732863</span><br>c2 = <span class="hljs-number">2314913568081526428247981719100952331444938852399031826635475971947484663418362533363591441216570597417789120470703548843342170567039399830377459228297983</span><br>x = <span class="hljs-number">8010957078086554284020959664124784479610913596560035011951143269559761229114027738791440961864150225798049120582540951874956255115884539333966429021004214</span><br><br><span class="hljs-comment"># 计算共享密钥 s = c1^x mod p</span><br>s = <span class="hljs-built_in">pow</span>(c1, x, p)<br><br><span class="hljs-comment"># 计算 s 的模逆元</span><br>s_inv = <span class="hljs-built_in">pow</span>(s, -<span class="hljs-number">1</span>, p)<br><br><span class="hljs-comment"># 解密消息 m = c2 * s_inv mod p</span><br>m = (c2 * s_inv) % p<br><br><span class="hljs-comment"># 将整数转换为字节串</span><br>flag = long_to_bytes(m)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密后的 flag:&quot;</span>, flag.decode())<br></code></pre></td></tr></table></figure><p>flag:   moectf{th1s_1s_y0ur_f1rst_ElG@m@l}</p><h2 id="2-ez-DES"><a href="#2-ez-DES" class="headerlink" title="2.ez_DES"></a>2.ez_DES</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">import</span> secrets<br><span class="hljs-keyword">import</span> string<br><br>flag = <span class="hljs-string">&#x27;moectf&#123;???&#125;&#x27;</span><br>characters = string.ascii_letters + string.digits + string.punctuation<br>key = <span class="hljs-string">&#x27;ezdes&#x27;</span>+<span class="hljs-string">&#x27;&#x27;</span>.join(secrets.choice(characters) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>))<br><span class="hljs-keyword">assert</span> key[:<span class="hljs-number">5</span>] == <span class="hljs-string">&#x27;ezdes&#x27;</span><br>key = key.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>l = <span class="hljs-number">8</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">text, key</span>):<br>    cipher = DES.new(key, DES.MODE_ECB)<br>    padded_text = text + (l - <span class="hljs-built_in">len</span>(text) % l) * <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">len</span>(text))<br>    data = cipher.encrypt(padded_text.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-keyword">return</span> data<br><br>c = encrypt(flag, key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>, c)<br><br><span class="hljs-comment"># c = b&#x27;\xe6\x8b0\xc8m\t?\x1d\xf6\x99sA&gt;\xce \rN\x83z\xa0\xdc&#123;\xbc\xb8X\xb2\xe2q\xa4&quot;\xfc\x07&#x27;</span><br></code></pre></td></tr></table></figure><p>爆破秘钥就好，ai能一把梭：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> product<br><br><span class="hljs-comment"># 给定的密文</span><br>c = <span class="hljs-string">b&#x27;\xe6\x8b0\xc8m\t?\x1d\xf6\x99sA&gt;\xce \rN\x83z\xa0\xdc&#123;\xbc\xb8X\xb2\xe2q\xa4&quot;\xfc\x07&#x27;</span><br><br><span class="hljs-comment"># 可能的字符集</span><br>characters = string.ascii_letters + string.digits + string.punctuation<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">ciphertext, key</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;尝试使用给定的密钥解密，使用题目特定的填充方案&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        cipher = DES.new(key, DES.MODE_ECB)<br>        data = cipher.decrypt(ciphertext)<br>        <br>        <span class="hljs-comment"># 获取原始消息长度（填充字符的值）</span><br>        msg_len = data[-<span class="hljs-number">1</span>]<br>        <br>        <span class="hljs-comment"># 计算填充长度</span><br>        pad_len = <span class="hljs-number">8</span> - (msg_len % <span class="hljs-number">8</span>)<br>        <span class="hljs-keyword">if</span> pad_len == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 如果长度是8的倍数</span><br>            pad_len = <span class="hljs-number">8</span><br>        <br>        <span class="hljs-comment"># 验证填充是否正确</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">all</span>(byte == msg_len <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> data[-pad_len:]):<br>            <span class="hljs-comment"># 移除填充并返回原始消息</span><br>            <span class="hljs-keyword">return</span> data[:-pad_len]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;主函数，爆破密钥并解密&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 生成所有可能的3字符组合</span><br>    total = <span class="hljs-built_in">len</span>(characters) ** <span class="hljs-number">3</span><br>    count = <span class="hljs-number">0</span><br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;开始爆破 <span class="hljs-subst">&#123;total&#125;</span> 种可能的密钥组合...&quot;</span>)<br>    <br>    <span class="hljs-comment"># 使用笛卡尔积生成所有可能的3字符后缀</span><br>    <span class="hljs-keyword">for</span> suffix <span class="hljs-keyword">in</span> product(characters, repeat=<span class="hljs-number">3</span>):<br>        count += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> count % <span class="hljs-number">100000</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;进度: <span class="hljs-subst">&#123;count&#125;</span>/<span class="hljs-subst">&#123;total&#125;</span> (<span class="hljs-subst">&#123;count/total*<span class="hljs-number">100</span>:<span class="hljs-number">.1</span>f&#125;</span>%)&quot;</span>)<br>        <br>        <span class="hljs-comment"># 构建完整密钥</span><br>        key_str = <span class="hljs-string">&#x27;ezdes&#x27;</span> + <span class="hljs-string">&#x27;&#x27;</span>.join(suffix)<br>        key = key_str.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <br>        <span class="hljs-comment"># 尝试解密</span><br>        result = decrypt(c, key)<br>        <br>        <span class="hljs-comment"># 如果解密成功并且结果包含 moectf 标志</span><br>        <span class="hljs-keyword">if</span> result <span class="hljs-keyword">and</span> <span class="hljs-string">b&#x27;moectf&#123;&#x27;</span> <span class="hljs-keyword">in</span> result:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\n找到有效密钥: <span class="hljs-subst">&#123;key_str&#125;</span>&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解密结果: <span class="hljs-subst">&#123;result.decode()&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span><br>    <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;爆破完成，未找到有效密钥。尝试检查填充逻辑或密钥空间。&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>找到有效密钥: ezdes8br<br>解密结果: moectf{_Ju5t envmEra+e.!}</p><h2 id="3-baby-next"><a href="#3-baby-next" class="headerlink" title="3.baby_next"></a>3.baby_next</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> next_prime<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">38</span><br><span class="hljs-keyword">assert</span> flag[:<span class="hljs-number">7</span>] == <span class="hljs-string">b&#x27;moectf&#123;&#x27;</span><br><span class="hljs-keyword">assert</span> flag[-<span class="hljs-number">1</span>:] == <span class="hljs-string">b&#x27;&#125;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = <span class="hljs-built_in">int</span>(reduce(<span class="hljs-keyword">lambda</span> res, _: next_prime(res), <span class="hljs-built_in">range</span>(<span class="hljs-number">114514</span>), p))<br><br>    n = p * q<br>    e = <span class="hljs-number">65537</span><br><br>    m = bytes_to_long(flag)<br><br>    c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;n = &#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;c = &#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n = 96742777571959902478849172116992100058097986518388851527052638944778038830381328778848540098201307724752598903628039482354215330671373992156290837979842156381411957754907190292238010742130674404082688791216045656050228686469536688900043735264177699512562466087275808541376525564145453954694429605944189276397</span><br><span class="hljs-string">c = 17445962474813629559693587749061112782648120738023354591681532173123918523200368390246892643206880043853188835375836941118739796280111891950421612990713883817902247767311707918305107969264361136058458670735307702064189010952773013588328843994478490621886896074511809007736368751211179727573924125553940385967</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>next_prime的应用，也是爆破一下，因为数据量不大，给点描述就能一把梭了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> isqrt, next_prime, mpz<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br>n = mpz(<span class="hljs-number">96742777571959902478849172116992100058097986518388851527052638944778038830381328778848540098201307724752598903628039482354215330671373992156290837979842156381411957754907190292238010742130674404082688791216045656050228686469536688900043735264177699512562466087275808541376525564145453954694429605944189276397</span>)<br>c = mpz(<span class="hljs-number">17445962474813629559693587749061112782648120738023354591681532173123918523200368390246892643206880043853188835375836941118739796280111891950421612990713883817902247767311707918305107969264361136058458670735307702064189010952773013588328843994478490621886896074511809007736368751211179727573924125553940385967</span>)<br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factor_n</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;高效分解接近的素数因子&quot;&quot;&quot;</span><br>    a = isqrt(n)  <span class="hljs-comment"># 精确整数平方根</span><br>    <br>    <span class="hljs-comment"># 从平方根开始向前搜索素数作为候选p</span><br>    p = next_prime(a - <span class="hljs-number">10</span>**<span class="hljs-number">7</span>)  <span class="hljs-comment"># 从稍低于平方根的位置开始</span><br>    <br>    <span class="hljs-comment"># 尝试p和p后面的114514个素数作为q</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>):  <span class="hljs-comment"># 安全范围内搜索</span><br>        q = n // p<br>        <br>        <span class="hljs-comment"># 检查是否找到有效因子</span><br>        <span class="hljs-keyword">if</span> p * q == n:<br>            <span class="hljs-keyword">return</span> p, q<br>        <br>        <span class="hljs-comment"># 移动到下一个候选p</span><br>        p = next_prime(p)<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span><br><br>p, q = factor_n(n)<br><br><span class="hljs-keyword">if</span> p <span class="hljs-keyword">and</span> q:<br>    phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>    d = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, phi)<br>    m = <span class="hljs-built_in">pow</span>(c, d, n)<br>    flag = long_to_bytes(<span class="hljs-built_in">int</span>(m))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag:&quot;</span>, flag.decode())<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;未找到因子&quot;</span>)<br></code></pre></td></tr></table></figure><p>flag：  moectf{vv0W_p_m1nu5_q_i5_r34l1y_sm4lI}</p><h2 id="4-ez-square"><a href="#4-ez-square" class="headerlink" title="4.ez_square"></a>4.ez_square</h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">35</span><br><span class="hljs-keyword">assert</span> flag[:<span class="hljs-number">7</span>] == <span class="hljs-string">b&#x27;moectf&#123;&#x27;</span><br><span class="hljs-keyword">assert</span> flag[-<span class="hljs-number">1</span>:] == <span class="hljs-string">b&#x27;&#125;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = getPrime(<span class="hljs-number">512</span>)<br><br>    n = p * q<br>    e = <span class="hljs-number">65537</span><br><br>    m = bytes_to_long(flag)<br><br>    c = <span class="hljs-built_in">pow</span>(m, e, n)<br>    hint = <span class="hljs-built_in">pow</span>(p + q, <span class="hljs-number">2</span>, n)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;n = &#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;c = &#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;hint = &#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">n = 83917281059209836833837824007690691544699901753577294450739161840987816051781770716778159151802639720854808886223999296102766845876403271538287419091422744267873129896312388567406645946985868002735024896571899580581985438021613509956651683237014111116217116870686535030557076307205101926450610365611263289149</span><br><span class="hljs-string">c = 69694813399964784535448926320621517155870332267827466101049186858004350675634768405333171732816667487889978017750378262941788713673371418944090831542155613846263236805141090585331932145339718055875857157018510852176248031272419248573911998354239587587157830782446559008393076144761176799690034691298870022190</span><br><span class="hljs-string">hint = 5491796378615699391870545352353909903258578093592392113819670099563278086635523482350754035015775218028095468852040957207028066409846581454987397954900268152836625448524886929236711403732984563866312512753483333102094024510204387673875968726154625598491190530093961973354413317757182213887911644502704780304</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>rsa加密公式的考察，不难，也能一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><br><span class="hljs-comment"># 已知参数</span><br>n = <span class="hljs-number">83917281059209836833837824007690691544699901753577294450739161840987816051781770716778159151802639720854808886223999296102766845876403271538287419091422744267873129896312388567406645946985868002735024896571899580581985438021613509956651683237014111116217116870686535030557076307205101926450610365611263289149</span><br>c = <span class="hljs-number">69694813399964784535448926320621517155870332267827466101049186858004350675634768405333171732816667487889978017750378262941788713673371418944090831542155613846263236805141090585331932145339718055875857157018510852176248031272419248573911998354239587587157830782446559008393076144761176799690034691298870022190</span><br>hint = <span class="hljs-number">5491796378615699391870545352353909903258578093592392113819670099563278086635523482350754035015775218028095468852040957207028066409846581454987397954900268152836625448524886929236711403732984563866312512753483333102094024510204387673875968726154625598491190530093961973354413317757182213887911644502704780304</span><br>e = <span class="hljs-number">65537</span><br><br><span class="hljs-comment"># 关键推导：(p+q)² = (p-q)² + 4pq，而hint = (p+q)² mod n = (p-q)² mod n</span><br><span class="hljs-comment"># 计算s = (p+q)² = 4n + hint（因为hint = (p-q)²且小于n）</span><br>s = <span class="hljs-number">4</span> * n + hint<br><br><span class="hljs-comment"># 求s的平方根得到p+q</span><br>s_sqrt = math.isqrt(s)<br><span class="hljs-keyword">assert</span> s_sqrt * s_sqrt == s, <span class="hljs-string">&quot;s不是完全平方数，推导错误&quot;</span><br><br><span class="hljs-comment"># 求hint的平方根得到p-q</span><br>d_sqrt = math.isqrt(hint)<br><span class="hljs-keyword">assert</span> d_sqrt * d_sqrt == hint, <span class="hljs-string">&quot;hint不是完全平方数，推导错误&quot;</span><br><br><span class="hljs-comment"># 计算p和q</span><br>p = (s_sqrt + d_sqrt) // <span class="hljs-number">2</span><br>q = (s_sqrt - d_sqrt) // <span class="hljs-number">2</span><br><br><span class="hljs-comment"># 验证p*q是否等于n</span><br><span class="hljs-keyword">assert</span> p * q == n, <span class="hljs-string">&quot;分解n失败&quot;</span><br><br><span class="hljs-comment"># 计算欧拉函数φ(n)</span><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 计算私钥d（e的逆元）</span><br>d = <span class="hljs-built_in">pow</span>(e, -<span class="hljs-number">1</span>, phi)<br><br><span class="hljs-comment"># 解密得到明文m</span><br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><br><span class="hljs-comment"># 转换为flag</span><br>flag = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密得到的flag:&quot;</span>, flag.decode())<br><br></code></pre></td></tr></table></figure><p>flag：   moectf{Ma7hm4t1c5_is_@_k1nd_0f_a2t}</p><h2 id="5-ezlegendre"><a href="#5-ezlegendre" class="headerlink" title="5.ezlegendre"></a>5.<strong>ezlegendre</strong></h2><p>原题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, bytes_to_long<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>p = <span class="hljs-number">258669765135238783146000574794031096183</span><br>a = <span class="hljs-number">144901483389896508632771215712413815934</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_flag</span>(<span class="hljs-params">flag</span>):<br>    ciphertext = []<br>    plaintext = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">bin</span>(i)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag])<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> plaintext:<br>        e = getPrime(<span class="hljs-number">16</span>)<br>        d = randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)<br>        n = <span class="hljs-built_in">pow</span>(a+<span class="hljs-built_in">int</span>(b)*d, e, p)<br>        ciphertext.append(n)<br>    <span class="hljs-keyword">return</span> ciphertext<br><br><span class="hljs-built_in">print</span>(encrypt_flag(flag))<br><br></code></pre></td></tr></table></figure><p>数据都给你了，直接读数据得出未知数就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> isPrime<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br><span class="hljs-comment"># 已知参数</span><br>p = <span class="hljs-number">258669765135238783146000574794031096183</span><br>a = <span class="hljs-number">144901483389896508632771215712413815934</span><br><br><span class="hljs-comment"># 假设我们有部分密文</span><br>ciphertext = [<span class="hljs-number">102230607782303286066661803375943337852</span>, <span class="hljs-number">196795077203291879584123548614536291210</span>, <span class="hljs-number">41820965969318717978206410470942308653</span>, <span class="hljs-number">207485265608553973031638961376379316991</span>, <span class="hljs-number">126241934830164184030184483965965358511</span>, <span class="hljs-number">20250852993510047910828861636740192486</span>, <span class="hljs-number">103669039044817273633962139070912140023</span>, <span class="hljs-number">97337342479349334554052986501856387313</span>, <span class="hljs-number">159127719377115088432849153087501377529</span>, <span class="hljs-number">45764236700940832554086668329121194445</span>, <span class="hljs-number">35275004033464216369574866255836768148</span>, <span class="hljs-number">52905563179465420745275423120979831405</span>, <span class="hljs-number">17032180473319795641143474346227445013</span>, <span class="hljs-number">29477780450507011415073117531375947096</span>, <span class="hljs-number">55487351149573346854028771906741727601</span>, <span class="hljs-number">121576510894250531063152466107000055279</span>, <span class="hljs-number">69959515052241122548546701060784004682</span>, <span class="hljs-number">173839335744520746760315021378911211216</span>, <span class="hljs-number">28266103662329817802592951699263023295</span>, <span class="hljs-number">194965730205655016437216590690038884309</span>, <span class="hljs-number">208284966254343254016582889051763066574</span>, <span class="hljs-number">137680272193449000169293006333866420934</span>, <span class="hljs-number">250634504150859449051246497912830488025</span>, <span class="hljs-number">124228075953362483108097926850143387433</span>, <span class="hljs-number">232956176229023369857830577971626577196</span>, <span class="hljs-number">149441784891021006224395235471825205661</span>, <span class="hljs-number">118758326165875568431376314508740278934</span>, <span class="hljs-number">222296215466271835013184903421917936512</span>, <span class="hljs-number">49132466023594939909761224481560782731</span>, <span class="hljs-number">406286678537520849308828749751513339</span>, <span class="hljs-number">215122152883292859254246948661946520324</span>, <span class="hljs-number">81283590250399459209567683991648438199</span>, <span class="hljs-number">150395133067480380674905743031927410663</span>, <span class="hljs-number">5710878479977467762548400320726575491</span>, <span class="hljs-number">83627753774286426170934105100463456109</span>, <span class="hljs-number">164968224377869331545649899270867630850</span>, <span class="hljs-number">241057183685774160581265732812497247167</span>, <span class="hljs-number">109136287048010096863680430193408099828</span>, <span class="hljs-number">116313129605409961931811582899075031153</span>, <span class="hljs-number">202739016625709380026000805340243458300</span>, <span class="hljs-number">25408225921774957745573142542576755590</span>, <span class="hljs-number">151336258796933656160956289529558246702</span>, <span class="hljs-number">2947189044370494063643525166023973095</span>, <span class="hljs-number">228678413963736672394976193093568181979</span>, <span class="hljs-number">40627063032321835707220414670018641024</span>, <span class="hljs-number">55446789315226949622969082042881319148</span>, <span class="hljs-number">32219108726651509070669836923591948459</span>, <span class="hljs-number">134454924722414419191920784435633637634</span>, <span class="hljs-number">97952023967728640730045857104376826039</span>, <span class="hljs-number">20659076942504417479953787092276592682</span>, <span class="hljs-number">93281761173713729777326842152860901050</span>, <span class="hljs-number">133634773495582264000160065317239987936</span>, <span class="hljs-number">79976720152435218818731114555425458470</span>, <span class="hljs-number">234654694673289327542859971371886984118</span>, <span class="hljs-number">51332273108989067644245919615090753756</span>, <span class="hljs-number">134120280423303717489979349737802826605</span>, <span class="hljs-number">182001158305920226320085758522717203725</span>, <span class="hljs-number">98408798757865562737462169470346158516</span>, <span class="hljs-number">78200435603900368619334272308272773797</span>, <span class="hljs-number">232796357836930341547987600782979821555</span>, <span class="hljs-number">589106968861493082018132081244848952</span>, <span class="hljs-number">24186003230092331554886767628744415123</span>, <span class="hljs-number">236070626491251466741246103662922841423</span>, <span class="hljs-number">238699080882667864827094121849090696547</span>, <span class="hljs-number">141659873734297659078160283051728812410</span>, <span class="hljs-number">228977113517120063860252637394240795552</span>, <span class="hljs-number">236613527842969921794004708284265628300</span>, <span class="hljs-number">145522034982744654991661857596541755396</span>, <span class="hljs-number">249608374387044047328725156440984678776</span>, <span class="hljs-number">325110572051913836681821746093704556</span>, <span class="hljs-number">171492052199838424502681030556098576483</span>, <span class="hljs-number">156498865212994371079795360268866413702</span>, <span class="hljs-number">196747701509389071931992996873572785043</span>, <span class="hljs-number">70811811603137896158765356680364490781</span>, <span class="hljs-number">83672551582385607422240464086955462541</span>, <span class="hljs-number">117961603623637997457153763936550310698</span>, <span class="hljs-number">224448821395214505399297116719025174412</span>, <span class="hljs-number">4598815373009554321735225938200807251</span>, <span class="hljs-number">194892269604260726530091473301914449005</span>, <span class="hljs-number">127484628022155760909820605666827662175</span>, <span class="hljs-number">208706240846212140439291547368645656474</span>, <span class="hljs-number">14102286481104997303651684152195298336</span>, <span class="hljs-number">6129503335471304345451795609683770657</span>, <span class="hljs-number">103799668048593149396277157385628834185</span>, <span class="hljs-number">185813375481410513002496683918106238351</span>, <span class="hljs-number">233491689316882978147517340230794025796</span>, <span class="hljs-number">46274083097168831187719988888816378961</span>, <span class="hljs-number">119487551553664772614629936285345836934</span>, <span class="hljs-number">84340029922118279362389419277915602509</span>, <span class="hljs-number">88253743193124528032223101368846247085</span>, <span class="hljs-number">227895357640018330099501504941388167432</span>, <span class="hljs-number">92189947144174433744195727086236905626</span>, <span class="hljs-number">83114957902192791332190922428847199876</span>, <span class="hljs-number">173535754090441937731619031520699325122</span>, <span class="hljs-number">192309407933789484835602071782330798398</span>, <span class="hljs-number">255421921600128994923738650157598053776</span>, <span class="hljs-number">155535082468314012733563336837641958625</span>, <span class="hljs-number">49064798421022327310707074253263463055</span>, <span class="hljs-number">161216416471071644769301963857685054031</span>, <span class="hljs-number">252480348817188872515008985698620059851</span>, <span class="hljs-number">75854882798183185741756645038434215611</span>, <span class="hljs-number">256065006192683011190132982128640682537</span>, <span class="hljs-number">87507510173514424105732562474643251223</span>, <span class="hljs-number">163309795132131534875147566536485288212</span>, <span class="hljs-number">253583084320404985699510129361746869059</span>, <span class="hljs-number">253300112521651972637580307326576568313</span>, <span class="hljs-number">239027717080729650738678032571840680727</span>, <span class="hljs-number">117444657686971615526398894470673026034</span>, <span class="hljs-number">215470942802874046857958621181684551426</span>, <span class="hljs-number">58767098748728136687851735836323448020</span>, <span class="hljs-number">249357164697409977883764098879705065535</span>, <span class="hljs-number">174705348385893117518084017669958647345</span>, <span class="hljs-number">211108767177375215605155301209259781232</span>, <span class="hljs-number">57829566748907062397366819001461941421</span>, <span class="hljs-number">88265742700024922112974862134385921564</span>, <span class="hljs-number">80952107622167923709226013231566882261</span>, <span class="hljs-number">236078582132483864916117213281193714198</span>, <span class="hljs-number">193448482646563141692726575550417225891</span>, <span class="hljs-number">245972799166806058223048506073553726233</span>, <span class="hljs-number">10132977708896091601871557249244373666</span>, <span class="hljs-number">201785418152654519825849206312616081028</span>, <span class="hljs-number">15169816744048531212384271865884567710</span>, <span class="hljs-number">122545328290385950043826822277924297182</span>, <span class="hljs-number">202918646192255177261567701479991753600</span>, <span class="hljs-number">32696887488223731055835744711207261936</span>, <span class="hljs-number">88319352182963224921157305627381030375</span>, <span class="hljs-number">92381505322264045777004475690398861771</span>, <span class="hljs-number">189745654013352563126968415157143821842</span>, <span class="hljs-number">152254915005998949299817641843658795579</span>, <span class="hljs-number">198032433618991362619448347415342295581</span>, <span class="hljs-number">84073892809321676935569114878067118319</span>, <span class="hljs-number">82243805869584256211699602267760745768</span>, <span class="hljs-number">61994229948266781537191603999495995852</span>, <span class="hljs-number">253668765227759797787675352833142466255</span>, <span class="hljs-number">38865376724677211964966907748953557125</span>, <span class="hljs-number">134615436811268347303232550777225944929</span>, <span class="hljs-number">176932422465426107783498083830285780588</span>, <span class="hljs-number">207573742393618910694054452362826628208</span>, <span class="hljs-number">200033130835394442710748301293534928706</span>, <span class="hljs-number">127536063935293533700918451145963158658</span>, <span class="hljs-number">219125698281820710910675956971948816959</span>, <span class="hljs-number">179795893258398750139395156587561075767</span>, <span class="hljs-number">69649628109726874051635160004398498964</span>, <span class="hljs-number">241433717681314766463039563422535023524</span>, <span class="hljs-number">202664264135718511331695232476272832350</span>, <span class="hljs-number">205151096657425932591242432052912914182</span>, <span class="hljs-number">210305712465948130683966275157181140301</span>, <span class="hljs-number">196555690055906934925300527324955477733</span>, <span class="hljs-number">66817932643964538216259564711698986077</span>, <span class="hljs-number">95270796440975607179107356182889534333</span>, <span class="hljs-number">123226880424532374188134357659879826495</span>, <span class="hljs-number">53506495440223773538415807620524749240</span>, <span class="hljs-number">19253217887083870834249774316467647628</span>, <span class="hljs-number">165699356396365023442008488156823647206</span>, <span class="hljs-number">107809175498119862854792975070673056027</span>, <span class="hljs-number">250453989887421415931162217952559757164</span>, <span class="hljs-number">171492052199838424502681030556098576483</span>, <span class="hljs-number">133778166882550119563444625306816232463</span>, <span class="hljs-number">149009301604122447269581792013291889175</span>, <span class="hljs-number">9982418254629616281350713836647603294</span>, <span class="hljs-number">203486292122499140756846060502464655972</span>, <span class="hljs-number">157686696123400087437836943220926921848</span>, <span class="hljs-number">88338919773540412238116717043122711811</span>, <span class="hljs-number">113265824169274322024623493892867211478</span>, <span class="hljs-number">5549372099744960679418616304893848801</span>, <span class="hljs-number">12431828907518852062050349123660880165</span>, <span class="hljs-number">183957934738536914983862053251433028750</span>, <span class="hljs-number">42027289270308356303682029801998790750</span>, <span class="hljs-number">117406080036483925915502666019795783905</span>, <span class="hljs-number">154312255292300186042636734144948304054</span>, <span class="hljs-number">143706917273862261295046346995206133170</span>, <span class="hljs-number">50088136095338601440516112338120787526</span>, <span class="hljs-number">250634504150859449051246497912830488025</span>, <span class="hljs-number">8073010289877796888705519374892639903</span>, <span class="hljs-number">40049582814576788803483039836229025416</span>, <span class="hljs-number">227012342545923833983403067401561291645</span>, <span class="hljs-number">201776603581414625783054400184026088994</span>, <span class="hljs-number">55474945478884522762318445841998187357</span>, <span class="hljs-number">221515530211550293408010846844218019597</span>, <span class="hljs-number">172650752042211610909190315288155597255</span>, <span class="hljs-number">67046194931321172530462444254204111483</span>, <span class="hljs-number">207435868835185636819659137800256834557</span>, <span class="hljs-number">188063222224545200294767050268070647452</span>, <span class="hljs-number">58099349021260301211275261896736590564</span>, <span class="hljs-number">23598877596106927870697531042828774738</span>, <span class="hljs-number">58546308516383335224739442370238545000</span>, <span class="hljs-number">58125311541947998710088435169901475101</span>, <span class="hljs-number">238219925698115060748249043752036454438</span>, <span class="hljs-number">203910234934340893915761800653823457631</span>, <span class="hljs-number">190854889967769152565565000250829375099</span>, <span class="hljs-number">37573623890629846209257307181880876288</span>, <span class="hljs-number">226220240200270623843038279593586687278</span>, <span class="hljs-number">144246075981535671790438155977352345487</span>, <span class="hljs-number">14665770553338784222331493932533448756</span>, <span class="hljs-number">37992062606775322664977502677838074649</span>, <span class="hljs-number">47370175759976523832233910009306151684</span>, <span class="hljs-number">97047813247943880266351445874642842468</span>, <span class="hljs-number">237607444658797800072728280983357541134</span>, <span class="hljs-number">174853113478993738890584814806707459112</span>, <span class="hljs-number">17104608155861584438824639050715857607</span>, <span class="hljs-number">83639027011494777283064583268678718843</span>, <span class="hljs-number">237826165608708003941944469905843354705</span>, <span class="hljs-number">231707683915242052796886276983724691027</span>, <span class="hljs-number">146089830852925550139294146760718642221</span>, <span class="hljs-number">25604562707667550478623425477029052785</span>, <span class="hljs-number">108577663147976992047614498924706939204</span>, <span class="hljs-number">69040319834829375335287614995435269276</span>, <span class="hljs-number">169933229202934375632745753379104389929</span>, <span class="hljs-number">72693008284867494808267387710985847974</span>, <span class="hljs-number">158548279589965576940349068403862889270</span>, <span class="hljs-number">49458101234256610254825879149914255140</span>, <span class="hljs-number">24389558269688411084589654047215902968</span>, <span class="hljs-number">210567980379246548727819953025607019254</span>, <span class="hljs-number">110423375132252997825868399832298953831</span>, <span class="hljs-number">109589895677661968369424757992411668628</span>, <span class="hljs-number">66177577069199763925999718357846633613</span>, <span class="hljs-number">83602293803708828242273186265396676466</span>, <span class="hljs-number">172226271050176278536911356541786290551</span>, <span class="hljs-number">85799805809703976643034084477579915867</span>, <span class="hljs-number">179399990302447560847151603157937241688</span>, <span class="hljs-number">81687654752229170984692833277072534294</span>, <span class="hljs-number">160766441640281044008645821822296569868</span>, <span class="hljs-number">100306680611749750243920501921769642984</span>, <span class="hljs-number">42195187332833922597871030332905266026</span>, <span class="hljs-number">238918420772178508359295233180536910768</span>, <span class="hljs-number">221685929158944699801776621298532178665</span>, <span class="hljs-number">209349638787804999657456057184702655805</span>, <span class="hljs-number">183953393268431043006359511952782903516</span>, <span class="hljs-number">137364333131365794683132159746962959967</span>, <span class="hljs-number">15637689373906596015395350692459218048</span>, <span class="hljs-number">145956368418289159411911667337899986262</span>, <span class="hljs-number">197987711355277581048877821432652325207</span>, <span class="hljs-number">125421308989313724733467092345532539875</span>, <span class="hljs-number">90525081516582408488547894471421476595</span>, <span class="hljs-number">107405840115256692042814887586009104950</span>, <span class="hljs-number">71587500700172519801649824611045199280</span>, <span class="hljs-number">10155721246869986043302768283257682883</span>, <span class="hljs-number">100522792569358427133597834727509523742</span>, <span class="hljs-number">244473925018526409824670892423775482110</span>, <span class="hljs-number">50746138425761666610345252577572889037</span>, <span class="hljs-number">142188269919422432629363225167297071042</span>, <span class="hljs-number">8235113926890598897465093754260801947</span>, <span class="hljs-number">174540885017405784646782293055852044631</span>, <span class="hljs-number">171949847901434672429841435895697323702</span>, <span class="hljs-number">34391199559497599434575002007581170988</span>, <span class="hljs-number">7337868660819385932166025474594964373</span>, <span class="hljs-number">89608475952042154068811282935241824949</span>, <span class="hljs-number">162561097613906905390170334328135062933</span>, <span class="hljs-number">252566077272083954707900007055640560669</span>, <span class="hljs-number">4284637988579219107997224848114896904</span>, <span class="hljs-number">220026371387782427901244689037957398829</span>, <span class="hljs-number">86019060485320999498155965142619258089</span>, <span class="hljs-number">19304861731281576405798605142335886482</span>, <span class="hljs-number">123188238667151068575810494833929221938</span>, <span class="hljs-number">125089740978532716086813732154638565196</span>, <span class="hljs-number">252061524500088702951562270741214799294</span>, <span class="hljs-number">89528875472312768404823823905699760649</span>, <span class="hljs-number">63307407053590054220492282094909190524</span>, <span class="hljs-number">24389558269688411084589654047215902968</span>, <span class="hljs-number">43835777110183833958990705735152973942</span>, <span class="hljs-number">196543204310466258426232803779025620993</span>, <span class="hljs-number">225032412767857179129234169288824097261</span>, <span class="hljs-number">50292890880286260984317361296226049436</span>, <span class="hljs-number">64928956886509273090981701066528078331</span>, <span class="hljs-number">25408225921774957745573142542576755590</span>, <span class="hljs-number">235921667882292842303120860570747218086</span>, <span class="hljs-number">217132603855089441017750752624514343437</span>, <span class="hljs-number">11106129204256119599329380588789107048</span>, <span class="hljs-number">147501327490657927610543345089238991876</span>, <span class="hljs-number">158091159632919983870444592039392730373</span>, <span class="hljs-number">254215886971254771885657857148535673338</span>, <span class="hljs-number">129869106474614345624950211566868568809</span>, <span class="hljs-number">10425702332274469498479699675668087022</span>, <span class="hljs-number">136595953187315682777976356839442311764</span>, <span class="hljs-number">1607792140397737044118662059498732982</span>, <span class="hljs-number">23710000155612873207506044342091514799</span>, <span class="hljs-number">118571340370877720354330132780832828911</span>, <span class="hljs-number">194624784476702188629452374731837038856</span>, <span class="hljs-number">51332273108989067644245919615090753756</span>, <span class="hljs-number">240921043405288511960365826273938845156</span>, <span class="hljs-number">158670188709175825212687487436006138030</span>, <span class="hljs-number">133641825913283256858340618209700716053</span>, <span class="hljs-number">43054466484232130048301271684438593412</span>, <span class="hljs-number">20361972967806283315536154125012604660</span>, <span class="hljs-number">135700832615866572032111395529532615300</span>, <span class="hljs-number">160609169788639387827865051539103507016</span>, <span class="hljs-number">100576279475451993660766480883708996211</span>, <span class="hljs-number">215424685541583305069271024253690375127</span>, <span class="hljs-number">60018956375784961551937423504137141702</span>, <span class="hljs-number">107997941230633604720421526632224279451</span>, <span class="hljs-number">219482010609171816035007605036664317041</span>, <span class="hljs-number">22173526221024380740269311947729076493</span>, <span class="hljs-number">249746554302052221287371350978970766087</span>, <span class="hljs-number">93207359085331319264650563354951254906</span>, <span class="hljs-number">221421697282310997113867048083058096452</span>, <span class="hljs-number">61834092635779365101011109381392037516</span>, <span class="hljs-number">162215218701897689647766394615098617152</span>, <span class="hljs-number">141856131587452385513407955541400099703</span>, <span class="hljs-number">177910903795887762773545874929605680469</span>, <span class="hljs-number">228832704523723308335513552177377803295</span>, <span class="hljs-number">229427981969125094398744034150988525118</span>, <span class="hljs-number">217938760689082034514008764751385239765</span>, <span class="hljs-number">3238055163645731541423094980789895030</span>, <span class="hljs-number">42308449860804765793467328093112118974</span>, <span class="hljs-number">254764518926620089428032312378507653680</span>, <span class="hljs-number">215733901156118606036318409454786603209</span>, <span class="hljs-number">59640829345183339336712595595022506261</span>, <span class="hljs-number">33515071724475649656070325837411550208</span>, <span class="hljs-number">51175659069843551646353202764296812462</span>, <span class="hljs-number">211462959696081863041546889096760952490</span>, <span class="hljs-number">230559603938699838189391087728971115767</span>, <span class="hljs-number">85878911733601049548471257838175175563</span>, <span class="hljs-number">214134904074265214033878852207103328297</span>, <span class="hljs-number">160702405980652445507529591230654474171</span>, <span class="hljs-number">223755040649990285320102091954198427148</span>, <span class="hljs-number">166476753890268002826149533120107157745</span>, <span class="hljs-number">26283916639129998224675164834425763384</span>, <span class="hljs-number">232971495542024495583092055361321729894</span>, <span class="hljs-number">79741799146769724681649849525636816379</span>, <span class="hljs-number">228506526471280046809909301748098760369</span>, <span class="hljs-number">167502422063741368765891061653686283332</span>, <span class="hljs-number">26984184590668253713951516794937308166</span>, <span class="hljs-number">105952393031190074432183821281493254</span>, <span class="hljs-number">113823192955281698937767041115166174652</span>, <span class="hljs-number">93264047694114869263275726820602569731</span>, <span class="hljs-number">55481974783112950660682138071588408040</span>, <span class="hljs-number">108961894273530837550182447112767144669</span>, <span class="hljs-number">47975793549419083945738147934068241928</span>, <span class="hljs-number">204024371586357035343484206754422857590</span>, <span class="hljs-number">251859351272989525849999231358507018068</span>, <span class="hljs-number">75939709807860493804628805619699991501</span>, <span class="hljs-number">129031774446142139804436921156668129187</span>, <span class="hljs-number">110764318451937254261883856778359218969</span>, <span class="hljs-number">246404864722813298477426808193494673610</span>, <span class="hljs-number">153818236564405157581869620439634140065</span>, <span class="hljs-number">246125932167584353084676586883038397451</span>]<br><br><span class="hljs-comment"># 预计算16位素数</span><br>primes_16bit = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>**<span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> isPrime(i)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_bit</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]:  <span class="hljs-comment"># 尝试0和1</span><br>        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):  <span class="hljs-comment"># 尝试d从1到10</span><br>            <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> primes_16bit:  <span class="hljs-comment"># 尝试所有16位素数</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(a + b*d, e, p) == n:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(b)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;?&#x27;</span>  <span class="hljs-comment"># 未找到</span><br><br><span class="hljs-comment"># 解密所有位</span><br>plain_bits = []<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> tqdm(ciphertext):<br>    plain_bits.append(decrypt_bit(n))<br><br><span class="hljs-comment"># 将二进制字符串转换回字节</span><br>plaintext = <span class="hljs-string">&#x27;&#x27;</span>.join(plain_bits)<br>flag = <span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">int</span>(plaintext[i:i+<span class="hljs-number">8</span>], <span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(plaintext), <span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>flag：b‘moectf{Y0u_h@v3_ju5t_s01v3d_7h1s_pr0b13m!}’</p><p>总结：为数不多能ak的密码（如果后续不上题的话），刚学两三个月的密码手适合做，可以增强一下信心以及练一下基本功</p><p>最后，测试一下图片：</p><p><img src="/2025/08/09/2025moectf(Crypto)/099f596209ac5396bf92b5f661c7ed24.jpeg" alt="099f596209ac5396bf92b5f661c7ed24"></p><p>哦，后续会继续上题</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
