[{"title":"Java常见八股","url":"/2025/08/26/Java常见八股/","content":"\n\n\n# **Java常见**八股\n\n## **一、Java 基础 (Java Basics)**\n\n### **1. 接口 (Interface) vs 抽象类 (Abstract Class)**\n\n**面试官：** 说一下接口和抽象类的区别。\n\n**我：**\n好的，接口和抽象类主要有以下几个核心区别：\n\n1. **设计目的不同**：抽象类描述的是 **“is-a”** 关系，强调类的本质是什么，比如 `Manager` 是一个 `Employee`。而接口描述的是 **“has-a” 或 “can-do”** 关系，强调类具备什么能力，比如 `Bird` 可以 `Fly`。\n2. **方法实现**：抽象类可以有抽象方法，也可以有实现了的具体方法，用于代码复用。在JDK 8之前，接口只能有抽象方法；JDK 8之后，接口可以拥有默认方法（`default`）和静态方法（`static`）。\n3. **成员变量**：抽象类中的变量可以是普通的，也可以是常量。而接口中定义的变量默认都是 `public static final` 的常量。\n4. **构造方法**：抽象类有构造方法，虽然不能实例化自己，但可以供子类初始化时调用。接口没有构造方法。\n5. **继承性**：这是最关键的差别。Java是单继承，一个类**只能继承一个**抽象类。但一个类可以**实现多个**接口，从而获得多种能力。\n\n**选用场景**：\n\n- 如果需要定义一系列**密切相关**对象的共同模板和行为，优先使用**抽象类**。\n- 如果需要定义一种**能力或契约**，让**不相关**的类都能拥有，或者需要实现多重继承的效果，就使用**接口**。\n\n------\n\n### **2. 单例模式 (Singleton Pattern) 与双重检查锁 (Double-Checked Locking)**\n\n**面试官：** 了解单例模式吗？写一个线程安全的单例。\n\n**我：**\n单例模式的核心是保证一个类在任何情况下都只有一个实例，并提供一个全局访问点。\n\n实现线程安全的单例有多种方式，比如饿汉式、懒汉式加锁、静态内部类等。其中，**双重检查锁（DCL）** 是一种性能和线程安全兼顾的懒加载方案。\n\n（如果让写代码，我会写出DCL的代码。但按您要求，这里不做代码展示）\n\n**它的核心思路是：**\n\n1. 将实例引用用 `volatile` 关键字修饰。\n2. 在 `getInstance` 方法中，先进行一次判空，如果实例不存在，再进入同步代码块。\n3. 进入同步块后，再进行第二次判空，最后才创建实例。\n\n**面试官：** 为什么这里必须要用 `volatile` 关键字？\n\n**我：**\n`volatile` 在这里主要作用是**禁止指令重排序**。\n\n`instance = new Singleton()` 这行代码不是一个原子操作，它分为三步：1.分配内存、2.初始化对象、3.将引用指向内存地址。JVM可能对步骤2和3进行重排序。\n\n如果没有 `volatile`，可能发生：线程A执行了1和3，此时 `instance` 不为null，但对象还未初始化（步骤2未执行）。这时线程B进来判断 `instance` 不为null，就直接返回了一个**半成品对象**去使用，从而导致错误。\n\n`volatile` 通过内存屏障禁止了这种重排序，保证了对象的初始化完成在前，引用赋值在后，从而解决了这个隐蔽的问题。\n\n**其他实现方式的对比：**\n\n- **饿汉式**：最简单，线程安全，但不是懒加载，可能造成资源浪费。\n- **同步方法懒汉式**：线程安全，但锁粒度太大，性能差。\n- **静态内部类**：我个人认为是最优雅的实现之一。它利用类加载机制保证了线程安全，且实现了懒加载，无需加锁，性能高。\n- **枚举**：最安全的方式，不仅能避免多线程问题，还能防止反射和反序列化破坏单例。\n\n## **二、Java 集合框架 (Java Collections Framework)**\n\n#### **1. HashMap 深度解析**\n\n**面试官：** 能详细说说 HashMap 的实现原理吗？\n\n**我：**\n好的。HashMap 的核心实现是“数组 + 链表 + 红黑树”。\n\n------\n\n**面试官：** 具体讲讲它的数据结构？\n\n**我：**\n\n1. **数据结构**：\n   - 底层是一个 `Node<K,V>[] table` 数组。\n   - 数组的每个位置称为一个“桶”（bucket）。存入时，根据 key 的 hash 值计算出数组下标。\n   - 如果不同的 key 落到了同一个桶里（哈希冲突），就用链表来存储。\n   - 当链表长度超过阈值（默认为8），并且数组总长度达到一定规模（默认为64）时，链表会转换为红黑树。\n   - 当树节点数小于阈值（默认为6）时，红黑树会退化成链表。\n\n------\n\n**面试官：** 为什么要引入红黑树？\n\n**我：**\n\n2. **引入红黑树的原因**：\n\n\\- 解决极端情况下（例如大量数据哈希冲突），链表过长导致的查询效率从 O(1) 退化为 O(n) 的问题。\n\\- 红黑树是一种自平衡的二叉查找树，能将查询、插入、删除的时间复杂度控制在 O(log n)，保证了性能下限。\n\n------\n\n**面试官：** HashMap 什么时候扩容？怎么扩？\n\n**我：**\n\n3. **扩容机制（Rehashing）**：\n\n\\- 当元素数量超过 `容量 * 负载因子`（默认0.75）时，数组会进行扩容（通常扩为原来的2倍）。\n\\- 扩容后，所有元素需要重新计算在新数组中的位置，这是一个比较耗时的操作。\n\n------\n\n**面试官：** 为什么 HashMap 的长度总是2的幂次方？\n\n**我：**\n\n4. **长度为何是2的幂次方**：\n\n\\- 为了高效地通过 `(n - 1) & hash` 计算 key 的索引位置。\n\\- `&` 操作比取模运算 `%` 效率高得多。当数组长度 n 为 2 的幂时，`(n - 1) & hash` 等价于 `hash % n`，但效率更高，同时能保证计算结果均匀分布。\n\n------\n\n**面试官：** 从 JDK7 到 JDK8，HashMap 在解决冲突时有什么重要变化？\n\n**我：**\n\n5. **JDK7头插法 -> JDK8尾插法**：\n\n\\- **JDK7** 使用头插法，认为新插入的元素更可能被马上访问。但在多线程扩容时，头插法会改变链表的顺序，可能导致**形成环形链表**，引起死循环和数据丢失。\n\\- **JDK8** 改为尾插法，扩容时链表元素顺序不变，解决了这个潜在问题。（但HashMap本身仍非线程安全，只是解决了这个特定的死循环Bug）。\n\n------\n\n**面试官：** 为什么选择这种链表和红黑树结合的方式？\n\n**我：**\n\n6. **为何采用链表+红黑树**：\n\n\\- 这是一种在**空间**和**时间**上的权衡。\n\\- 链表结构简单，占用内存少，但在节点多时性能差。\n\\- 红黑树性能好，但结构复杂，占用内存更多。\n\\- 这种设计保证了在绝大多数冲突较少的情况下使用高效的链表，仅在少数冲突严重时转为红黑树，以空间换时间，达到整体最优。\n\n\n\n### **2. ArrayList vs LinkedList**\n\n**面试官：** 对比一下 ArrayList 和 LinkedList。\n\n**我：**\n好的。它们核心区别在于底层数据结构和由此带来的性能差异。\n\n1. **底层结构**：\n   - **ArrayList** 基于**动态数组**。内存中是连续的存储空间。\n   - **LinkedList** 基于**双向链表**。内存中是通过节点指针连接的离散存储。\n\n------\n\n**面试官：** 它们在操作效率上有什么不同？\n\n**我：**\n\n2. **操作效率**：\n\n\\- **随机访问 (get/set)**：ArrayList 的复杂度是 O(1)，因为它可以通过下标直接计算内存地址。LinkedList 是 O(n)，需要遍历链表。\n\\- **头部插入/删除**：ArrayList 是 O(n)，因为需要移动后续所有元素。LinkedList 是 O(1)，只需修改指针。\n\\- **尾部插入/删除**：两者在已知尾节点的情况下都接近 O(1)。ArrayList 在无需扩容时是 O(1)；LinkedList 需要先遍历到尾部（如果没有尾指针记录）是 O(n)，但通常实现会记录尾指针，所以也是 O(1)。\n\\- **中间插入/删除**：ArrayList 平均需要移动一半元素，是 O(n)。LinkedList 查找位置是 O(n)，但插入/删除操作本身是 O(1)。\n\n------\n\n**面试官：** 它们的内存占用有什么特点？\n\n**我：**\n\n3. **内存占用**：\n\n\\- **ArrayList** 只在数组尾部预留空间，内存利用率高。但扩容时会造成临时浪费。\n\\- **LinkedList** 每个元素都需要消耗额外空间存放前后节点的指针，内存开销更大。\n\n------\n\n**面试官：** 实际开发中如何选择？\n\n**我：**\n\n4. **适用场景**：\n\n\\- 优先选择 **ArrayList**。因为它CPU缓存友好（内存连续），综合性能在大多数读多写少的场景下更好。\n\\- 只有在需要频繁在**列表头部或中间**进行插入/删除操作时，才考虑使用 **LinkedList**。\n\n\n\n### **3. ConcurrentHashMap 原理与演进**\n\n**面试官：** 讲一下 ConcurrentHashMap 的原理，以及它在 JDK7 和 JDK8 的实现有什么不同。\n\n**我：**\n好的。ConcurrentHashMap 是 HashMap 的线程安全版本，它的实现原理在 JDK7 和 JDK8 有重大变化。\n\n------\n\n**面试官：** 先说下 JDK7 是怎么实现的？\n\n**我：**\n\n1. **JDK7分段锁实现 (Segment Locking)**：\n   - 它内部有一个 **Segment** 数组，每个 Segment 本质上就是一个独立的、继承了 ReentrantLock 的 HashEntry[] 数组（一个小HashMap）。\n   - **“分段锁”** 的思想是：锁不再针对整个Map，而是只锁住其中一个 Segment。这样，不同 Segment 的读写操作可以完全并行，大大提升了并发度。\n   - 默认有 16 个 Segment，所以理论上最多可以支持 16 个线程同时写入。\n\n------\n\n**面试官：** 那 JDK8 呢？为什么又改了？\n\n**我：**\n\n2. **JDK8 CAS + synchronized 实现**：\n\n\\- JDK8 抛弃了 Segment 分段锁的概念，它的底层数据结构变得和 HashMap 一样，是 **Node[] 数组 + 链表 + 红黑树**。\n\\- 实现线程安全的方式更加细化：\n\\- **CAS (无锁算法)**：用于初始化数组、向桶中插入节点（当桶为空时）等无竞争场景，性能极高。\n\\- **synchronized (同步锁)**：当发生哈希冲突，需要操作链表或红黑树时，则只**锁住当前发生冲突的桶（链表头节点/树根节点）**。锁的粒度从 JDK7 的一个 Segment（管着很多桶）缩小到了一个桶，并发度更高。\n\\- 这种设计结合了 CAS 的高性能和 synchronized 的稳定性，并且在锁粒度上做到了极致。\n\n------\n\n**面试官：** 从 JDK7 到 JDK8 这次升级主要带来了哪些好处？\n\n**我：**\n\n3. **JDK7 到 JDK8 的升级**：\n\n\\- **锁粒度更小**：从锁一段（Segment）到锁一桶（Bucket），并发性能得到极大提升。\n\\- **数据结构优化**：引入了红黑树，解决了链表过长时查询慢的问题，保证了最坏情况下的性能。\n\\- **API 增强**：提供了更多方便的流式 API（如 `forEach`, `reduce`）。\n\\- **代码更简化**：移除了复杂的 Segment 结构，底层实现变得更简洁、更统一（和 HashMap 类似），更易于维护和理解。\n\n## **三、Java 并发编程 (Java Concurrency)**\n\n#### **1. 乐观锁与悲观锁**\n\n**面试官：** 说说你对乐观锁和悲观锁的理解。\n\n**我：**\n好的，这是两种不同的并发控制策略。\n\n1. **悲观锁**：\n   - **思想**：认为并发冲突是**大概率事件**，每次操作数据时，都假定别人会修改，所以先加锁再操作。\n   - **实现**：`synchronized` 关键字、`ReentrantLock` 等。\n   - **类比**：就像“写文档时先锁门”，防止别人打扰。\n2. **乐观锁**：\n   - **思想**：认为并发冲突是**小概率事件**，每次操作数据时，不会先加锁，而是在更新时判断此期间数据是否被他人修改过。\n   - **实现**：通常使用 **CAS** (Compare-And-Swap) 算法或版本号机制。\n   - **类比**：就像“写文档时不锁门”，提交时才检查有没有人动过原稿，没动过就提交，动了就放弃或重试。\n\n**适用场景**：\n\n- **悲观锁**：适合**写多读少**的场景，冲突严重时性能高。\n- **乐观锁**：适合**读多写少**的场景，冲突少时性能远高于悲观锁，能减少上下文切换。\n\n### **2. CAS 原理与原子类实现**\n\n**面试官：** 讲一下 CAS 的原理。\n\n**我：**\n\n1. **CAS实现原理**：\n   - CAS 的全称是 `Compare-And-Swap`，即**比较并交换**。它是一个**CPU原子指令**，保证了操作的原子性。\n   - 操作包含三个操作数：**内存地址 V**、**旧的预期值 A**、**要更新的新值 B**。\n   - **原理**：当且仅当内存地址 V 中的当前值等于预期值 A 时，处理器才会自动将地址 V 的值更新为新值 B，否则什么都不做。整个操作是一个原子操作。\n\n------\n\n**面试官：** CAS 有什么优缺点？\n\n**我：**\n**优点**：\n\n- **高性能**：它是一种无锁操作，避免了传统互斥锁（如 `synchronized`）带来的线程阻塞、上下文切换的开销，在低竞争环境下性能很高。\n\n**缺点**：\n\n- **ABA 问题**：这是最经典的缺点。一个线程读取内存值为 A，此时另一个线程将值改为 B，然后又改回 A。等第一个线程执行 CAS 时，发现值还是 A，于是操作成功，但它并不知道这个 A 已经被“中间修改过”了。\n- **循环时间长开销大**：如果 CAS 操作长时间不成功（竞争激烈），CPU 会一直进行自旋（循环重试），消耗资源。\n- **只能保证一个共享变量的原子操作**：对于多个共享变量，CAS 无法保证原子性，可能需要加锁。\n\n------\n\n**面试官：** 那怎么解决 ABA 问题呢？\n\n**我：**\n\n- 可以通过给数据加上**版本号（Stamp）** 或时间戳来解决。\n- Java 提供了 `AtomicStampedReference` 类。它不仅在比较值，还会比较一个 `int` 型的版本号标记。任何对值的修改都会使版本号递增，这样即使值从 A 变回 A，版本号也变了，CAS 就会失败。\n\n------\n\n**面试官：** 原子类（比如 AtomicInteger）是如何利用 CAS 实现的？\n\n**我：**\n\n2. **原子类实现原理**：\n\n\\- 原子类（如 `AtomicInteger`）内部的核心字段（如 `value`）都由 `volatile` 修饰，保证了可见性。\n\\- 它们的所有原子性方法（如 `getAndIncrement()`）内部都调用了 `Unsafe` 类的 CAS 方法（`compareAndSwapInt`）。\n\\- 以 `i++` 为例，`getAndIncrement()` 的实现是一个 **CAS 自旋循环**：先获取当前值，计算新值，然后用 CAS 尝试更新。如果失败（值已被其他线程修改），就重新获取当前值，再次计算和尝试，直到成功为止。\n\n### **3. synchronized 与 ReentrantLock 详解**\n\n**面试官：** 对比一下 `synchronized` 和 `ReentrantLock`。\n\n**我：**\n好的，它们的核心区别如下：\n\n1. **本质不同**：`synchronized` 是 **Java 关键字**，由 JVM 底层实现；`ReentrantLock` 是一个 **Java 类**，基于 AQS 实现。\n2. **锁的释放**：`synchronized` 在代码块执行完或发生异常时，由 **JVM 自动释放锁**；`ReentrantLock` 必须手动调用 `unlock()` 方法释放锁，通常在 `finally` 块中完成，否则容易造成死锁。\n3. **功能丰富性**：`ReentrantLock` 功能更丰富。\n   - **可中断**：`lockInterruptibly()` 可以响应中断，在等待锁的过程中可以被中断。\n   - **公平锁**：可以选择创建公平锁（先等待的线程先获得锁），`synchronized` 是非公平锁。\n   - **条件队列**：可以通过 `Condition` 实现多路通知，更精细地控制线程的等待与唤醒。\n4. **灵活性**：`synchronized` 的加锁和释放锁是固化的；`ReentrantLock` 可以在方法内加锁，在另一方法内解锁，更灵活。\n5. **锁的实现机制**：`synchronized` 在 JDK6 后引入了**锁升级**机制来优化性能；`ReentrantLock` 则通过 AQS 内部的 CAS 自旋来实现。\n\n**选用建议**：\n\n- 除非需要 `ReentrantLock` 的高级功能（如可中断、公平锁、Condition），否则**优先使用 `synchronized`**，因为它的写法更简洁，且由 JVM 维护和优化。\n\n------\n\n**面试官：** 详细说一下 `synchronized` 的锁升级流程。\n\n**我：**\n\n2. **synchronized 的锁升级流程**：\n\n为了在性能和开销之间取得平衡，JVM 将 `synchronized` 的锁状态分为4级，并可以**从低到高**进行升级，但**不可降级**。\n\n```\n- **无锁 (No Lock)**：对象未作为同步锁使用。\n- **偏向锁 (Biased Locking)**：\n    - **目的**：在**没有竞争**的情况下，消除同步开销。假设锁总是由同一线程获得。\n    - **流程**：第一个线程访问同步块时，会通过 CAS 操作将对象头中的 Mark Word 里存储的线程 ID 改为自己的 ID。之后该线程再进入时，只需检查线程 ID 是否匹配，匹配则无需任何同步操作。\n- **轻量级锁 (Lightweight Lock)**：\n    - **触发条件**：当有**轻微竞争**（第二个线程来尝试获取锁）时，偏向锁会升级为轻量级锁。\n    - **流程**：线程会在自己的栈帧中创建一个锁记录（Lock Record），然后通过 **CAS** 操作尝试将对象头的 Mark Word 更新为指向该锁记录的指针。如果成功，当前线程就获得了锁。如果失败，会**自旋**重试一定次数。\n- **重量级锁 (Heavyweight Lock)**：\n    - **触发条件**：**自旋失败**（竞争加剧，线程数多或等待时间长）后，锁会升级为重量级锁。\n    - **流程**：此时，未获得锁的线程会**被挂起**，进入阻塞状态，等待操作系统调度，需要进行用户态到内核态的切换，开销最大。\n```\n\n------\n\n**面试官：** 什么是 `synchronized` 的可重入性？\n\n**我：**\n\n3. **synchronized 的可重入性**：\n\n\\- **概念**：指**同一个线程**在执行完外层同步方法/块后，再次进入它的内层同步方法/块时，**可以直接获得锁**而不会被自己阻塞。\n\\- **原理**：JVM 会为每个锁对象维护一个**计数器**和一个**持有者线程标识**。当线程第一次获取锁时，计数器变为1。每次重入，计数器就+1。退出同步块，计数器就-1。直到计数器为0，锁才被真正释放。\n\\- **重要性**：可重入性避免了线程死锁自己，是设计同步代码的基础。\n\n### **4. volatile 关键字的作用与原理**\n\n**面试官：** 讲一下 `volatile` 关键字的作用和原理。\n\n**我：**\n好的。`volatile` 是 Java 提供的轻量级同步机制，它主要有两大核心作用：**保证内存可见性** 和 **禁止指令重排序**。\n\n------\n\n**面试官：** 先解释一下什么是内存可见性，`volatile` 是如何保证的？\n\n**我：**\n\n1. **内存可见性 (Memory Visibility)**：\n   - **问题**：根据 Java 内存模型 (JMM)，每个线程有自己的工作内存，用于缓存共享变量的副本。当一个线程修改了共享变量，可能只是先修改了自己的工作内存，未能**立即写回主内存**，导致其他线程读取到的仍然是旧的副本值。\n   - **`volatile` 的作用**：当一个变量被声明为 `volatile` 后：\n     - 任何线程**修改**这个变量，都会**立即强制**将新值刷新到主内存。\n     - 任何线程**读取**这个变量，都会**强制**从主内存中重新读取最新的值，使当前工作内存中的副本失效。\n   - **原理**：底层是通过**内存屏障** (Memory Barrier) 来实现的。写操作前后会插入屏障，强制将缓存数据刷回主存；读操作前后也会插入屏障，强制使本地缓存失效，从主存拉取新数据。\n\n------\n\n**面试官：** 那禁止指令重排序呢？这又是什么？\n\n**我：**\n\n2. **禁止指令重排序 (Prevention of Instruction Reordering)**：\n\n\\- **问题**：为了提升性能，编译器和处理器常常会**对指令进行重排序**。但在多线程环境下，不恰当的重排序可能会导致程序运行结果与预期不符。（最经典的例子就是双重检查锁单例模式中，`instance = new Singleton()` 这行代码可能被重排序，导致其他线程拿到一个未初始化完全的对象）。\n\\- **`volatile` 的作用**：通过添加**内存屏障**，`volatile` 关键字禁止了 JVM 和处理器对修饰了 `volatile` 的变量的**读写操作**与其他指令进行重排序，从而保证了操作的有序性。\n\\- **原理**：内存屏障就像一个“栅栏”，告诉编译器和 CPU，必须在这个屏障之前的所有操作都完成后，才能执行屏障之后的操作。\n\n**总结**：`volatile` 的核心是通过**内存屏障**这一 CPU 指令来实现可见性和有序性。但它**不保证原子性**，像 `i++` 这种复合操作依然需要加锁或使用原子类。\n\n### **5. Java 内存模型 (JMM) 与 Happens-Before**\n\n**面试官：** 谈谈你对 Java 内存模型 (JMM) 的理解。\n\n**我：**\n好的。JMM 是一个**抽象的概念**，它定义了程序中各种变量（线程共享变量）的访问规则，以及如何在内存中进行读写操作的细节。它屏蔽了底层硬件内存结构的差异，旨在解决多线程下的**可见性**、**原子性**和**有序性**问题。\n\n------\n\n**面试官：** JMM 是如何抽象内存结构的？\n\n**我：**\n\n1. **JMM抽象模型（主内存、工作内存）**：\n\n   - **主内存 (Main Memory)**：存储所有的共享变量。所有线程都能访问，但速度较慢。\n   - **工作内存 (Working Memory)**：每个线程都有自己的工作内存，可以看作是**CPU高速缓存和寄存器的抽象**。它存储了该线程使用到的共享变量的**副本**。\n   - **交互协议**：JMM 规定了线程如何与主内存进行交互：\n     - **read**：从主内存读取数据到工作内存。\n     - **load**：将 read 得到的值放入工作内存的变量副本中。\n     - **use**：执行引擎使用工作内存中的变量值。\n     - **assign**：执行引擎将新值赋给工作内存中的变量。\n     - **store**：将工作内存中的变量值传送到主内存。\n     - **write**：将 store 传来的值写入主内存的变量中。\n\n   JMM 通过这8种原子操作（还有 lock 和 unlock）来控制主内存与工作内存之间的同步，从而决定一个线程对共享变量的写入何时对另一个线程可见。**`volatile` 的特殊规则就体现在它强制 read/load/use 和 assign/store/write 必须连续、按顺序执行**。\n\n------\n\n**面试官：** 什么是指令重排序？它为什么会带来问题？\n\n**我：**\n\n2. **指令重排序**：\n\n\\- **原因**：为了充分发挥 CPU 性能，编译器和处理器常常会在**不改变程序单线程执行结果**的前提下，对指令的执行顺序进行重新排序优化。\n\\- **问题**：在**多线程**环境下，这种重排序可能会破坏程序的语义，导致线程执行结果出现不可预测的错误。（例如，双重检查锁单例模式中，由于 `new` 操作的非原子性可能被重排序，导致其他线程拿到一个未初始化完全的对象引用）。\n\n------\n\n**面试官：** JMM 如何解决可见性和有序性问题？什么是 Happens-Before 原则？\n\n**我：**\n\n3. **Happens-Before 原则**：\n\n\\- 这是 JMM 最核心的概念。它本质上是一种**可见性保证规则**，用于描述两个操作之间的内存可见性。如果操作 A **Happens-Before** 于操作 B，那么 A 操作所产生的所有内存更改（结果）对 B 操作都是**可见的**。\n\\- 它是一些规则的集合，无需任何同步手段就天然具有 Happens-Before 关系：\n\n1. **程序次序规则**：在一个线程内，书写在前面的操作 Happens-Before 于后面的操作。（注意：这仅指执行结果上的顺序，依然可能被重排序，但重排序后的结果必须与按代码顺序执行的结果一致）。\n2. **监视器锁规则**：对一个锁的 **unlock** 操作 Happens-Before 于后续对这个锁的 **lock** 操作。\n3. **volatile变量规则**：对一个 `volatile` 变量的**写**操作 Happens-Before 于后续对这个变量的**读**操作。\n4. **线程启动规则**：`Thread` 对象的 `start()` 方法调用 Happens-Before 于此线程的任何动作。\n5. **线程终止规则**：线程中的所有操作都 Happens-Before 于其他线程检测到该线程已经终止（如 `thread.join()` 返回）。\n6. **传递性**：如果 A Happens-Before B，且 B Happens-Before C，那么 A Happens-Before C。\n\n```\n**总结**：Happens-Before 关系并不代表实际执行的时间顺序，而是**内存可见性的保证**。它是判断数据是否存在竞争、线程是否安全的主要依据。\n```\n\n### **6. AQS 原理浅析**\n\n**面试官：** 讲一下 AQS 的核心原理。\n\n**我：**\n好的。AQS (`AbstractQueuedSynchronizer`) 是 JUC 并发包的核心基础组件，像 `ReentrantLock`、`CountDownLatch` 等工具都是基于它实现的。它的核心思想是 **“一个状态位（state）+ 一个FIFO线程等待队列（CLH）”**。\n\n------\n\n**面试官：** 具体说说 state 和 CLH 队列的作用。\n\n**我：**\n\n1. **AQS核心思想（state、CLH队列）**：\n   - **状态 (state)**：这是一个由 `volatile` 修饰的 `int` 成员变量，表示**共享资源的状态**。具体含义由子类定义，例如：\n     - 在 `ReentrantLock` 中，`state=0` 表示锁未被占用，`state>0` 表示锁被占用，且数值表示**重入次数**。\n     - 在 `Semaphore` 中，`state` 表示**剩余的许可证数量**。\n   - **CLH队列**：这是一个虚拟的**双向 FIFO 队列**，用于管理获取资源失败的线程。当线程争抢资源失败时，AQS 会将当前线程及其等待状态等信息构造成一个节点（Node）并加入队尾，然后阻塞该线程（`LockSupport.park()`）。队列头节点表示当前正持有资源的线程。\n\n------\n\n**面试官：** AQS 是如何基于这个核心思想来实现公平锁的？\n\n**我：**\n\n2. **如何实现公平锁**：\n\n\\- **公平锁** 的核心原则是：**先来后到**，即等待时间最长的线程（队列头节点的后继节点）优先获取资源。\n\\- **实现机制**：当一个线程（Thread-A）尝试通过 `lock()` 方法获取锁时，它的核心逻辑是：\n\n1. 检查 `state` 是否为 0（锁是否空闲）。\n2. 在判断锁空闲后，公平锁的实现会**先调用 `hasQueuedPredecessors()` 方法检查等待队列中是否有其他线程在排队**。\n\n\\- 如果队列为空，或者当前线程自己就是队列的头节点（即将被唤醒的下一个），那么它才有资格去用 CAS 竞争锁。\n\\- **如果发现队列中有其他线程在等待，那么当前线程会放弃竞争，直接将自己加入队列末尾进行等待**，这就保证了“先来后到”的公平性。\n\\- **与非公平锁的区别**：非公平锁（`ReentrantLock` 的默认方式）在尝试获取锁时，不管队列里有没有线程在等，都会直接去用 CAS 抢锁。抢失败了才入队。这提高了吞吐量但可能导致“插队”现象，造成线程饥饿。\n\n## **四、Java 虚拟机 (JVM)**\n\n#### **1. JVM 内存区域与分配**\n\n**面试官：** 说一下 JVM 的内存区域是如何划分的。\n\n**我：**\n好的。JVM 内存区域主要分为线程共享区和线程私有区。\n\n------\n\n**面试官：** 线程共享区包含哪些？各自的作用是什么？\n\n**我：**\n\n1. **线程共享区**：\n   - **堆 (Heap)**：\n     - **作用**：这是**最大**的一块内存区域，用于存放**对象实例**和**数组**。GC（垃圾回收）主要发生在这里。\n     - **细分**：从垃圾回收角度，可分为新生代 (Young Generation) 和老年代 (Old Generation)。新生代又分为 Eden 区和两个 Survivor区 (S0/S1)。\n   - **方法区 (Method Area)**：\n     - **作用**：用于存储已被虚拟机加载的**类信息、常量、静态变量、即时编译器编译后的代码**等数据。\n     - **实现**：在 JDK8 之前，它的实现是“永久代”(PermGen)。在 JDK8 及之后，改为了**元空间 (Metaspace)**，并使用本地内存 (Native Memory) 来实现，大大降低了OOM的风险。\n\n------\n\n**面试官：** 那线程私有区呢？\n\n**我：**\n\n2. **线程私有区**：\n\n\\- **虚拟机栈 (VM Stack)**：\n\\- **作用**：描述的是 Java **方法执行的内存模型**。每个方法在执行时都会创建一个**栈帧**，用于存储**局部变量表、操作数栈、动态链接、方法出口**等信息。我们常说的“栈内存”就是指这里。\n\\- **异常**：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出 `StackOverflowError`；如果栈可以动态扩展但无法申请到足够内存，则抛出 `OutOfMemoryError`。\n\\- **本地方法栈 (Native Method Stack)**：\n\\- **作用**：与虚拟机栈非常相似，区别在于它为虚拟机使用的 **Native 方法**服务。\n\\- **程序计数器 (Program Counter Register)**：\n\\- **作用**：一块较小的内存空间，可以看作是**当前线程所执行的字节码的行号指示器**。它是唯一一个在 JVM 规范中没有规定任何 `OutOfMemoryError` 情况的区域。\n\n------\n\n**面试官：** 你刚才还提到了直接内存，它属于 JVM 内存区域吗？\n\n**我：**\n\n3. **直接内存 (Direct Memory)**：\n\n\\- **不属于** JVM 运行时数据区，也不是 JVM 规范中定义的内存区域。\n\\- **作用**：它是由 `NIO` 的 `DirectByteBuffer` 引用的内存区域，通常**直接在物理内存上分配**，避免了在 Java 堆和 Native 堆之间来回复制数据，从而能显著提高性能。\n\\- **影响**：虽然不受 JVM 内存管理，但其大小也会受到本机总内存的限制。如果各个内存区域的总和大于物理内存限制，动态扩展时可能导致 `OutOfMemoryError`。\n\n### **2. 垃圾回收算法与收集器**\n\n**面试官：** 讲一下 JVM 如何确定一个对象是垃圾？以及有哪些垃圾回收算法。\n\n**我：**\n好的。垃圾回收主要分两步：首先确定对象是否存活（是垃圾），然后进行回收。\n\n------\n\n**面试官：** 先说下如何确定垃圾。\n\n**我：**\n\n1. **确定垃圾的算法**：\n   - **引用计数法**：\n     - **原理**：给对象中添加一个**引用计数器**，每当有一个地方引用它，计数器就加1；当引用失效时，计数器就减1。任何时刻计数器为0的对象就是不可能再被使用的。\n     - **缺点**：它**无法解决对象之间循环引用**的问题（即A引用B，B也引用A，但再无第三方引用它们俩），从而导致内存泄漏。因此，**主流的 Java 虚拟机都没有选用引用计数法**。\n   - **可达性分析算法**：\n     - **原理**：这是 JVM 采用的算法。通过一系列称为 **“GC Roots”** 的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”。如果某个对象到 GC Roots 间**没有任何引用链相连**（即从 GC Roots 到这个对象不可达），则证明此对象是不可能再被使用的。\n     - **哪些对象可以作为 GC Roots**：\n       1. 虚拟机栈（栈帧中的局部变量表）中引用的对象。\n       2. 本地方法栈中 JNI（即 Native 方法）引用的对象。\n       3. 方法区中类静态属性引用的对象。\n       4. 方法区中常量引用的对象。\n       5. Java 虚拟机内部的引用（如基本类型对应的 Class 对象，常驻的异常对象等）。\n       6. 被同步锁（synchronized）持有的对象。\n\n------\n\n**面试官：** 确定了垃圾之后，有哪些回收算法？\n\n**我：**\n\n2. **回收垃圾的算法**：\n\n\\- **标记-清除算法**：\n\\- **过程**：分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象。\n\\- **缺点**：**效率不高**，且会产生大量**不连续的内存碎片**，导致以后需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次 GC。\n\n```\n- **复制算法**：\n    - **过程**：将可用内存按容量分为大小相等的两块，每次只使用其中一块。当这一块的内存用完了，就将还存活着的对象**复制**到另外一块上面，然后再把已使用过的内存空间一次清理掉。\n    - **优点**：实现简单，运行高效，且没有内存碎片。\n    - **缺点**：**内存代价太高**，可用内存缩小为了原来的一半。\n    - **应用**：是**新生代**垃圾回收的主要算法。商业虚拟机都采用这种算法来回收新生代，但并不是按1:1的比例划分，而是将内存分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 和其中一块 Survivor。\n\n- **标记-整理算法**：\n    - **过程**：标记过程与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间的一端移动，然后直接清理掉边界以外的内存。\n    - **优点**：避免了内存碎片，也避免了复制算法的空间浪费。\n    - **缺点**：移动存活对象并更新所有引用地址是一项负重操作，需要暂停用户线程（Stop The World）。\n    - **应用**：主要用于**老年代**的垃圾回收。\n\n- **分代收集算法**：\n    - **本质**：这不是一种具体的算法，而是一种**理论**。当前商业虚拟机的垃圾收集器都采用它。\n    - **思想**：根据对象存活周期的不同，将 Java 堆划分为**新生代**和**老年代**，然后根据各个年代的特点采用最适当的收集算法。\n        - 在**新生代**中，每次垃圾收集时都有大批对象死去，只有少量存活，那就选用**复制算法**，只需要付出少量存活对象的复制成本就可以完成收集。\n        - 在**老年代**中，因为对象存活率高、没有额外空间对它进行分配担保，就必须使用**标记-清除**或**标记-整理**算法来进行回收。\n```\n\n### **3. 性能调优、OOM与内存泄漏**\n\n**面试官：** 谈谈JVM调优的目标和常用参数。\n\n**我：**\n好的。JVM调优的核心目标是在**吞吐量**、**延迟**和**内存占用**三者间找到最佳平衡。\n\n1. **JVM调优目标**：\n   - **低延迟**：减少 **GC停顿时间**（Stop-The-World），提高应用响应速度，适合Web等交互式应用。\n   - **高吞吐量**：减少GC总耗时，增大**应用运行时间**占比，适合后台计算型任务。\n   - **减少内存占用**：在满足需求的前提下，控制堆内存大小。\n2. **常用参数**：\n   - **-Xms 和 -Xmx**：设置堆的初始大小(`-Xms`)和最大大小(`-Xmx`)，通常设为相同值以避免扩容带来的性能抖动。\n   - **-Xmn**：设置新生代大小。整个JVM堆大小 = 新生代 + 老年代。\n   - **-XX:SurvivorRatio**：设置Eden区与一个Survivor区的比例（默认为8，即Eden:S0:S1=8:1:1）。\n   - **-XX:+UseG1GC**：指定使用G1垃圾收集器。\n   - **-XX:+PrintGC / -XX:+PrintGCDetails**：打印GC日志，用于排查。\n   - **-XX:MetaspaceSize 和 -XX:MaxMetaspaceSize**：设置元空间初始大小和最大大小。\n\n------\n\n**面试官：** 什么是逃逸分析？栈上分配又是什么？\n\n**我：**\n\n- **逃逸分析**：是JIT编译器的一种高级优化技术。它通过分析对象的**作用域**，判断一个对象是否会被外部方法或外部线程所引用。\n  - **方法逃逸**：对象被作为参数传递给其他方法。\n  - **线程逃逸**：对象被赋值给其他线程可访问的实例变量。\n- **栈上分配**：\n  - 如果逃逸分析证明一个对象**不会逃逸出方法**，那么这个对象就可以在**栈上分配内存**，而不是在堆上。\n  - **好处**：对象随方法栈帧出栈而自动销毁，**无需垃圾回收器介入**，极大减轻了GC压力，提升了性能。\n\n------\n\n**面试官：** 常见的OutOfMemoryError有哪些？如何排查？\n\n**我：**\n\n3. **OutOfMemoryError避免与排查**：\n\nOOM错误有多种类型，每种原因不同：\n\\- **Java heap space**：**堆内存溢出**。最常见，原因是对象太多或存在内存泄漏，堆空间不足。\n\\- **排查**：使用`-XX:+HeapDumpOnOutOfMemoryError`参数在OOM时自动生成堆转储文件，然后用**MAT、JProfiler**等工具分析，找到是哪些对象占用了大量内存以及它们的GC Roots引用链。\n\\- **Metaspace / PermGen space**：**元空间（方法区）溢出**。原因是加载的类过多，如大量动态代理、反射。\n\\- **GC overhead limit exceeded**：GC overhead limit exceeded：GC回收效率过低导致的溢出。默认如果超过98%的时间都在做GC并且回收不到2%的堆空间，就会抛出此错误。本质是堆内存太小或内存泄漏。\n\\- **Unable to create new native thread**：**无法创建本地线程**。原因是创建的线程数超过系统限制（如Linux的`ulimit`）或内存不足。\n\n------\n\n**面试官：** 什么是内存泄漏？举几个常见例子。\n\n**我：**\n\n4. **内存泄漏概念与常见案例**：\n\n\\- **概念**：指程序中已**动态分配的堆内存**由于某种原因**未能被释放**或**无法被释放**，造成系统内存的浪费，最终可能导致OOM。\n\\- **它与内存溢出的关系**：**内存泄漏是原因，内存溢出是结果**。持续的泄漏最终会导致溢出。\n\n```\n**常见案例**：\n- **缓存泄漏**：使用了无大小限制的缓存（如`HashMap`作为缓存），对象只放入不取出。应使用`WeakHashMap`或类似Guava Cache的、具有LRU淘汰机制的缓存。\n- **监听器未移除**：向全局集合（如一个静态List）注册了监听器，但在对象不用后没有取消注册，导致集合一直持有对象的引用，无法被回收。\n- **数据库连接、文件流未关闭**：这些资源不仅占用内存，还占用系统句柄。\n- **内部类持有外部类引用**：非静态内部类会隐式持有外部类的引用。如果这个内部类的实例被一个长生命周期对象引用，就会导致外部类也无法被回收。\n```\n\n\n\n## **五、Java 多线程 (Java Multithreading)**\n\n#### **1. 线程池核心原理与参数配置**\n\n**面试官：** 说一下线程池的7个核心参数。\n\n**我：**\n好的。通过 `ThreadPoolExecutor` 的构造函数，可以看到7个核心参数：\n\n1. **`corePoolSize`**：**核心线程数**。线程池维护的最小线程数量，即使它们处于空闲状态，也不会被回收（除非设置了 `allowCoreThreadTimeOut`）。\n2. **`maximumPoolSize`**：**最大线程数**。线程池允许创建的最大线程数量。\n3. **`keepAliveTime`**：**空闲线程存活时间**。当线程数超过 `corePoolSize` 时，多余的空闲线程在终止前等待新任务的最长时间。\n4. **`unit`**：`keepAliveTime` 参数的**时间单位**。\n5. **`workQueue`**：**任务队列**。用于保存等待执行的任务的阻塞队列（如 `ArrayBlockingQueue`, `LinkedBlockingQueue`）。\n6. **`threadFactory`**：**线程工厂**。用于创建新线程，可以设置线程名、优先级等，便于排查问题。\n7. **`handler`**：**拒绝策略**。当线程池和队列都已满时，用于处理新提交任务的策略（如抛出异常、直接丢弃等）。\n\n------\n\n**面试官：** 描述一下任务提交到线程池后的执行流程。\n\n**我：**\n\n2. **任务提交流程**：\n\n当一个新任务被提交 (`execute()`) 时，流程如下：\n\n1. 首先，判断当前运行的线程数是否小于 `corePoolSize`。如果是，则**创建新的核心线程**来执行该任务（即使有其他空闲线程）。\n2. 如果当前线程数已达到 `corePoolSize`，则尝试将任务**放入工作队列** (`workQueue`) 等待。\n3. 如果队列**已满**，则判断当前线程数是否小于 `maximumPoolSize`。如果是，则**创建新的非核心线程**来执行该任务。\n4. 如果线程数也已达到 `maximumPoolSize`，并且队列已满，则触发**拒绝策略** (`handler`)。\n\n```\n**简单记法**：**先核心 -> 再入队 -> 后扩容 -> 最后拒绝**。\n```\n\n------\n\n**面试官：** 在实际项目中，如何设置核心线程数？\n\n**我：**\n\n3. **核心参数计算**：\n\n这是一个经验值，需要根据任务类型是 **CPU密集型** 还是 **IO密集型** 来调整。\n\n```\n- **CPU密集型**：\n    - **特点**：任务主要消耗CPU资源，需要进行大量计算（例如，计算圆周率、视频编码）。\n    - **设置**：线程数不宜过多，通常设置为 **`CPU核心数 + 1`**。设置过多会导致大量的线程上下文切换，反而降低性能。\n\n- **IO密集型**：\n    - **特点**：任务大部分时间在等待IO操作（如数据库查询、网络请求、文件读写），CPU空闲。\n    - **设置**：线程数可以设置得多一些，以充分利用CPU资源。通常可以设置为 **`2 * CPU核心数`**，或者更高。更精确的估算公式是：**`线程数 = CPU核心数 * (1 + 平均等待时间 / 平均计算时间)`**。\n\n**注意**：这只是一个理论上的起始值，**实际生产中需要通过压测来找到最适合自己应用的参数**。\n```\n\n\n\n## **六、数据库 (Database)**\n\n### **1. MySQL**\n\n**1.1 事务与 ACID 属性**\n\n**面试官：** 你先说说 MySQL 的事务和它的 ACID 属性吧。\n\n**我：**\n\n好的。事务是数据库操作的基本单元，它是一个不可分割的工作序列，要么全部执行成功，要么全部执行失败，能保证数据的一致性和完整性。\n\n事务的 ACID 属性是其核心特性，具体指：\n\n- **原子性（Atomicity）**：事务中的所有操作要么全部完成，要么全部不完成，不会存在部分执行的情况。比如转账时，“从 A 账户扣钱” 和 “给 B 账户加钱” 这两个操作要么都成功，要么都失败，不会出现 A 扣了钱但 B 没收到的情况。\n\n- **一致性（Consistency）**：事务执行前后，数据库的完整性约束不会被破坏。例如，假设表中有 “总金额 = A 账户金额 + B 账户金额” 的约束，转账事务执行后，这个等式依然成立。\n\n- **隔离性（Isolation）**：多个事务并发执行时，一个事务的执行不应被其他事务干扰，每个事务都像在独立执行一样。避免因并发操作导致的数据不一致问题。\n\n- **持久性（Durability）**：一旦事务提交成功，它对数据库中数据的修改就是永久性的，即使之后发生数据库崩溃等故障，修改的数据也不会丢失。\n\n**1.2 事务隔离级别与 MVCC 机制**\n\n**面试官：** 那事务的隔离级别有哪些？MySQL 的默认隔离级别是什么？MVCC 机制你了解吗？\n\n**我：**\n\n事务隔离级别是为了应对并发事务可能出现的问题（如脏读、不可重复读、幻读）而设定的，主要有 4 种：\n\n- **读未提交（Read Uncommitted）**：最低的隔离级别。一个事务可以读取到另一个未提交事务修改的数据，可能导致脏读（读取到未提交的无效数据）。\n\n- **读已提交（Read Committed）**：一个事务只能读取到另一个已提交事务修改的数据，解决了脏读问题，但可能出现不可重复读（同一事务中多次读取同一数据，结果因其他事务提交的修改而不同）。\n\n- **可重复读（Repeatable Read）**：MySQL 的默认隔离级别。保证同一事务中多次读取同一数据时，结果一致，解决了不可重复读问题，但在默认情况下可能出现幻读（同一事务中，按同一条件多次查询，结果集行数因其他事务的插入 / 删除而变化）。\n\n- **串行化（Serializable）**：最高的隔离级别。事务串行执行，完全避免了并发问题，但性能极低，通常只在数据一致性要求极高且并发量低的场景使用。\n\nMVCC（Multi-Version Concurrency Control，多版本并发控制）是 MySQL 实现读已提交和可重复读隔离级别的核心机制，它通过为数据保存多个版本，让读写操作不相互阻塞，提升并发性能。其实现原理主要涉及**版本链**和**ReadView**：\n\n- **版本链**：每行数据在被修改时，会生成一个新的版本，旧版本不会被立即删除，而是保留下来并通过隐藏列（如DB_TRX_ID记录修改事务 ID、DB_ROLL_PTR指向旧版本数据）形成链表，即版本链。\n\n- **ReadView**：事务在进行快照读（普通 SELECT 操作）时，会生成一个 ReadView，它包含当前活跃事务的 ID 列表等信息。通过比较数据版本的DB_TRX_ID与 ReadView 中的信息，来判断该版本数据是否可见：若数据版本的事务 ID 不在活跃列表中且小于 ReadView 中的最大事务 ID 等（不同隔离级别下判断逻辑有差异），则数据可见。\n\n读已提交隔离级别下，每次执行 SELECT 都会生成一个新的 ReadView，所以能看到其他事务已提交的修改；可重复读隔离级别下，仅在第一次 SELECT 时生成 ReadView，之后复用该 ReadView，因此能保证同一事务中多次读取结果一致。\n\n**面试官：** 那可重复读级别下是怎么解决幻读的呢？\n\n**我：**\n\nMySQL 的可重复读级别通过 “MVCC 快照读 + Next-Key Lock 当前读” 的组合来解决幻读问题：\n\n- **MVCC 快照读**：对于普通的 SELECT 查询（快照读），由于复用第一次生成的 ReadView，即使其他事务插入了新数据，新数据的事务 ID 在当前 ReadView 中可能被判定为不可见，因此不会读取到新插入的数据，避免了快照读场景下的幻读。\n\n- **Next-Key Lock 当前读**：对于加锁的查询（如SELECT ... FOR UPDATE、UPDATE、DELETE等当前读操作），MySQL 会使用 Next-Key Lock。它是行锁和间隙锁的组合，不仅会锁定符合条件的行，还会锁定这些行所在间隙（即不存在的、可能被插入数据的区间），防止其他事务在间隙中插入新数据，从而避免了当前读场景下的幻读。\n\n**1.3 锁机制：间隙锁与临键锁**\n\n**面试官：** 聊完隔离级别，再说说 MySQL 的锁机制吧，特别是间隙锁和临键锁。\n\n**我：**\n\nMySQL 的锁机制按粒度可分为表锁、行锁等，行锁是并发控制的关键，而间隙锁和临键锁是行锁的扩展：\n\n- **间隙锁（Gap Lock）**：锁定的是一个区间，而不是具体的行。当事务对某条记录加锁时，若该记录所在索引区间存在未使用的间隙，会对这些间隙加锁。例如，表中有 id 为 1、3、5 的记录，对 id=3 的记录加锁时，可能会锁定 (1,3)、(3,5) 这样的间隙，防止其他事务在这些间隙中插入 id=2、4 的记录，主要用于解决幻读。\n\n- **临键锁（Next-Key Lock）**：是行锁和间隙锁的结合，锁定的是 “记录 + 间隙”。它会锁定当前记录以及该记录前面的间隙。比如上述 id=3 的例子，临键锁会锁定 (1,3] 这个区间（包含 3 这条记录和 1 到 3 之间的间隙）。在可重复读隔离级别下，MySQL 默认使用临键锁进行当前读操作，当查询条件是唯一索引且精确匹配时，临键锁会降级为行锁。\n\n**1.4 索引与优化：回表查询与覆盖索引**\n\n**面试官：** 索引相关的，回表查询和覆盖索引你清楚吗？\n\n**我：**\n\n这两个概念和索引的结构密切相关，MySQL 中最常用的索引是 B + 树索引：\n\n- **回表查询**：B + 树索引分为聚簇索引和非聚簇索引（二级索引）。聚簇索引的叶子节点存储的是完整的行数据，而非聚簇索引的叶子节点存储的是行数据的主键值。当使用非聚簇索引查询数据时，若查询的字段不在非聚簇索引中，需要先通过非聚簇索引找到主键值，再到聚簇索引中根据主键值查找完整的行数据，这个过程就叫回表查询。回表会增加 IO 操作，影响查询效率。\n\n- **覆盖索引**：若查询的所有字段都包含在非聚簇索引中（即非聚簇索引的叶子节点已包含查询所需的全部数据），则不需要回表，直接通过非聚簇索引就能获取到数据，这种索引就是覆盖索引。例如，表有索引idx_name(name)，执行SELECT name, age FROM table WHERE name='xxx'，若age也在idx_name索引中（如联合索引idx_name_age(name, age)），则该索引就是覆盖索引，能避免回表，提升查询效率。\n\n**1.5 性能分析：EXPLAIN 与索引失效**\n\n**面试官：** 那怎么分析 SQL 性能？索引为什么会失效呢？\n\n**我：**\n\n分析 MySQL SQL 性能最常用的工具是EXPLAIN命令，在 SQL 语句前加上EXPLAIN，执行后会得到查询计划，通过查看各列（如type、key、rows、extra等）的信息，能判断索引是否被使用、查询效率如何：\n\n- type：表示访问类型，从好到差有system、const、eq_ref、ref、range、index、ALL等，range及以上通常表示使用了索引，ALL是全表扫描，效率低。\n\n- key：显示实际使用的索引，若为NULL则未使用索引。\n\n- rows：预估需要扫描的行数，行数越少越好。\n\n- extra：包含额外信息，如Using index表示使用了覆盖索引，Using filesort表示需要额外排序（效率低），Using temporary表示使用了临时表（效率低）等。\n\n索引失效的原因有很多，常见的有：\n\n- 索引列上使用了函数或表达式，如WHERE SUBSTR(name, 1, 1)='a'，会导致索引无法被使用。\n\n- 索引列进行了隐式类型转换，如索引列是varchar类型，查询时用WHERE id=123（123 是数字），MySQL 会进行类型转换，导致索引失效。\n\n- 使用NOT IN、!=、<>等否定操作符，可能导致索引失效（视情况而定，部分场景下可能使用索引）。\n\n- LIKE查询以%开头，如WHERE name LIKE '%abc'，无法使用索引的前缀匹配，导致索引失效。\n\n- 联合索引未遵循 “最左前缀原则”，即查询条件不包含联合索引的第一个列，如联合索引(a,b,c)，查询WHERE b=1 AND c=2，会导致索引失效。\n\n- 表中数据量极少，MySQL 认为全表扫描比使用索引更高效，会放弃使用索引。\n\n**1.6 日志系统：三大日志解析（undo log、redo log、binlog）**\n\n**面试官：** 最后说说 MySQL 的三大日志吧，undo log、redo log、binlog。\n\n**我：**\n\nMySQL 的三大日志在数据一致性、事务恢复、主从复制等方面起着关键作用：\n\n- **undo log（回滚日志）**：\n\n- **作用**：用于事务回滚和 MVCC。当事务修改数据时，会先将数据的旧版本记录到 undo log 中。若事务需要回滚（如执行ROLLBACK），可以通过 undo log 恢复数据到修改前的状态；同时，undo log 也是 MVCC 中版本链的重要组成部分，供快照读时获取旧版本数据。\n\n- **特点**：是逻辑日志，记录的是 “做了什么操作可以恢复数据”，且会随着事务的提交或回滚被清理。\n\n- **redo log（重做日志）**：\n\n- **作用**：保证事务的持久性。事务执行过程中，对数据的修改会先写入内存的缓冲池，同时将修改操作记录到 redo log（先写 redo log buffer，再刷到磁盘）。若数据库发生崩溃，重启后可以通过 redo log 重新执行已提交的事务操作，恢复数据，避免因内存数据丢失导致的数据不一致。\n\n- **特点**：是物理日志，记录的是 “某个数据页做了什么修改”，采用循环写的方式，有固定大小。\n\n- **binlog（二进制日志）**：\n\n- **作用**：用于主从复制和数据备份恢复。它记录了所有对数据库的修改操作（如INSERT、UPDATE、DELETE等），不记录查询操作。主库将 binlog 发送给从库，从库通过执行 binlog 中的操作实现主从数据同步；同时，若数据库发生故障，可通过 binlog 结合备份恢复到指定时间点的数据。\n\n- **特点**：是逻辑日志，记录的是操作的逻辑（如 “插入一条 id=1 的记录”），采用追加写的方式，不会覆盖旧日志，可通过expire_logs_days等参数设置自动清理策略。\n\n三者的配合：事务执行时，先写 undo log，再修改缓冲池数据，同时写 redo log（prepare 阶段），事务提交时，写 binlog，最后将 redo log 标记为提交（commit 阶段），确保数据的一致性和持久性。\n\n### **2. Redis**\n\n**2.1 核心数据类型与应用场景（String, Hash, List, Set, ZSet 等）**\n\n**面试官：** 说说 Redis 的核心数据类型有哪些，各自的应用场景是什么？\n\n**我：**\n\nRedis 的核心数据类型是其基础，常见的有 String、Hash、List、Set、ZSet 这五种，每种都有独特的结构和适用场景：\n\n- **String（字符串）**：\n\n- **结构**：最基础的数据类型，底层可存储字符串、整数或浮点数，最大能存储 512MB。\n\n- **应用场景**：缓存简单数据（如用户信息 JSON 串）、计数器（用INCR/DECR实现点赞数、访问量统计）、分布式锁（通过SETNX命令）、Session 共享等。\n\n- **Hash（哈希）**：\n\n- **结构**：键值对的集合，类似 Java 中的 HashMap，适合存储对象类数据，每个 Hash 可包含最多 2^32-1 个字段。\n\n- **应用场景**：存储用户信息（如user:100为 key，name“age” 等为字段）、商品属性存储等，能只修改对象的某个字段，节省内存和带宽。\n\n- **List（列表）**：\n\n- **结构**：有序的字符串列表，底层是双向链表，支持从两端插入 / 删除元素，按索引访问。\n\n- **应用场景**：消息队列（用LPUSH生产消息、RPOP消费消息）、最新消息展示（如朋友圈点赞列表）、排行榜前 N 条数据等。\n\n- **Set（集合）**：\n\n- **结构**：无序且不重复的字符串集合，支持交集、并集、差集等运算。\n\n- **应用场景**：好友关系（如共同好友用交集SINTER）、标签存储（如用户兴趣标签）、去重操作（如 UV 统计）等。\n\n- **ZSet（有序集合）**：\n\n- **结构**：在 Set 基础上给每个元素关联一个分数（score），按分数排序，元素唯一但分数可重复。\n\n- **应用场景**：排行榜（如游戏积分排名用ZREVRANGE）、带权重的消息队列、范围查询（如查询分数在 80-100 的用户）等。\n\n**2.2 缓存问题：穿透、击穿、雪崩及解决方案**\n\n**面试官：** Redis 作为缓存时，常见的缓存穿透、击穿、雪崩问题怎么解决？\n\n**我：**\n\n这三类问题都是缓存使用中可能遇到的并发或数据一致性问题，具体及解决方案如下：\n\n- **缓存穿透**：\n\n- **问题**：查询不存在的数据（如用户查 id=-1 的用户），缓存和数据库都无结果，请求直接打向数据库，大量此类请求会压垮数据库。\n\n- **解决方案**：① 空值缓存，对不存在的 key 缓存空值（设较短过期时间，避免占用内存）；② 布隆过滤器，在缓存前加布隆过滤器，先判断 key 是否存在，不存在直接返回，过滤无效请求；③ 接口层校验，对非法参数（如 id 为负）直接拦截。\n\n- **缓存击穿**：\n\n- **问题**：一个热点 key 突然过期，此时大量并发请求同时访问该 key，缓存未命中，都去查数据库，导致数据库瞬间压力骤增。\n\n- **解决方案**：① 热点 key 永不过期，在业务层不设置过期时间，手动更新；② 互斥锁，缓存未命中时，用分布式锁（如 Redis 的SETNX）保证只有一个线程去查数据库，其他线程等待重试；③ 预热缓存，在高峰前主动加载热点数据到缓存并设合理过期时间。\n\n- **缓存雪崩**：\n\n- **问题**：大量缓存 key 在同一时间过期，或 Redis 集群宕机，导致大量请求穿透到数据库，数据库因压力过大崩溃。\n\n- **解决方案**：① 过期时间随机化，给 key 的过期时间加随机值（如 10±2 秒），避免同时过期；② 多级缓存，用本地缓存（如 Caffeine）+ Redis 缓存，减少 Redis 压力；③ Redis 集群高可用，部署主从 + 哨兵或 Redis Cluster，避免单点故障；④ 限流降级，在数据库前加限流组件（如 Sentinel），超过阈值则降级返回默认数据。\n\n**2.3 数据一致性问题与解决方案（Cache-Aside 策略、延迟双删、监听 binlog）**\n\n**面试官：** Redis 和数据库如何保证数据一致性？有哪些常用方案？\n\n**我：**\n\n缓存与数据库的数据一致性指两者数据保持同步，常用方案需根据业务场景选择：\n\n- **Cache-Aside 策略（旁路缓存）**：\n\n- **流程**：读操作时，先查缓存，命中直接返回；未命中查数据库，再把数据写入缓存。写操作时，先更数据库，再删除缓存（而非更新缓存，避免多次写缓存浪费资源）。\n\n- **适用场景**：大多数普通业务场景，简单易实现，但可能因删除缓存失败导致不一致（可配合重试机制）。\n\n- **延迟双删**：\n\n- **流程**：写操作时，① 先删除缓存；② 再更新数据库；③ 过一段时间（如 500ms）再次删除缓存。\n\n- **作用**：解决 “更新数据库时，其他线程可能已从旧数据库读数据写入缓存” 的问题，第二次删除可清除可能的旧缓存。\n\n- **适用场景**：并发较高，对一致性要求稍高的场景，需合理设置延迟时间（根据业务耗时调整）。\n\n- **监听 binlog 同步**：\n\n- **流程**：借助数据库的 binlog（如 MySQL 的 binlog），通过中间件（如 Canal）监听 binlog 变化，解析后异步更新或删除 Redis 缓存。\n\n- **优势**：解耦业务代码，可靠性高，适合复杂的更新场景。\n\n- **注意**：异步更新有延迟，需接受短暂的不一致，且需保证中间件的高可用。\n\n**2.4 高性能原理：I/O 多路复用模型（Reactor 模式、epoll）**\n\n**面试官：** Redis 为什么性能高？I/O 多路复用模型是怎么回事？\n\n**我：**\n\nRedis 高性能的原因包括基于内存、单线程（避免线程切换开销）等，其中 I/O 多路复用模型是关键：\n\n- **I/O 多路复用**：允许单个线程同时监听多个文件描述符（Socket），当某个描述符就绪（如可读、可写）时，通知应用程序处理。Redis 用它解决了单线程下处理多客户端连接的问题，避免了阻塞等待。\n\n- **Reactor 模式**：Redis 的 I/O 模型基于 Reactor 模式实现，核心是 “事件驱动”：① 主线程负责监听 Socket，将就绪的事件（如连接、读写）放入事件队列；② 工作线程（Redis 单线程下主线程即工作线程）从队列取事件并处理（如解析命令、执行操作）。\n\n- **epoll**：Redis 在 Linux 下采用 epoll 作为 I/O 多路复用的实现（不同系统有差异，如 FreeBSD 用 kqueue），相比 select/poll 更高效：① select/poll 需轮询所有描述符，epoll 通过回调通知就绪描述符，无轮询开销；② select 支持的描述符数量有限（默认 1024），epoll 无此限制；③ epoll 能精准获取就绪描述符，减少无效操作。\n\n正是 I/O 多路复用让 Redis 单线程也能高效处理数万并发连接。\n\n**2.5 实战应用：登录机制与防抖节流实现**\n\n**面试官：** Redis 在实战中有哪些典型应用？比如登录和防抖节流怎么用它实现？\n\n**我：**\n\nRedis 在业务中有很多实用场景，登录机制和防抖节流是常见案例：\n\n- **登录机制实现**：\n\n- **流程**：用户登录成功后，生成唯一 token（如 UUID），以token:xxx为 key，用户信息为 value 存入 Redis（设过期时间，如 2 小时）；客户端后续请求携带 token，服务端查 Redis 验证 token 是否有效，有效则允许访问。\n\n- **扩展**：可结合 Redis 的EXPIRE续期（如用户操作时刷新过期时间），或用DEL实现登出；还能通过SETNX防止同一账号多设备登录（登录时先删旧 token，再存新 token）。\n\n- **防抖节流实现**：\n\n- **防抖（避免重复触发）**：如按钮点击，用 Redis 记录触发时间，规定 “n 秒内再次触发则重置时间”。例：用SET key timestamp NX PX n*1000，若 key 不存在则设置（触发操作），存在则不处理。\n\n- **节流（控制触发频率）**：如接口限流，规定 “n 秒内最多触发 m 次”。例：用INCR key计数，EXPIRE key n设过期时间，若计数≤m 则允许，否则拒绝。\n\n**2.6 高可用与持久化：主从同步与 AOF/RDB**\n\n**面试官：** Redis 如何保证高可用？持久化机制 AOF 和 RDB 有什么区别？\n\n**我：**\n\n高可用涉及主从、持久化等，确保 Redis 不丢失数据且持续可用：\n\n- **主从同步**：\n\n- **作用**：实现数据备份和读写分离。主库负责写操作，从库通过复制主库数据实现备份，同时可分担读请求。\n\n- **流程**：① 从库连接主库，发送SYNC命令；② 主库生成 RDB 文件并发送给从库，从库加载 RDB 同步全量数据；③ 之后主库将写命令异步发送给从库，从库执行命令保持增量同步。\n\n- **高可用**：配合哨兵（Sentinel），哨兵监控主从节点，主库故障时自动将从库切换为主库，实现故障转移。\n\n- **持久化机制**：\n\n- **RDB**：在指定时间间隔生成数据集的快照（如save 60 1000表示 60 秒内 1000 次修改则触发），将数据写入二进制文件（dump.rdb）。\n\n- **优势**：文件小，恢复速度快；适合全量备份。\n\n- **劣势**：快照间隔内数据可能丢失（如宕机）；生成快照时可能阻塞主线程（用bgsave可异步，但有资源开销）。\n\n- **AOF**：记录所有写命令（如SET、HSET），追加到日志文件（appendonly.aof），恢复时重新执行命令。\n\n- **优势**：数据安全性高（可设appendfsync always实时写入）；日志可读懂，便于排查问题。\n\n- **劣势**：文件大，恢复慢；写命令追加可能影响性能。\n\n- **实际选择**：通常混合使用 AOF+RDB，RDB 用于快速恢复，AOF 弥补 RDB 的数据丢失风险。\n\n**2.7 生产优化：大 Key 与热 Key 处理**\n\n**面试官：** 生产环境中，Redis 的大 Key 和热 Key 怎么处理？\n\n**我：**\n\n大 Key 和热 Key 会影响 Redis 性能（如大 Key 导致阻塞，热 Key 导致节点过载），需针对性优化：\n\n- **大 Key 处理**：\n\n- **识别**：用redis-cli --bigkeys命令扫描大 Key（如 String>100MB，Hash/List 元素过多）。\n\n- **拆分**：① String 大 Key 拆分为多个小 Key（如user:info拆为user:info:name、user:info:age）；② Hash/List 大 Key 按范围拆分（如 Hash 按字段首字母拆分，List 按索引分段）。\n\n- **删除**：大 Key 直接DEL会阻塞线程，用UNLINK（异步删除）或逐步删除（如 List 用LPOP分批删）。\n\n- **热 Key 处理**：\n\n- **识别**：通过监控工具（如 Redis Insight）统计访问频率高的 Key，或根据业务判断（如秒杀商品 ID）。\n\n- **分散存储**：① 给热 Key 加前缀 / 后缀（如key:1、key:2），分散到不同 Redis 节点；② 用本地缓存（如应用内存）分担部分请求，减少 Redis 访问。\n\n- **优化缓存**：热 Key 设永不过期，或用主从复制（从库分担读请求），避免单节点压力过大。\n\n## **七、开发框架 (Development Framework)**\n\n### **SpringBoot**\n\n **1. 核心思想：IoC (控制反转) 与 DI (依赖注入)**\n\n**面试官：** 请说说 SpringBoot 的核心思想 IoC 和 DI 分别是什么，它们之间有什么关系？\n\n**我：**\n\nIoC（Inversion of Control，控制反转）是 Spring 框架的核心思想，它颠覆了传统程序中对象创建和依赖管理的方式：传统方式中，对象由开发者主动通过new关键字创建，依赖关系也由开发者手动维护；而在 IoC 思想下，对象的创建权、生命周期管理以及依赖关系的组装都交给了 Spring 容器，开发者只需定义对象的需求，由容器 “反向” 将所需对象注入，实现了 “控制权从开发者到容器的转移”。\n\nDI（Dependency Injection，依赖注入）是 IoC 的具体实现方式。当一个对象需要依赖另一个对象时，Spring 容器会主动将被依赖的对象 “注入” 到依赖对象中，无需开发者手动设置。比如在 Service 层中需要 Dao 层对象，只需用@Autowired注解标记，Spring 就会自动将 Dao 实例注入到 Service 中。\n\n简单来说，IoC 是设计思想，DI 是实现该思想的手段，二者相辅相成，共同降低了组件间的耦合度，让代码更易维护和扩展。\n\n**2. 进阶特性：循环依赖解决机制（三级缓存）**\n\n**面试官：** SpringBoot 是如何解决 Bean 之间的循环依赖问题的？三级缓存在这里起到了什么作用？\n\n**我：**\n\n循环依赖指的是两个或多个 Bean 之间互相依赖，比如 A 依赖 B，B 又依赖 A。Spring 通过三级缓存机制来解决单例 Bean 的循环依赖问题，核心是提前暴露未初始化完成的 Bean 实例。\n\n三级缓存具体指 Spring 容器中的三个 Map 结构：\n\n- **一级缓存（singletonObjects）**：存储已完全初始化完成的单例 Bean，是最终供外部使用的 Bean 实例。\n\n- **二级缓存（earlySingletonObjects）**：存储提前暴露的、已完成实例化但未完成属性注入和初始化的 Bean 实例（半成品 Bean）。\n\n- **三级缓存（singletonFactories）**：存储 Bean 的工厂对象（ObjectFactory），该工厂可以生成 Bean 的早期代理对象或原始实例。\n\n解决循环依赖的流程以 A 和 B 循环依赖为例：\n\n1. 容器创建 A 时，先实例化 A（完成构造方法调用），然后将 A 的工厂对象放入三级缓存。\n\n1. A 需要注入 B，容器开始创建 B，同样先实例化 B，将 B 的工厂对象放入三级缓存。\n\n1. B 需要注入 A，容器先查一级缓存（无 A），再查二级缓存（无 A），最后查三级缓存，通过 A 的工厂对象获取 A 的早期实例，将 A 从三级缓存移到二级缓存，然后将 A 注入到 B 中。\n\n1. B 完成属性注入和初始化，成为完整 Bean，放入一级缓存，之后将 B 注入到 A 中。\n\n1. A 完成属性注入和初始化，放入一级缓存，循环依赖解决。\n\n三级缓存的关键作用是应对 Bean 被 AOP 代理的场景：若 Bean 需要生成代理对象，工厂对象会提前生成代理实例并暴露，避免注入原始实例导致的代理失效问题，二级缓存则用于快速获取提前暴露的实例，减少工厂对象的重复执行。不过三级缓存仅能解决单例 Bean 的循环依赖，原型 Bean（prototype）的循环依赖无法解决，会直接抛出异常。\n\n**3. 面向切面编程：AOP 实现原理（JDK 动态代理 vs CGLIB）**\n\n**面试官：** SpringBoot 的 AOP 是如何实现的？JDK 动态代理和 CGLIB 代理有什么区别，Spring 会如何选择？\n\n**我：**\n\nAOP（Aspect-Oriented Programming，面向切面编程）通过将日志、事务、权限控制等通用功能抽取为 “切面”，在不修改业务代码的情况下，通过 “织入” 机制将切面与业务逻辑结合，实现代码复用。Spring AOP 的底层通过动态代理技术实现，主要有 JDK 动态代理和 CGLIB 代理两种方式。\n\n二者的区别主要体现在实现方式和适用场景上：\n\n- **JDK 动态代理**：\n\n- 基于 Java 反射机制实现，要求被代理的类必须实现接口，代理对象是接口的实现类。\n\n- 原理是通过Proxy类生成代理实例，代理实例在调用方法时，会回调InvocationHandler中的invoke方法，在该方法中执行切面逻辑和目标方法。\n\n- 优势：JDK 原生支持，无需依赖第三方库，效率较高（在代理逻辑简单时）。\n\n- 局限：只能代理实现了接口的类，无法代理无接口的类。\n\n- **CGLIB 代理**：\n\n- 基于字节码生成技术实现，通过继承被代理类生成子类作为代理对象，无需被代理类实现接口。\n\n- 原理是通过 ASM 框架修改字节码，在子类中重写父类的方法，在重写方法中嵌入切面逻辑和目标方法调用。\n\n- 优势：可代理无接口的类，适用范围更广。\n\n- 局限：若被代理类被final修饰（无法继承），则无法生成代理对象；由于是继承实现，父类的final方法无法被重写，也就无法被增强。\n\nSpring 对代理方式的选择逻辑：\n\n- 若被代理的类实现了接口，默认使用 JDK 动态代理。\n\n- 若被代理的类未实现接口，默认使用 CGLIB 代理。\n\n- 可通过配置spring.aop.proxy-target-class=true强制使用 CGLIB 代理（SpringBoot 2.x 后该配置默认值为 true）。\n\n**4. 事务管理：@Transactional 注解失效场景分析**\n\n**面试官：** 在 SpringBoot 中使用@Transactional注解时，哪些情况会导致事务失效？\n\n**我：**\n\n@Transactional注解通过 AOP 实现事务管理，但在一些场景下会因不符合 AOP 代理机制或注解生效条件而失效，常见场景有：\n\n1. **非公共方法上使用注解**：@Transactional默认只对公共（public）方法生效，若在 private、protected 或 default 修饰的方法上使用，Spring 不会生成事务代理，注解失效。\n\n1. **自身方法调用（内部调用）**：在同一个类中，一个无事务的方法调用另一个有@Transactional注解的方法，由于内部调用不会经过代理对象，事务切面无法生效。例如：\n\n\n\nTypeScript取消自动换行复制\n\npublic class Service {\n\n​    public void methodA() {\n\n​        methodB(); *// 内部调用，method**B**的事务失效*\n\n​    }\n\n​    @Transactional\n\n​    public void methodB() {\n\n​        *// 业务逻辑*\n\n​    }\n\n}\n\n\n\n1. **异常被捕获未抛出**：事务默认在遇到未捕获的 RuntimeException 或 Error 时回滚，若方法内部捕获了异常且未重新抛出，事务管理器无法感知异常，会认为事务执行成功，导致不回滚。\n\n1. **错误的异常类型**：若注解指定了rollbackFor属性（如@Transactional(rollbackFor = IOException.class)），但实际抛出的异常不是该类型且未被rollbackFor包含，事务不会回滚；若未指定rollbackFor，checked 异常（如 IOException）默认不会触发回滚。\n\n1. **Bean 未被 Spring 管理**：若类未通过@Service、@Component等注解交给 Spring 容器管理，@Transactional注解无法被解析，自然失效。\n\n1. **事务传播机制设置不当**：若传播机制设置为PROPAGATION_NOT_SUPPORTED（不支持事务）、PROPAGATION_NEVER（禁止事务）等，会导致当前方法不使用事务；或PROPAGATION_REQUIRES_NEW等在特定场景下因事务嵌套逻辑导致预期外的结果。\n\n**5. 设计模式应用（工厂、单例、代理、模板方法等）**\n\n**面试官：** SpringBoot 中应用了哪些常见的设计模式？能举例说明吗？\n\n**我：**\n\nSpringBoot 基于 Spring 框架，内部大量应用了设计模式，以下是几种典型模式的应用：\n\n- **工厂模式**：Spring 的 Bean 创建过程主要依赖工厂模式。BeanFactory是 Bean 工厂的核心接口，负责创建和管理 Bean；DefaultListableBeanFactory等实现类通过读取配置（如注解、XML），根据 Bean 的定义信息生成 Bean 实例，开发者无需关心 Bean 的创建细节，只需通过工厂获取。\n\n- **单例模式**：Spring 容器中的 Bean 默认是单例的（scope 为 singleton），通过一级缓存（singletonObjects）保证一个 Bean 在容器中只有一个实例。容器启动时创建 Bean 并缓存，后续多次获取的都是同一个实例，减少了对象创建的开销。\n\n- **代理模式**：如 AOP 的实现中，JDK 动态代理和 CGLIB 代理都是代理模式的应用。代理对象在目标对象的方法前后嵌入切面逻辑（如事务、日志），既扩展了功能，又不修改目标对象的代码，符合 “开闭原则”。\n\n- **模板方法模式**：在数据访问层（如 JdbcTemplate、RedisTemplate）中大量使用。模板类定义了操作的整体流程（如数据库连接、执行 SQL、关闭连接），将可变的步骤（如 SQL 语句、结果集处理）抽象为抽象方法或通过回调接口让用户实现，避免了重复代码，同时保证流程的一致性。\n\n- **观察者模式**：Spring 的事件驱动模型基于观察者模式。ApplicationEvent是事件源，ApplicationListener是观察者，当事件发布（如ContextRefreshedEvent表示容器刷新完成）时，所有监听该事件的 Listener 会被触发执行，常用于业务解耦（如订单创建后发送通知）。\n\n这些设计模式的应用让 SpringBoot 的架构更灵活、可扩展，也是其能快速集成各类组件的重要原因。","tags":["Java","为了实习说是"],"categories":["Java","为了实习说是"]},{"title":"2025Lilctf(Reverse)","url":"/2025/08/15/2025Lilctf(Revese)/","content":"\n# 2025Lilctf(Reverse)\n\n## 1.**ARM ASM**\n\n发现是apk，放到jadx看一下，发现：\n\n![image-20250815220846564](2025Lilctf(Revese)/image-20250815220846564.png)\n\n然后ida打开看到：\n\n![image-20250815220944516](2025Lilctf(Revese)/image-20250815220944516.png)\n\n找到这三个关键函数以及：\n\n![image-20250815221012488](2025Lilctf(Revese)/image-20250815221012488.png)\n\n推测是变表和移位的base64，扔给ai分析一下，生成脚本：\n\n```py\nimport base64\n\n# 自定义Base64表\ncustom_b64_table = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ3456780129+/\"\nstandard_b64_table = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n\n# 目标密文\ntarget_b64 = \"KRD2c1XRSJL9e0fqCIbiyJrHW1bu0ZnTYJvYw1DM2RzPK1XIQJnN2ZfRMY4So09S\"\n\n# 转换到标准Base64\ndef to_standard_b64(s):\n    return s.translate(str.maketrans(custom_b64_table, standard_b64_table))\n\n# 解码Base64\nstd_b64_str = to_standard_b64(target_b64)\ndecoded = base64.b64decode(std_b64_str)\ndata = list(decoded)  # 解码后的48字节数据\n\n# 移位逆操作（每3字节一组）\ndef reverse_shift(data):\n    result = []\n    for i in range(0, len(data), 3):\n        # 第1字节：循环右移3位（加密时循环左移3位）\n        b0 = data[i]\n        b0 = ((b0 >> 3) | (b0 << 5)) & 0xFF\n        \n        # 第2字节：循环左移1位（加密时循环右移1位）\n        b1 = data[i+1]\n        b1 = ((b1 << 1) | (b1 >> 7)) & 0xFF\n        \n        # 第3字节不变\n        b2 = data[i+2]\n        result.extend([b0, b1, b2])\n    return result\n\n# 置换表t\nt0 = [0x0D, 0x0E, 0x0F, 0x0C, 0x0B, 0x0A, 0x09, 0x08, \n      0x06, 0x07, 0x05, 0x04, 0x02, 0x03, 0x01, 0x00]\n\n# 构造逆置换表\ninv_t = [0] * 16\nfor i in range(16):\n    inv_t[t0[i]] = i\n\n# 三轮变换逆操作（正确密钥）\ndef reverse_blocks(blocks):\n    # 块0：使用密钥 t0\n    block0 = [blocks[0][i] ^ t0[i] for i in range(16)]\n    block0 = [block0[inv_t[i]] for i in range(16)]\n    \n    # 块1：使用密钥 t0\n    block1 = [blocks[1][i] ^ t0[i] for i in range(16)]\n    block1 = [block1[inv_t[i]] for i in range(16)]\n    \n    # 块2：使用密钥 t0⊕1（关键修正！）\n    key2 = [b ^ 0x01 for b in t0]\n    block2 = [blocks[2][i] ^ key2[i] for i in range(16)]\n    block2 = [block2[inv_t[i]] for i in range(16)]\n    \n    return block0 + block1 + block2\n\n# 步骤1: 移位逆操作\ndata = reverse_shift(data)\n\n# 分块（16字节/块）\nblocks = [\n    data[0:16],   # 块0: 0-15字节\n    data[16:32],  # 块1: 16-31字节\n    data[32:48]   # 块2: 32-47字节\n]\n\n# 步骤2: 三轮逆操作（使用正确密钥）\noriginal_data = reverse_blocks(blocks)\n\n# 转换为字符串\nflag = ''.join(chr(b) for b in original_data)\n\nprint(\"完整的Flag:\", flag)\nprint(\"Flag长度:\", len(flag))\n```\n\n完整的Flag: LILCTF{ez_arm_asm_meow_meow_meowm_oe_wemwom_oe}w\nFlag长度: 48\n\n提交不上，猜了一下，最后试了试这个\n\nLILCTF{ez_arm_asm_meow_meow_meow_meow_meow_meow}\n\n提交成功\n\n","tags":["CTF","Reverse"],"categories":["CTF","Reverse"]},{"title":"2025Lilctf(Crypto)","url":"/2025/08/15/2025Lilctf(Crypto)/","content":"\n# 2025Lilctf(Crypto)\n\n## 1.**ez_math**\n\n原题：\n\n```python\nfrom sage.all import *\nfrom Crypto.Util.number import *\n\nflag = b'LILCTF{test_flag}'[7:-1]\nlambda1 = bytes_to_long(flag[:len(flag)//2])\nlambda2 = bytes_to_long(flag[len(flag)//2:])\np = getPrime(512)\ndef mul(vector, c):\n    return [vector[0]*c, vector[1]*c]\n\nv1 = [getPrime(128), getPrime(128)]\nv2 = [getPrime(128), getPrime(128)]\n\nA = matrix(GF(p), [v1, v2])\nB = matrix(GF(p), [mul(v1,lambda1), mul(v2,lambda2)])\nC = A.inverse() * B\n\nprint(f'p = {p}')\nprint(f'C = {str(C).replace(\" \", \",\").replace(\"\\n\", \",\").replace(\"[,\", \"[\")}')\n\n# p = 9620154777088870694266521670168986508003314866222315790126552504304846236696183733266828489404860276326158191906907396234236947215466295418632056113826161\n# C = [7062910478232783138765983170626687981202937184255408287607971780139482616525215270216675887321965798418829038273232695370210503086491228434856538620699645,7096268905956462643320137667780334763649635657732499491108171622164208662688609295607684620630301031789132814209784948222802930089030287484015336757787801],[7341430053606172329602911405905754386729224669425325419124733847060694853483825396200841609125574923525535532184467150746385826443392039086079562905059808,2557244298856087555500538499542298526800377681966907502518580724165363620170968463050152602083665991230143669519866828587671059318627542153367879596260872]\n\n\n```\n\n根据矩阵求flag，跟moe那个有点像\n\n![image-20250815131251617](2025Lilctf(Crypto)/image-20250815131251617.png)\n\n\n\n```python\nfrom sage.all import *\nfrom Crypto.Util.number import long_to_bytes\n\n# 已知的p和C矩阵元素\np = 9620154777088870694266521670168986508003314866222315790126552504304846236696183733266828489404860276326158191906907396234236947215466295418632056113826161\nc11 = 7062910478232783138765983170626687981202937184255408287607971780139482616525215270216675887321965798418829038273232695370210503086491228434856538620699645\nc12 = 7096268905956462643320137667780334763649635657732499491108171622164208662688609295607684620630301031789132814209784948222802930089030287484015336757787801\nc21 = 7341430053606172329602911405905754386729224669425325419124733847060694853483825396200841609125574923525535532184467150746385826443392039086079562905059808\nc22 = 2557244298856087555500538499542298526800377681966907502518580724165363620170968463050152602083665991230143669519866828587671059318627542153367879596260872\n\n# 在GF(p)域上进行计算\nF = GF(p)\nc11 = F(c11)\nc12 = F(c12)\nc21 = F(c21)\nc22 = F(c22)\n\n# 计算特征方程的系数\nsum_c = c11 + c22\nproduct_c = c11 * c22 - c12 * c21\n\n# 计算判别式和平方根\nD = sum_c^2 - 4 * product_c\nsqrt_D = D.sqrt()\n\n# 计算2的逆元\ninv2 = F(2)^-1\n\n# 求解特征值（λ₁和λ₂）\nlambda1 = int((sum_c + sqrt_D) * inv2)\nlambda2 = int((sum_c - sqrt_D) * inv2)\n\n# 转换为字节\npart1 = long_to_bytes(lambda1)\npart2 = long_to_bytes(lambda2)\n\n# 生成可能的flag（两种组合，因为λ₁和λ₂可能顺序互换）\nflag1 = b'LILCTF{' + part1 + part2 + b'}'\nflag2 = b'LILCTF{' + part2 + part1 + b'}'\n\nprint(\"可能的flag1:\", flag1)\nprint(\"可能的flag2:\", flag2)\n\n```\n\n可能的flag1: b'LILCTF{It_w4s_the_be5t_of_times_1t_wa5_the_w0rst_of_t1me5}'\n可能的flag2: b'LILCTF{1t_wa5_the_w0rst_of_t1me5It_w4s_the_be5t_of_times_}'\n\n## 2.linear\n\n原题：\n\n```python\nimport os\nimport random\nimport signal\n\nsignal.alarm(10)\n\nflag = os.getenv(\"LILCTF_FLAG\", \"LILCTF{default}\")\n\nnrows = 16\nncols = 32\n\nA = [[random.randint(1, 1919810) for _ in range(ncols)] for _ in range(nrows)]\nx = [random.randint(1, 114514) for _ in range(ncols)]\n\nb = [sum(A[i][j] * x[j] for j in range(ncols)) for i in range(nrows)]\nprint(A)\nprint(b)\n\nxx = list(map(int, input(\"Enter your solution: \").strip().split()))\nif xx != x:\n    print(\"Oh, your linear algebra needs to be practiced.\")\nelse:\n    print(\"Bravo! Here is your flag:\")\n    print(flag)\n\n```\n\n比较简单的一个线性代数题，但是一般求出来的结果好像不准确，那么我们可以使用格基来求解，问题是要求是10s限制比较麻烦，因为我不会在sagemath连端口，所以就用vscode连接端口，使用sagemath出x，这样的话再复制到交互端口就好了\n\nsagemath：\n\n```py\n# 读取文本数据\nwith open(\"E:/edge下载/CTF/2025LilCTF/Crypto/problem_data.txt\", \"r\", encoding=\"utf-8\") as file:\n    data = file.read()\n\n# 假设数据的格式是类似于JSON或Python列表的结构\n# 你可以手动解析文件内容，假设数据格式是这样的：\n# A = [[...], [...], ...] 和 b = [...], 你可以使用eval()或json.loads()来解析\nimport ast\n\n# 假设 data 中有 A 和 b 的定义\nA = ast.literal_eval(data.split(\"A = \")[1].split(\"b = \")[0].strip())  # 提取并解析A\nb = ast.literal_eval(data.split(\"b = \")[1].strip())  # 提取并解析b\n\n# 之后使用这些数据进行计算\nn = 32  # 变量数\nm = 16  # 方程数\nW = 2**40  # 权重\n\n# 构造格基矩阵\nM = matrix(ZZ, n+1, n+m)\nfor i in range(n):\n    M[i, i] = 1\n    for j in range(m):\n        M[i, n+j] = A[j][i] * W  # 注意：A是16行32列，所以A[j][i]是第j行第i列\n\nfor j in range(m):\n    M[n, n+j] = b[j] * W\n\n# LLL约简（使用更快参数）\nM_lll = M.LLL(delta=0.99, eta=0.51)\n\n# 寻找解\nsolution = None\nfor i in range(n+1):\n    # 检查后m个分量是否全为0\n    if all(M_lll[i, n+j] == 0 for j in range(m)):\n        x_sol = [abs(int(M_lll[i, j])) for j in range(n)]\n        # 将解限制在[1,114514]范围内\n        x_sol = [max(1, min(x, 114514)) for x in x_sol]\n        solution = x_sol\n        break\n\n# 如果LLL未找到解，使用伪逆作为备选\nif solution is None:\n    print(\"LLL未找到解，使用伪逆法...\")\n    A_np = matrix(RDF, A)\n    b_np = vector(RDF, b)\n    x_float = A_np.pseudoinverse() * b_np\n    solution = [int(round(num)) for num in x_float]\n    solution = [max(1, min(x, 114514)) for x in solution]\n\n# 打印解（复制这个到client.py）\nprint(\"\\n\" + \"=\"*80)\nprint(\"解x (复制这个到client.py):\")\nprint(\" \".join(map(str, solution)))\nprint(\"=\"*80)\n\n# 验证解（可选）\nb_calculated = [sum(A[i][j] * solution[j] for j in range(n)) for i in range(m)]\nif b_calculated == b:\n    print(\"验证成功: Ax = b\")\nelse:\n    print(\"验证失败: Ax ≠ b\")\n    print(f\"原始b: {b}\")\n    print(f\"计算b: {b_calculated}\")\n\n```\n\nvscode\n\n```py\nfrom pwn import *\nimport time\nimport os\n\ndef main():\n    # 连接到服务器\n    io = remote(\"challenge.xinshi.fun\", 46755)\n    \n    # 接收数据直到出现输入提示\n    data = b\"\"\n    start_time = time.time()\n    while b\"Enter your solution:\" not in data:\n        chunk = io.recv(1024)\n        if not chunk:\n            break\n        data += chunk\n        \n        # 超时检查\n        if time.time() - start_time > 15:\n            print(\"Timeout waiting for data!\")\n            io.close()\n            return\n    \n    # 提取并保存矩阵A和向量b\n    A_start = data.find(b\"[[\")\n    A_end = data.find(b\"]]\") + 2\n    b_start = data.find(b\"[\", A_end)\n    b_end = data.find(b\"]\", b_start) + 1\n    \n    A_str = data[A_start:A_end].decode()\n    b_str = data[b_start:b_end].decode()\n    \n    # 保存到文件\n    with open(\"problem_data.txt\", \"w\") as f:\n        f.write(f\"A = {A_str}\\n\")\n        f.write(f\"b = {b_str}\\n\")\n    \n    print(\"问题数据已保存到 problem_data.txt\")\n    print(\"请立即运行SageMath脚本计算解...\")\n    \n    # 等待用户粘贴解\n    print(\"\\n计算完成后，将解x粘贴在这里（空格分隔的32个整数）\")\n    print(\"注意：您有10秒时间完成计算！\")\n    xx = input(\">>> \").strip()\n    \n    # 提交解\n    io.sendline(xx.encode())\n    \n    # 获取结果\n    try:\n        result = io.recvall(timeout=5).decode()\n        print(\"\\nServer response:\")\n        print(result)\n    except:\n        print(\"\\nTimeout waiting for server response\")\n    \n    io.close()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n![image-20250815171516880](2025Lilctf(Crypto)/image-20250815171516880.png)\n\nflag：     LILCTF{60b2bfea-b0f7-4aed-9c94-b2301afd828f}\n\n\n\n## 3.**mid_math**\n\n原题：\n\n```py\nfrom sage.all import *\nfrom Crypto.Util.number import *\nfrom tqdm import tqdm\nfrom random import randint\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad\n\nflag = b'LILCTF{test_flag}'\n\np = getPrime(64)\nP = GF(p)\n\nkey = randint(2**62, p)\n\ndef mul(vector, c):\n    return [vector[0]*c, vector[1]*c, vector[2]*c, vector[3]*c, vector[4]*c]\n\nv1 = [getPrime(64), getPrime(64), getPrime(64), getPrime(64), getPrime(64)]\nv2 = [getPrime(64), getPrime(64), getPrime(64), getPrime(64), getPrime(64)]\nv3 = [getPrime(64), getPrime(64), getPrime(64), getPrime(64), getPrime(64)]\nv4 = [getPrime(64), getPrime(64), getPrime(64), getPrime(64), getPrime(64)]\nv5 = [getPrime(64), getPrime(64), getPrime(64), getPrime(64), getPrime(64)]\na, b, c, d, e = getPrime(64), getPrime(64), getPrime(64), getPrime(64),  0\n\nA = matrix(P, [v1, v2, v3, v4, v5])\nB = matrix(P, [mul(v1,a), mul(v2,b), mul(v3, c), mul(v4, d), mul(v5, e)])\nC = A.inverse() * B\nD = C**key\n\nkey = pad(long_to_bytes(key), 16)\naes = AES.new(key,AES.MODE_ECB)\nmsg = aes.encrypt(pad(flag, 64))\n\nprint(f\"p = {p}\")\nprint(f'C = {[i for i in C]}'.replace('(', '[').replace(')', ']'))\nprint(f'D = {[i for i in D]}'.replace('(', '[').replace(')', ']'))\nprint(f\"msg = {msg}\")\n\n#p = 14668080038311483271\n#C = [[11315841881544731102, 2283439871732792326, 6800685968958241983, 6426158106328779372, 9681186993951502212], [4729583429936371197, 9934441408437898498, 12454838789798706101, 1137624354220162514, 8961427323294527914], [12212265161975165517, 8264257544674837561, 10531819068765930248, 4088354401871232602, 14653951889442072670], [6045978019175462652, 11202714988272207073, 13562937263226951112, 6648446245634067896, 13902820281072641413], [1046075193917103481, 3617988773170202613, 3590111338369894405, 2646640112163975771, 5966864698750134707]]\n#D = [[1785348659555163021, 3612773974290420260, 8587341808081935796, 4393730037042586815, 10490463205723658044], [10457678631610076741, 1645527195687648140, 13013316081830726847, 12925223531522879912, 5478687620744215372], [9878636900393157276, 13274969755872629366, 3231582918568068174, 7045188483430589163, 5126509884591016427], [4914941908205759200, 7480989013464904670, 5860406622199128154, 8016615177615097542, 13266674393818320551], [3005316032591310201, 6624508725257625760, 7972954954270186094, 5331046349070112118, 6127026494304272395]]\n#msg = b\"\\xcc]B:\\xe8\\xbc\\x91\\xe2\\x93\\xaa\\x88\\x17\\xc4\\xe5\\x97\\x87@\\x0fd\\xb5p\\x81\\x1e\\x98,Z\\xe1n`\\xaf\\xe0%:\\xb7\\x8aD\\x03\\xd2Wu5\\xcd\\xc4#m'\\xa7\\xa4\\x80\\x0b\\xf7\\xda8\\x1b\\x82k#\\xc1gP\\xbd/\\xb5j\"\n\n\n\n\n```\n\n\n\n由于 `D = C ** key`，我们可以利用矩阵的特征值（eigenvalues）来恢复 `key`：\n\n1. **计算 `C` 和 `D` 的特征值**：\n   - `C` 的特征值 `eigC` 包含 `0` 和 4 个非零值。\n   - `D` 的特征值 `eigD` 包含 `0` 和 `eigC` 的非零值的 `key` 次幂。\n2. **过滤掉 `0`，得到非零特征值**：\n   - `L1 = [x for x in eigC if x != 0]`\n   - `L2 = [x for x in eigD if x != 0]`\n3. **通过离散对数恢复 `key`**：\n   - 对 `L1` 和 `L2` 中的每一对 `(x, y)`，解 `y = x ** key mod p`。\n   - 由于 `key` 的范围是 `[2^62, p]`，解出的 `k` 必须满足这个范围。\n4. **验证 `key`**：\n   - 检查是否 `{x ** key for x in L1} == set(L2)`。\n5. **解密 `msg`**：\n   - 将 `key` 转为字节，填充到16字节，用AES-ECB解密 `msg`\n\nai拷打两下就梭出来了\n\n```py\nfrom sage.all import *\nfrom Crypto.Util.number import *\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad, unpad  # Import pad and unpad\n\n# Given data\np = 14668080038311483271\nC_list = [\n    [11315841881544731102, 2283439871732792326, 6800685968958241983, 6426158106328779372, 9681186993951502212],\n    [4729583429936371197, 9934441408437898498, 12454838789798706101, 1137624354220162514, 8961427323294527914],\n    [12212265161975165517, 8264257544674837561, 10531819068765930248, 4088354401871232602, 14653951889442072670],\n    [6045978019175462652, 11202714988272207073, 13562937263226951112, 6648446245634067896, 13902820281072641413],\n    [1046075193917103481, 3617988773170202613, 3590111338369894405, 2646640112163975771, 5966864698750134707]\n]\nD_list = [\n    [1785348659555163021, 3612773974290420260, 8587341808081935796, 4393730037042586815, 10490463205723658044],\n    [10457678631610076741, 1645527195687648140, 13013316081830726847, 12925223531522879912, 5478687620744215372],\n    [9878636900393157276, 13274969755872629366, 3231582918568068174, 7045188483430589163, 5126509884591016427],\n    [4914941908205759200, 7480989013464904670, 5860406622199128154, 8016615177615097542, 13266674393818320551],\n    [3005316032591310201, 6624508725257625760, 7972954954270186094, 5331046349070112118, 6127026494304272395]\n]\nmsg = b\"\\xcc]B:\\xe8\\xbc\\x91\\xe2\\x93\\xaa\\x88\\x17\\xc4\\xe5\\x97\\x87@\\x0fd\\xb5p\\x81\\x1e\\x98,Z\\xe1n`\\xaf\\xe0%:\\xb7\\x8aD\\x03\\xd2Wu5\\xcd\\xc4#m'\\xa7\\xa4\\x80\\x0b\\xf7\\xda8\\x1b\\x82k#\\xc1gP\\xbd/\\xb5j\"\n\n# Set up finite field and matrices\nF = GF(p)\nC = matrix(F, C_list)\nD = matrix(F, D_list)\n\n# Compute eigenvalues\neigC = C.eigenvalues()\neigD = D.eigenvalues()\n\n# Remove zero eigenvalues (one for each matrix)\nL1 = [x for x in eigC if x != F(0)]\nL2 = [x for x in eigD if x != F(0)]\n\nif len(L1) != 4 or len(L2) != 4:\n    print(\"Error: Expected 4 non-zero eigenvalues for both matrices.\")\n    exit(1)\n\n# Find key by matching eigenvalues via discrete logarithm\nkey_candidate = None\nfor i in range(4):\n    x0 = L1[i]\n    for j in range(4):\n        y0 = L2[j]\n        try:\n            k0 = discrete_log(y0, x0)  # Solve y0 = x0^k0 mod p\n            candidates = []\n            # Check if k0 is in the valid range\n            if 2**62 <= k0 <= p:\n                candidates.append(k0)\n            # If k0 is too small, try k0 + order of x0\n            if k0 < 2**62:\n                ord_val = x0.multiplicative_order()\n                k1 = k0 + ord_val\n                if 2**62 <= k1 <= p:\n                    candidates.append(k1)\n            # Verify candidate keys\n            for k_cand in candidates:\n                S = set(x**k_cand for x in L1)\n                if S == set(L2):\n                    key_candidate = k_cand\n                    print(f\"Found key: {key_candidate}\")\n                    break\n            if key_candidate is not None:\n                break\n        except Exception as e:\n            continue\n    if key_candidate is not None:\n        break\n\nif key_candidate is None:\n    print(\"Failed to find key.\")\n    exit(1)\n\n# Decrypt the message using the recovered key\nkey_bytes = long_to_bytes(key_candidate)\n# Pad the key to 16 bytes for AES\nkey_padded = pad(key_bytes, 16)  # Now pad is imported\naes = AES.new(key_padded, AES.MODE_ECB)\nflag_padded = aes.decrypt(msg)\nflag = unpad(flag_padded, 64)  # Original padding was 64 bytes\n\nprint(f\"Flag: {flag.decode()}\")\n```\n\n key: 5273966641785501202\n\nflag：LILCTF{Are_y0u_5till_4wake_que5t1on_m4ker!}\n\n\n\n## 4.**Space Travel**\n\n原题：\n\n```py\nfrom Crypto.Cipher import AES\nfrom hashlib import md5\nfrom params import vecs\nfrom os import urandom\n\nkey = int(\"\".join([vecs[int.from_bytes(urandom(2)) & 0xfff] for _ in range(50)]), 2)\n\nprint(\"🎁 :\", [[nonce := int(urandom(50*2).hex(), 16), (bin(nonce & key).count(\"1\")) % 2] for _ in range(600)])\nprint(\"🚩 :\", AES.new(key=md5(str(key).encode()).digest(), nonce=b\"Tiffany\", mode=AES.MODE_CTR).encrypt(open(\"flag.txt\", \"rb\").read()))\n```\n\n1.题面逻辑（来自 `task.py`）\n\n- 先从 `params.py` 里的 `vecs`（4096 个 16 位二进制串）中，用 12 位随机索引各取 50 次，拼成 50×16 = 800 位的二进制串，作为大整数 `key`。\n- 接着生成 600 组样本：每组里有一个 800 位随机数 `nonce`，以及一个比特 `parity`，它等于 `bin(nonce & key)` 中 1 的个数的奇偶（即 `(nonce · key) mod 2` 的内积）。\n- 最后用 `md5(str(key))` 作为 AES-CTR 的 key，nonce 固定为 `\"Tiffany\"`，加密出密文 `🚩`。\n\n2.观测与困难\n\n- 600 组样本提供了 600 条线性方程（GF(2) 上的内积），但未知量 `key` 有 800 个比特，直接解有 200 维自由度，不唯一。\n- 关键是 `key` 的结构：它是 50 个 16 位小块的串联，每块都来自 `vecs`。而 `vecs` 的 4096 项，其差分集合（取任意一个基准 `v0`，看 `vecs ⊕ v0` 的行空间）维度是 **12**。这意味着 `vecs` 其实是一个 **12 维线性****子空间****的仿射陪集**（coset），大小正好 2^12=4096。\n  - 于是每个 16 位小块都可表示为 `v0 ⊕ (B * α)`，其中 `B` 是 12×16 的基矩阵，`α` 是 12 比特坐标。\n  - 50 个小块 → 一共 50×12 = **600 个**未知比特。\n  - 与 600 条线性方程正好匹配！从而把原本 800 维未知，降成 600 维，得到可解的线性系统。\n\n3.建模方式（对齐 bit 顺序很重要！）\n\n- 把 `vecs` 的 16 位字符串视作 **LSB-first**（与 `(nonce & key)` 的位对齐一致），否则会解出错误的 key。\n- 设第 `t` 个小块的未知 12 比特为 `α_t`。对每条样本方程，有\n- `parity_i = ⊕_t <nonce_chunk_i_t, v0 ⊕ (B * α_t)> ``         = ⊕_t <nonce_chunk_i_t, v0> ⊕ ⊕_t <nonce_chunk_i_t, B * α_t>`\n- 把常量项 `⊕_t <nonce_chunk_i_t, v0>` 移到右边，剩余是关于所有 `α_t` 的 600×600 线性方程组，直接在 GF(2) 解之即可。\n- 方程组秩通常是 599（有 1 维自由度），但这 **不影响**：任意解出的 `(α_t)` 都映射到 `v0 ⊕ B*α_t`，这个集合刚好就是 `vecs` 的那个仿射陪集，不会跑出集合之外。对那 1 维自由度，测试两种可能都很快，直接看哪一个能把密文正确解出可读明文（一般是标准 CTF flag）。\n\n4.解出 key 并还原明文\n\n- 用解出来的 50 个 16 位小块拼成 800 位 key（注意保持 LSB-first 与构造一致）。\n- 取 `md5(str(key))`（Python 的 `str(key)` 即十进制串）当 AES-CTR key，nonce 用 `b\"Tiffany\"`，解密 `🚩`。\n- 能得到清晰的 ASCII flag。\n\n\n\n```py\nimport re, ast, numpy as np, hashlib\nfrom Crypto.Cipher import AES\n\n# ---- 工具：GF(2) 线性代数 ----\ndef gf2_rref(M, rhs=None):\n    M = M.copy().astype(np.uint8)\n    if rhs is not None:\n        rhs = rhs.copy().astype(np.uint8)\n        M = np.concatenate([M, rhs.reshape(-1,1)], axis=1)\n    m, n_aug = M.shape\n    n = n_aug if rhs is None else n_aug - 1\n    row = 0\n    pivots = []\n    for col in range(n):\n        pivot = None\n        for r in range(row, m):\n            if M[r,col]:\n                pivot = r; break\n        if pivot is None:\n            continue\n        if pivot != row:\n            M[[row,pivot]] = M[[pivot,row]]\n        for r in range(m):\n            if r != row and M[r,col]:\n                M[r,:] ^= M[row,:]\n        pivots.append(col)\n        row += 1\n        if row == m: break\n    return M, pivots\n\ndef int_to_bits_lsb(n, width):\n    return np.array([(n>>i) & 1 for i in range(width)], dtype=np.uint8)\n\ndef bits_to_int(bits_lsb):\n    v = 0\n    for i,b in enumerate(bits_lsb):\n        if b: v |= (1<<i)\n    return v\n\n# ---- 读取 vecs（params.py）并转为 LSB-first ----\nwith open('params.py','r',encoding='utf-8',errors='ignore') as f:\n    text = f.read()\nvecs_list = re.findall(r\"'([01]{16})'\", text)\nvecs = np.array([[int(b) for b in s[::-1]] for s in vecs_list], dtype=np.uint8)  # reverse to LSB-first\n\n# 取一个基向量 v0，并构造差分集合的行空间基 B（12×16）\nv0 = vecs[0]\ndiffs = (vecs ^ v0) % 2\n\ndef gf2_basis_rows(M):\n    A = M.copy().astype(np.uint8)\n    m,n = A.shape\n    row=0\n    pivcols=[]\n    for col in range(n):\n        pivot=None\n        for r in range(row,m):\n            if A[r,col]:\n                pivot=r; break\n        if pivot is None: continue\n        if pivot!=row: A[[row,pivot]] = A[[pivot,row]]\n        for r in range(m):\n            if r!=row and A[r,col]:\n                A[r,:] ^= A[row,:]\n        pivcols.append(col); row+=1\n        if row==m: break\n    # 抽取基行\n    basis_rows=[]\n    used=set()\n    for lead in pivcols:\n        for r in range(m):\n            if r in used: continue\n            if A[r,lead]==1 and all(A[r,c]==0 for c in range(lead)):\n                basis_rows.append(A[r].copy()); used.add(r); break\n    return np.array(basis_rows, dtype=np.uint8)\n\nB = gf2_basis_rows(diffs)   # 12 x 16\n\n# ---- 解析样本和密文（output.txt）----\nwith open('output.txt','r',encoding='utf-8',errors='ignore') as f:\n    data = f.read()\n\ngift_text = re.search(r\"🎁\\s*:\\s*(\\[\\[.*?\\]\\])\", data, flags=re.S).group(1)\ncipher_text_literal = re.search(r\"🚩\\s*:\\s*(b?['\\\"][^'\\\"]+['\\\"])|🚩\\s*:\\s*([0-9a-fA-Fx,\\s\\[\\]]+)\", data).group(1) \\\n                      or re.search(r\"🚩\\s*:\\s*(b?['\\\"][^'\\\"]+['\\\"])|🚩\\s*:\\s*([0-9a-fA-Fx,\\s\\[\\]]+)\", data).group(2)\n\ngift = ast.literal_eval(gift_text)\ncipher_literal = ast.literal_eval(cipher_text_literal)\nif isinstance(cipher_literal, bytes):\n    ct = cipher_literal\nelif isinstance(cipher_literal, list):\n    ct = bytes(cipher_literal)\nelif isinstance(cipher_literal, str):\n    ct = bytes.fromhex(cipher_literal)\nelse:\n    raise RuntimeError(\"Unknown ciphertext!\")\n\n# ---- 建立 600×600 线性方程组，未知为 50 个块的 12 比特坐标 ----\nm = len(gift)\nT = 50\nk = B.shape[0]  # 12\nWIDTH = 16*T\n\nA2 = np.zeros((m, T*k), dtype=np.uint8)\nb2 = np.zeros(m, dtype=np.uint8)\n\nfor i,(nonce, par) in enumerate(gift):\n    bits = int_to_bits_lsb(nonce, WIDTH)\n    const = 0\n    for t in range(T):\n        chunk = bits[16*t:16*(t+1)]\n        const ^= (np.dot(chunk, v0) % 2)\n        # 对 α_t（12 维），其系数即 <chunk, B_row>，等价于 (B @ chunk)\n        A2[i, t*k:(t+1)*k] = (B @ chunk) % 2\n    b2[i] = (par ^ const) % 2\n\n# ---- 解方程（可能秩 599，尝试两个候选）----\nrref_A2, pivs = gf2_rref(A2, b2)\nnvar = A2.shape[1]\n\nx_alpha = np.zeros(nvar, dtype=np.uint8)\nrow=0\nfor col in range(nvar):\n    if row < len(pivs) and pivs[row]==col:\n        x_alpha[col] = rref_A2[row,-1]; row+=1\n\nrrefA_only, pivs_only = gf2_rref(A2, None)\nnull = np.zeros(nvar, dtype=np.uint8)\nif len(pivs_only) < nvar:\n    fcol = [c for c in range(nvar) if c not in pivs_only][0]\n    null[fcol]=1\n    row=0\n    for col in range(nvar):\n        if row < len(pivs_only) and pivs_only[row]==col:\n            s=0\n            for kcol in range(col+1, nvar):\n                if rrefA_only[row,kcol] and null[kcol]:\n                    s ^= 1\n            null[col]=s%2\n            row+=1\n\ndef build_key_bits(alpha_concat):\n    blocks=[]\n    for t in range(T):\n        alpha_t = alpha_concat[t*k:(t+1)*k]\n        vec_t = (v0 ^ (alpha_t @ B) % 2) % 2  # LSB-first 16 bits\n        blocks.append(vec_t)\n    return np.concatenate(blocks)\n\ncands = [x_alpha, (x_alpha ^ null) % 2]\nfor cand in cands:\n    key_bits = build_key_bits(cand)\n    key_int = bits_to_int(key_bits)\n    aes_key = hashlib.md5(str(key_int).encode()).digest()\n    cipher = AES.new(key=aes_key, nonce=b\"Tiffany\", mode=AES.MODE_CTR)\n    pt = cipher.decrypt(ct)\n    try:\n        s = pt.decode('utf-8')\n        if \"{\" in s and \"}\" in s:\n            print(\"FLAG:\", s)\n            break\n    except:\n        pass\n\n```\n\nflag： LILCTF{Un1qUe_s0luti0n_1N_sUbSp4C3!}\n\n\n\n## 5.**baaaaaag**\n\n原题：\n\n```py\nfrom Crypto.Util.number import *\nimport random\nfrom Crypto.Cipher import AES\nimport hashlib\nfrom Crypto.Util.Padding import pad\nfrom secret import flag\n\np = random.getrandbits(72)\nassert len(bin(p)[2:]) == 72\n\na = [getPrime(90) for _ in range(72)]\nb = 0\nt = p\nfor i in a:\n    temp = t % 2\n    b += temp * i\n    t = t >> 1\n\nkey = hashlib.sha256(str(p).encode()).digest()\ncipher = AES.new(key, AES.MODE_ECB)\nflag = pad(flag,16)\nciphertext = cipher.encrypt(flag)\n\nprint(f'a = {a}')\nprint(f'b = {b}')\nprint(f\"ciphertext = {ciphertext}\")\n\n'''\na = [965032030645819473226880279, 699680391768891665598556373, 1022177754214744901247677527, 680767714574395595448529297, 1051144590442830830160656147, 1168660688736302219798380151, 796387349856554292443995049, 740579849809188939723024937, 940772121362440582976978071, 787438752754751885229607747, 1057710371763143522769262019, 792170184324681833710987771, 912844392679297386754386581, 906787506373115208506221831, 1073356067972226734803331711, 1230248891920689478236428803, 713426848479513005774497331, 979527247256538239116435051, 979496765566798546828265437, 836939515442243300252499479, 1185281999050646451167583269, 673490198827213717568519179, 776378201435505605316348517, 809920773352200236442451667, 1032450692535471534282750757, 1116346000400545215913754039, 1147788846283552769049123803, 994439464049503065517009393, 825645323767262265006257537, 1076742721724413264636318241, 731782018659142904179016783, 656162889354758353371699131, 1045520414263498704019552571, 1213714972395170583781976983, 949950729999198576080781001, 1150032993579134750099465519, 975992662970919388672800773, 1129148699796142943831843099, 898871798141537568624106939, 997718314505250470787513281, 631543452089232890507925619, 831335899173370929279633943, 1186748765521175593031174791, 884252194903912680865071301, 1016020417916761281986717467, 896205582917201847609656147, 959440423632738884107086307, 993368100536690520995612807, 702602277993849887546504851, 1102807438605649402749034481, 629539427333081638691538089, 887663258680338594196147387, 1001965883259152684661493409, 1043811683483962480162133633, 938713759383186904819771339, 1023699641268310599371568653, 784025822858960757703945309, 986182634512707587971047731, 1064739425741411525721437119, 1209428051066908071290286953, 667510673843333963641751177, 642828919542760339851273551, 1086628537309368288204342599, 1084848944960506663668298859, 667827295200373631038775959, 752634137348312783761723507, 707994297795744761368888949, 747998982630688589828284363, 710184791175333909291593189, 651183930154725716807946709, 724836607223400074343868079, 1118993538091590299721647899]\nb = 34962396275078207988771864327\nciphertext = b'Lo~G\\xf46>\\xd609\\x8e\\x8e\\xf5\\xf83\\xb5\\xf0\\x8f\\x9f6&\\xea\\x02\\xfa\\xb1_L\\x85\\x93\\x93\\xf7,`|\\xc6\\xbe\\x05&\\x85\\x8bC\\xcd\\xe6?TV4q'\n'''\n```\n\n一个背包密码，解出p就能梭出来了。但是问题是怎么解出p：\n\n据我已知的背包密码：b是背包容量，a是将要装进背包的物品。p可以由十进制转化为二进制，其中满足a[i],pi。pi只能为0或1,0代表对应的a[i]没有被装进背包，1代表对应的a[i]被装进背包。b会被a装满。\n\n大概是这个意思，但是列数学表达式得出p的二进制需要线性代数知识。lll算法和bkz规约\n\n这是deepseek给出的详细：\n\n### 如何解出 `p`？\n\n为了解决这个问题，我们使用格基归约算法（如 LLL 或 BKZ）。格基归约可以将子集和问题转化为寻找格中的短向量问题。具体步骤如下：\n\n1. **格基构造**：构造一个 `(n+1) x (n+1)` 的矩阵（`n` 是 `a` 的长度），其中：\n\n   - 前 `n` 行：对角线元素为 2，最后一列为 `a[i]`。\n   - 最后一行：前 `n` 个元素为 1，最后一个元素为 `b`。\n\n   这种构造确保了解向量 `(2*m_0 - 1, 2*m_1 - 1, ..., 2*m_{n-1} - 1, 0)` 在格中，其中 `m_i` 是 `p` 的二进制位。转换 `v_i = 2*m_i - 1` 将二进制位映射到 ±1，使得解向量更短且更易识别。\n\n2. **格基归约**：使用 BKZ 或 LLL 算法对格基进行归约。BKZ 通常更强（能找到更短的向量），但计算成本更高。如果 BKZ 失败，可以回退到 LLL。\n\n3. **搜索解向量**：在归约后的基中搜索满足条件的向量：\n\n   - 前 `n` 个坐标为 ±1。\n   - 最后一个坐标为 0（或接近 0，容错处理）。\n\n   如果找到，则从解向量恢复二进制位：`m_i = (v_i + 1) / 2`。\n\n4. **恢复 `p`**：将二进制位组合成整数 `p`（注意：最低位对应 `m_0`）。\n\n```python\nfrom sage.all import Matrix, ZZ\n\n\n# --------- 已知参数 ----------\na = [965032030645819473226880279, 699680391768891665598556373, 1022177754214744901247677527, 680767714574395595448529297,\n     1051144590442830830160656147, 1168660688736302219798380151, 796387349856554292443995049, 740579849809188939723024937,\n     940772121362440582976978071, 787438752754751885229607747, 1057710371763143522769262019, 792170184324681833710987771,\n     912844392679297386754386581, 906787506373115208506221831, 1073356067972226734803331711, 1230248891920689478236428803,\n     713426848479513005774497331, 979527247256538239116435051, 979496765566798546828265437, 836939515442243300252499479,\n     1185281999050646451167583269, 673490198827213717568519179, 776378201435505605316348517, 809920773352200236442451667,\n     1032450692535471534282750757, 1116346000400545215913754039, 1147788846283552769049123803, 994439464049503065517009393,\n     825645323767262265006257537, 1076742721724413264636318241, 731782018659142904179016783, 656162889354758353371699131,\n     1045520414263498704019552571, 1213714972395170583781976983, 949950729999198576080781001, 1150032993579134750099465519,\n     975992662970919388672800773, 1129148699796142943831843099, 898871798141537568624106939, 997718314505250470787513281,\n     631543452089232890507925619, 831335899173370929279633943, 1186748765521175593031174791, 884252194903912680865071301,\n     1016020417916761281986717467, 896205582917201847609656147, 959440423632738884107086307, 993368100536690520995612807,\n     702602277993849887546504851, 1102807438605649402749034481, 629539427333081638691538089, 887663258680338594196147387,\n     1001965883259152684661493409, 1043811683483962480162133633, 938713759383186904819771339, 1023699641268310599371568653,\n     784025822858960757703945309, 986182634512707587971047731, 1064739425741411525721437119, 1209428051066908071290286953,\n     667510673843333963641751177, 642828919542760339851273551, 1086628537309368288204342599, 1084848944960506663668298859,\n     667827295200373631038775959, 752634137348312783761723507, 707994297795744761368888949, 747998982630688589828284363,\n     710184791175333909291593189, 651183930154725716807946709, 724836607223400074343868079, 1118993538091590299721647899]\n\nb = 34962396275078207988771864327\n\nciphertext = b'Lo~G\\xf46>\\xd609\\x8e\\x8e\\xf5\\xf83\\xb5\\xf0\\x8f\\x9f6&\\xea\\x02\\xfa\\xb1_L\\x85\\x93\\x93\\xf7,`|\\xc6\\xbe\\x05&\\x85\\x8bC\\xcd\\xe6?TV4q'\n\nn = len(a)   # 72\n\n# --------- 构造格基 ----------\nGe = Matrix(ZZ, n+1, n+1)\nfor i in range(n):\n    Ge[i, i] = 2\n    Ge[i, -1] = a[i]\n\nfor i in range(n):\n    Ge[-1, i] = 1\nGe[-1, -1] = b\n\n# --------- BKZ / LLL 归约 ----------\nprint(\"Running BKZ...\")\ntry:\n    B = Ge.BKZ(block_size=28)\nexcept Exception as e:\n    print(\"BKZ 失败，退回 LLL：\", e)\n    B = Ge.LLL()\n\nprint(\"Reduction done. Searching for solution vector...\")\n\nfound = False\ncandidate = None\n\n# 搜索解向量\nfor row_idx in range(B.nrows()):\n    v = [int(B[row_idx, j]) for j in range(n+1)]\n    last = v[-1]\n    front = v[:-1]\n    if last == 0 and all(x in (-1, 1) for x in front):\n        candidate = front\n        found = True\n        print(f\"Found exact candidate in basis row {row_idx}\")\n        break\n\nif not found:\n    for row_idx in range(B.nrows()):\n        v = [int(B[row_idx, j]) for j in range(n+1)]\n        front = v[:-1]\n        last = v[-1]\n        if abs(last) <= 1 and all(abs(x) in (0,1,2) for x in front):\n            possibly = []\n            ok = True\n            for x in front:\n                if x >= 1:\n                    possibly.append(1)\n                elif x <= -1:\n                    possibly.append(-1)\n                else:\n                    ok = False\n                    break\n            if ok:\n                candidate = possibly\n                found = True\n                print(f\"Found tolerant candidate in basis row {row_idx} (last={last})\")\n                break\n\nif not found:\n    print(\"没有在基中直接找到满足 (±1,...,0) 形式的向量。\")\n    print(\"你可以：\\n - 提高 BKZ 的 block_size（更强但更慢），\\n - 或尝试搜索基向量的短线性组合 / 使用 fpylll 的 shortest_vector.\")\n    exit(1)\n\n# 恢复 p\nm_bits = [(x + 1) // 2 for x in candidate]\np_recovered = 0\nfor i, bit in enumerate(m_bits):\n    p_recovered |= (bit << i)\n\nprint(\"Recovered p (decimal):\", p_recovered)\nprint(\"Recovered p (bin length):\", len(bin(p_recovered)) - 2)\n\n```\n\nRunning BKZ...\nReduction done. Searching for solution vector...\nFound exact candidate in basis row 0\nRecovered p (decimal): 4208626653103825685156\nRecovered p (bin length): 72\n\n```python\n\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import unpad\nimport hashlib\n\nciphertext=b'Lo~G\\xf46>\\xd609\\x8e\\x8e\\xf5\\xf83\\xb5\\xf0\\x8f\\x9f6&\\xea\\x02\\xfa\\xb1_L\\x85\\x93\\x93\\xf7,`|\\xc6\\xbe\\x05&\\x85\\x8bC\\xcd\\xe6?TV4q'\np_recovered=4208626653103825685156\n\n\nkey = hashlib.sha256(str(p_recovered).encode()).digest()\ncipher = AES.new(key, AES.MODE_ECB)\ntry:\n    plaintext = unpad(cipher.decrypt(ciphertext), 16)\nexcept ValueError:\n    plaintext = cipher.decrypt(ciphertext)\n    print(\"Warning: unpad failed; raw decrypted bytes shown.\")\n\nprint(\"Decrypted plaintext (bytes):\", plaintext)\ntry:\n    print(\"Decrypted plaintext (utf-8):\", plaintext.decode())\nexcept Exception:\n    pass\n```\n\nDecrypted plaintext (bytes): b'LILCTF{M4ybe_7he_brut3_f0rce_1s_be5t}'\nDecrypted plaintext (utf-8): LILCTF{M4ybe_7he_brut3_f0rce_1s_be5t}\n","tags":["CTF","Crypto"],"categories":["CTF","Crypto"]},{"title":"SwitchHosts下载安装使用","url":"/2025/08/11/SwitchHosts下载安装使用/","content":"\n# SwitchHosts下载安装使用\n\ngithub直接搜然后下载\n\n![image-20250811232346188](SwitchHosts下载安装使用/image-20250811232346188.png)\n\n然后直接修改\n\n![image-20250811235635131](SwitchHosts下载安装使用/image-20250811235635131.png)\n\n注意，要关代理并且重启浏览器！！！","tags":["Java","util"],"categories":["Java","util"]},{"title":"2025天机学堂","url":"/2025/08/11/2025天机学堂/","content":"\n# 2025天机学堂\n\n\n\n## day01：初始化项目\n\n虚拟机密码：root      123321\n\n```\n192.168.150.101 git.tianji.com  tjxt  123321\n192.168.150.101 jenkins.tianji.com    root  123\n192.168.150.101 mq.tianji.com    tjxt  123321\n192.168.150.101 nacos.tianji.com      nacos   nacos\n192.168.150.101 xxljob.tianji.com\n192.168.150.101 es.tianji.com\n192.168.150.101 api.tianji.com\n192.168.150.101 www.tianji.com      jack  123   Rose  123456\n192.168.150.101 manage.tianji.com\n192.168.150.101 cpolar.tianji.com\n```\n\n\n\n\n\n点击init初始化虚拟机：\n\n在VMware得到：\n\n![image-20250811230026583](2025天机学堂/image-20250811230026583.png)\n\n\n\n然后初始化网络配置，改成这样：\n\n![image-20250811230229943](2025天机学堂/image-20250811230229943.png)\n\n启动虚拟机，虚拟机中的环境会自启动，我们可以访问一个进行测试，访问是要访问我画红框的url：192.168.150.101:8848\n\n![image-20250811230339618](2025天机学堂/image-20250811230339618.png)\n\n然后我们也可以使用switchhost来代理，具体可以看我switchhost的文章\n\n\n\nnginx无法启动问题，尝试重启进行解决：解决失败，但最后耗时四小时左右解决了，问题在于nginx的conf的语法问题，大概改成这样就好了：\n\n![image-20250813173345522](2025天机学堂/image-20250813173345522.png)\n\n\n\n然后复制初始化项目到本地：\n\nhttp://192.168.150.101:10880/tjxt/tianji.git\n\ngit clone http://192.168.150.101:10880/tjxt/tianji.git -b lesson-init\n\n![image-20250813151129175](2025天机学堂/image-20250813151129175.png)\n\n然后打开项目刷新一下maven下下依赖就好了\n\n\n\n遇到bug：\n\n![image-20250813174959296](2025天机学堂/image-20250813174959296.png)\n\n解决了一下午，到最后还是依赖问题：把这个注释的# 删掉\n\n![image-20250814001958375](2025天机学堂/image-20250814001958375.png)\n\n\n\n查找bug，Rose删除订单时显示不能删除他人订单\n\n想远程调试，改成这样：\n\n![image-20250814141612054](2025天机学堂/image-20250814141612054.png)\n\n然后关掉tj-trade，启动tj-trade-debug\n\n当然也可以直接本地调试，但是注意调试前编辑配置改为local\n\n![image-20250814144004334](2025天机学堂/image-20250814144004334.png)\n\n回到bug问题，将=改成equals或者==就好了\n\n然后推送到本地的git就好了\n\n\n\n## day02：我的课表\n\n导入domain和enums然后下载mybatisplus插件然后连接：\n\njdbc:mysql://localhost:192.168.150.101:3306/tj_learning?useSSL=false&serverTimezone=UTC\n\n但是遇到问题：\n\n![image-20250822133807249](2025天机学堂/image-20250822133807249.png)\n\n还没解决，因为我数据库能连上但是这个插件连不上，所以暂时没管还能继续学下去\n\n\n\n然后写那个课程弄到我的课表的代码，这就不复制了，比较简单\n\n然后进行测试，他会显示报名失败，因为数据库数据太老了，你自己改一下时间就能报名成功了\n\n\n\n然后第二个是分页查询课表，也是不难，但是别忘了在请求头中加user-info，要不然会报401\n\n\n\n第三个查询正在学习的课程也是一样\n\n课后作业我直接搬了\n\n\n\n但是day02有个问题，没有解决：\n\n![image-20250822224704178](2025天机学堂/image-20250822224704178.png)\n\n但是后端接口正常使用，我就没管他\n\n\n\n## day03学习计划和进度\n\n\n\n写完代码后出现bug：\n\n![image-20250823225231379](2025天机学堂/image-20250823225231379.png)\n\n然后发现是serviceImpl忘加service注解了，加了就能解决了\n\n遇到了问题：\n\n![image-20250824001502238](2025天机学堂/image-20250824001502238.png)\n\n这是数据库建表的问题，但感觉修改太麻烦了，我不改了。代码本身没问题\n\n另外还是前端问题，导致数据没回显但是接口测试没问题\n\nday3基本是水过去的\n\n\n\n## day04高并发优化\n\nu1s1面对高并发你会怎么办？hm飞书的答案：\n\n![image-20250824233342480](2025天机学堂/image-20250824233342480.png)\n\n要我说，口头表达一下大概就是：\n\n1.存入redis后续更新数据库\n\n2.消息队列，慢慢处理\n\n3.限流\n\n4.异步请求，先返回东西后进行处理  //感觉和2重复了\n\n\n\n然后就是改造代码，懒得看了，太无聊。\n\n\n\n## day05问答系统\n\n","tags":["Java","complete_item"],"categories":["Java","complete_item"]},{"title":"2025moectf(Crypto)","url":"/2025/08/09/2025moectf(Crypto)/","content":"\n# 2025moectf(Crypto)\n\n## 1.moectf(Crypto)\n\n```python\n#!/usr/bin/env python3\nfrom Crypto.PublicKey import ElGamal\nfrom Crypto.Random import get_random_bytes, random\nfrom Crypto.Util.number import *\nfrom random import *\nfrom secret import flag\ndef generate_elgamal_keypair(bits=512):\np = getPrime(bits)\nfor _ in range(1000):\ng = getRandomRange(2, 5)\nif pow(g, (p - 1) // 2, p) != 1:\nbreak\nx = randrange(2, p - 1)\n注:此处的secret模块可以理解为存储了明文flag的python文件，属于未知信息，而非公开的可用模\n块。你需要尝试从密文去恢复原始的flag，而不是去下载secret模块。secrets则是一个用于生成管\n理密码的安全随机数的python标准库。\nbytes_to_long函数用于将flag编码为整数。\nHint：什么是 Elgamal\n还是附个链接吧Elgamal\ny = pow(g, x, p)\nreturn p, g, y, x\nkey=generate_elgamal_keypair(bits=512)\np, g, y ,x= key\nprint(\"=== 公钥 (p, g, y) ===\")\nprint(\"p =\", p)\nprint(\"g =\", g)\nprint(\"y =\", y)\nprint()\nk = randrange(1, p - 2)\nm = bytes_to_long(flag)\nc1 = pow(g, k, p)\nc2 = (m * pow(y, k, p)) % p\nprint(\"=== 密文 (c1, c2) ===\")\nprint(\"c1 =\", c1)\nprint(\"c2 =\", c2)\n#不小心把x输出了()\nprint(\"x =\", x)\n\"\"\"\n=== 公钥 (p, g, y) ===\np =\n115409637159621449517635782553574175289667159048490149855475976576983048910448410\n99894993117258279094910424033273299863589407477091830213468539451196239863\ng = 2\ny =\n831342478336601128701462358277352159533328529138054068946707321221293164841558006\n5207081449784135835711205324186662482526357834042013400765421925274271853\n=== 密文 (c1, c2) ===\nc1 =\n665205355305564535827536225955485652597693184131825115294046454317510856013294961\n0916012490837970851191204144757409335011811874896056430105292534244732863\nc2 =\n231491356808152642824798171910095233144493885239903182663547597194748466341836253\n3363591441216570597417789120470703548843342170567039399830377459228297983\nx =\n801095707808655428402095966412478447961091359656003501195114326955976122911402773\n8791440961864150225798049120582540951874956255115884539333966429021004214\n\"\"\"\n注:此处的secret模块可以理解为存储了明文flag的python文件，属于未知信息，而非公开的可用模\n块。你需要尝试从密文去恢复原始的flag，而不是去下载secret模块。secrets则是一个用于生成管\n理密码的安全随机数的python标准库。\nbytes_to_long函数用于将flag编码为整数。\n```\n\nai可以一把梭，明个再来写解题过程：\n\n![image-20250810004708703](2025moectf(Crypto)/image-20250810004708703.png)\n\n\n\n```python\nfrom Crypto.Util.number import long_to_bytes\n\n# 给定的公钥和私钥\np = 11540963715962144951763578255357417528966715904849014985547597657698304891044841099894993117258279094910424033273299863589407477091830213468539451196239863\ng = 2\ny = 8313424783366011287014623582773521595333285291380540689467073212212931648415580065207081449784135835711205324186662482526357834042013400765421925274271853\nc1 = 6652053553055645358275362259554856525976931841318251152940464543175108560132949610916012490837970851191204144757409335011811874896056430105292534244732863\nc2 = 2314913568081526428247981719100952331444938852399031826635475971947484663418362533363591441216570597417789120470703548843342170567039399830377459228297983\nx = 8010957078086554284020959664124784479610913596560035011951143269559761229114027738791440961864150225798049120582540951874956255115884539333966429021004214\n\n# 计算共享密钥 s = c1^x mod p\ns = pow(c1, x, p)\n\n# 计算 s 的模逆元\ns_inv = pow(s, -1, p)\n\n# 解密消息 m = c2 * s_inv mod p\nm = (c2 * s_inv) % p\n\n# 将整数转换为字节串\nflag = long_to_bytes(m)\n\nprint(\"解密后的 flag:\", flag.decode())\n```\n\nflag:   moectf{th1s_1s_y0ur_f1rst_ElG@m@l}\n\n\n\n## 2.ez_DES\n\n原题：\n\n```python\nfrom Crypto.Cipher import DES\nimport secrets\nimport string\n\nflag = 'moectf{???}'\ncharacters = string.ascii_letters + string.digits + string.punctuation\nkey = 'ezdes'+''.join(secrets.choice(characters) for _ in range(3))\nassert key[:5] == 'ezdes'\nkey = key.encode('utf-8')\nl = 8\n\ndef encrypt(text, key):\n    cipher = DES.new(key, DES.MODE_ECB)\n    padded_text = text + (l - len(text) % l) * chr(len(text))\n    data = cipher.encrypt(padded_text.encode('utf-8'))\n    return data\n\nc = encrypt(flag, key)\nprint('c =', c)\n\n# c = b'\\xe6\\x8b0\\xc8m\\t?\\x1d\\xf6\\x99sA>\\xce \\rN\\x83z\\xa0\\xdc{\\xbc\\xb8X\\xb2\\xe2q\\xa4\"\\xfc\\x07'\n```\n\n爆破秘钥就好，ai能一把梭：\n\n```python\nfrom Crypto.Cipher import DES\nimport string\nfrom itertools import product\n\n# 给定的密文\nc = b'\\xe6\\x8b0\\xc8m\\t?\\x1d\\xf6\\x99sA>\\xce \\rN\\x83z\\xa0\\xdc{\\xbc\\xb8X\\xb2\\xe2q\\xa4\"\\xfc\\x07'\n\n# 可能的字符集\ncharacters = string.ascii_letters + string.digits + string.punctuation\n\ndef decrypt(ciphertext, key):\n    \"\"\"尝试使用给定的密钥解密，使用题目特定的填充方案\"\"\"\n    try:\n        cipher = DES.new(key, DES.MODE_ECB)\n        data = cipher.decrypt(ciphertext)\n        \n        # 获取原始消息长度（填充字符的值）\n        msg_len = data[-1]\n        \n        # 计算填充长度\n        pad_len = 8 - (msg_len % 8)\n        if pad_len == 0:  # 如果长度是8的倍数\n            pad_len = 8\n        \n        # 验证填充是否正确\n        if all(byte == msg_len for byte in data[-pad_len:]):\n            # 移除填充并返回原始消息\n            return data[:-pad_len]\n    except:\n        pass\n    return None\n\ndef main():\n    \"\"\"主函数，爆破密钥并解密\"\"\"\n    # 生成所有可能的3字符组合\n    total = len(characters) ** 3\n    count = 0\n    \n    print(f\"开始爆破 {total} 种可能的密钥组合...\")\n    \n    # 使用笛卡尔积生成所有可能的3字符后缀\n    for suffix in product(characters, repeat=3):\n        count += 1\n        if count % 100000 == 0:\n            print(f\"进度: {count}/{total} ({count/total*100:.1f}%)\")\n        \n        # 构建完整密钥\n        key_str = 'ezdes' + ''.join(suffix)\n        key = key_str.encode('utf-8')\n        \n        # 尝试解密\n        result = decrypt(c, key)\n        \n        # 如果解密成功并且结果包含 moectf 标志\n        if result and b'moectf{' in result:\n            print(f\"\\n找到有效密钥: {key_str}\")\n            print(f\"解密结果: {result.decode()}\")\n            return\n    \n    print(\"爆破完成，未找到有效密钥。尝试检查填充逻辑或密钥空间。\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n找到有效密钥: ezdes8br\n解密结果: moectf{_Ju5t envmEra+e.!}\n\n\n\n\n\n## 3.baby_next\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import next_prime\nfrom functools import reduce\nfrom secret import flag\n\nassert len(flag) == 38\nassert flag[:7] == b'moectf{'\nassert flag[-1:] == b'}'\n\ndef main():\n    p = getPrime(512)\n    q = int(reduce(lambda res, _: next_prime(res), range(114514), p))\n\n    n = p * q\n    e = 65537\n\n    m = bytes_to_long(flag)\n\n    c = pow(m, e, n)\n\n    print(f'{n = }')\n    print(f'{c = }')\n\nif __name__ == '__main__':\n    main()\n\n\"\"\"\nn = 96742777571959902478849172116992100058097986518388851527052638944778038830381328778848540098201307724752598903628039482354215330671373992156290837979842156381411957754907190292238010742130674404082688791216045656050228686469536688900043735264177699512562466087275808541376525564145453954694429605944189276397\nc = 17445962474813629559693587749061112782648120738023354591681532173123918523200368390246892643206880043853188835375836941118739796280111891950421612990713883817902247767311707918305107969264361136058458670735307702064189010952773013588328843994478490621886896074511809007736368751211179727573924125553940385967\n\"\"\"\n```\n\nnext_prime的应用，也是爆破一下，因为数据量不大，给点描述就能一把梭了\n\n```python\nfrom gmpy2 import isqrt, next_prime, mpz\nfrom Crypto.Util.number import long_to_bytes\n\nn = mpz(96742777571959902478849172116992100058097986518388851527052638944778038830381328778848540098201307724752598903628039482354215330671373992156290837979842156381411957754907190292238010742130674404082688791216045656050228686469536688900043735264177699512562466087275808541376525564145453954694429605944189276397)\nc = mpz(17445962474813629559693587749061112782648120738023354591681532173123918523200368390246892643206880043853188835375836941118739796280111891950421612990713883817902247767311707918305107969264361136058458670735307702064189010952773013588328843994478490621886896074511809007736368751211179727573924125553940385967)\ne = 65537\n\ndef factor_n(n):\n    \"\"\"高效分解接近的素数因子\"\"\"\n    a = isqrt(n)  # 精确整数平方根\n    \n    # 从平方根开始向前搜索素数作为候选p\n    p = next_prime(a - 10**7)  # 从稍低于平方根的位置开始\n    \n    # 尝试p和p后面的114514个素数作为q\n    for _ in range(10000000):  # 安全范围内搜索\n        q = n // p\n        \n        # 检查是否找到有效因子\n        if p * q == n:\n            return p, q\n        \n        # 移动到下一个候选p\n        p = next_prime(p)\n    \n    return None, None\n\np, q = factor_n(n)\n\nif p and q:\n    phi = (p-1)*(q-1)\n    d = pow(e, -1, phi)\n    m = pow(c, d, n)\n    flag = long_to_bytes(int(m))\n    print(\"Flag:\", flag.decode())\nelse:\n    print(\"未找到因子\")\n```\n\n\n\nflag：  moectf{vv0W_p_m1nu5_q_i5_r34l1y_sm4lI}\n\n\n\n## 4.ez_square\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\nfrom secret import flag\n\nassert len(flag) == 35\nassert flag[:7] == b'moectf{'\nassert flag[-1:] == b'}'\n\ndef main():\n    p = getPrime(512)\n    q = getPrime(512)\n\n    n = p * q\n    e = 65537\n\n    m = bytes_to_long(flag)\n\n    c = pow(m, e, n)\n    hint = pow(p + q, 2, n)\n\n    print(f'{n = }')\n    print(f'{c = }')\n    print(f'{hint = }')\n\nif __name__ == '__main__':\n    main()\n\n\"\"\"\nn = 83917281059209836833837824007690691544699901753577294450739161840987816051781770716778159151802639720854808886223999296102766845876403271538287419091422744267873129896312388567406645946985868002735024896571899580581985438021613509956651683237014111116217116870686535030557076307205101926450610365611263289149\nc = 69694813399964784535448926320621517155870332267827466101049186858004350675634768405333171732816667487889978017750378262941788713673371418944090831542155613846263236805141090585331932145339718055875857157018510852176248031272419248573911998354239587587157830782446559008393076144761176799690034691298870022190\nhint = 5491796378615699391870545352353909903258578093592392113819670099563278086635523482350754035015775218028095468852040957207028066409846581454987397954900268152836625448524886929236711403732984563866312512753483333102094024510204387673875968726154625598491190530093961973354413317757182213887911644502704780304\n\"\"\"\n```\n\nrsa加密公式的考察，不难，也能一把梭\n\n```python\nimport math\nfrom Crypto.Util.number import long_to_bytes\n\n# 已知参数\nn = 83917281059209836833837824007690691544699901753577294450739161840987816051781770716778159151802639720854808886223999296102766845876403271538287419091422744267873129896312388567406645946985868002735024896571899580581985438021613509956651683237014111116217116870686535030557076307205101926450610365611263289149\nc = 69694813399964784535448926320621517155870332267827466101049186858004350675634768405333171732816667487889978017750378262941788713673371418944090831542155613846263236805141090585331932145339718055875857157018510852176248031272419248573911998354239587587157830782446559008393076144761176799690034691298870022190\nhint = 5491796378615699391870545352353909903258578093592392113819670099563278086635523482350754035015775218028095468852040957207028066409846581454987397954900268152836625448524886929236711403732984563866312512753483333102094024510204387673875968726154625598491190530093961973354413317757182213887911644502704780304\ne = 65537\n\n# 关键推导：(p+q)² = (p-q)² + 4pq，而hint = (p+q)² mod n = (p-q)² mod n\n# 计算s = (p+q)² = 4n + hint（因为hint = (p-q)²且小于n）\ns = 4 * n + hint\n\n# 求s的平方根得到p+q\ns_sqrt = math.isqrt(s)\nassert s_sqrt * s_sqrt == s, \"s不是完全平方数，推导错误\"\n\n# 求hint的平方根得到p-q\nd_sqrt = math.isqrt(hint)\nassert d_sqrt * d_sqrt == hint, \"hint不是完全平方数，推导错误\"\n\n# 计算p和q\np = (s_sqrt + d_sqrt) // 2\nq = (s_sqrt - d_sqrt) // 2\n\n# 验证p*q是否等于n\nassert p * q == n, \"分解n失败\"\n\n# 计算欧拉函数φ(n)\nphi = (p - 1) * (q - 1)\n\n# 计算私钥d（e的逆元）\nd = pow(e, -1, phi)\n\n# 解密得到明文m\nm = pow(c, d, n)\n\n# 转换为flag\nflag = long_to_bytes(m)\nprint(\"解密得到的flag:\", flag.decode())\n\n```\n\n\n\nflag：   moectf{Ma7hm4t1c5_is_@_k1nd_0f_a2t}\n\n\n\n## 5.**ezlegendre**\n\n原题：\n\n```python\nfrom Crypto.Util.number import getPrime, bytes_to_long\nfrom secret import flag\n\np = 258669765135238783146000574794031096183\na = 144901483389896508632771215712413815934\n\ndef encrypt_flag(flag):\n    ciphertext = []\n    plaintext = ''.join([bin(i)[2:].zfill(8) for i in flag])\n    for b in plaintext:\n        e = getPrime(16)\n        d = randint(1,10)\n        n = pow(a+int(b)*d, e, p)\n        ciphertext.append(n)\n    return ciphertext\n\nprint(encrypt_flag(flag))\n\n```\n\n数据都给你了，直接读数据得出未知数就好了\n\n```python\nfrom Crypto.Util.number import isPrime\nfrom tqdm import tqdm\n\n# 已知参数\np = 258669765135238783146000574794031096183\na = 144901483389896508632771215712413815934\n\n# 假设我们有部分密文\nciphertext = [102230607782303286066661803375943337852, 196795077203291879584123548614536291210, 41820965969318717978206410470942308653, 207485265608553973031638961376379316991, 126241934830164184030184483965965358511, 20250852993510047910828861636740192486, 103669039044817273633962139070912140023, 97337342479349334554052986501856387313, 159127719377115088432849153087501377529, 45764236700940832554086668329121194445, 35275004033464216369574866255836768148, 52905563179465420745275423120979831405, 17032180473319795641143474346227445013, 29477780450507011415073117531375947096, 55487351149573346854028771906741727601, 121576510894250531063152466107000055279, 69959515052241122548546701060784004682, 173839335744520746760315021378911211216, 28266103662329817802592951699263023295, 194965730205655016437216590690038884309, 208284966254343254016582889051763066574, 137680272193449000169293006333866420934, 250634504150859449051246497912830488025, 124228075953362483108097926850143387433, 232956176229023369857830577971626577196, 149441784891021006224395235471825205661, 118758326165875568431376314508740278934, 222296215466271835013184903421917936512, 49132466023594939909761224481560782731, 406286678537520849308828749751513339, 215122152883292859254246948661946520324, 81283590250399459209567683991648438199, 150395133067480380674905743031927410663, 5710878479977467762548400320726575491, 83627753774286426170934105100463456109, 164968224377869331545649899270867630850, 241057183685774160581265732812497247167, 109136287048010096863680430193408099828, 116313129605409961931811582899075031153, 202739016625709380026000805340243458300, 25408225921774957745573142542576755590, 151336258796933656160956289529558246702, 2947189044370494063643525166023973095, 228678413963736672394976193093568181979, 40627063032321835707220414670018641024, 55446789315226949622969082042881319148, 32219108726651509070669836923591948459, 134454924722414419191920784435633637634, 97952023967728640730045857104376826039, 20659076942504417479953787092276592682, 93281761173713729777326842152860901050, 133634773495582264000160065317239987936, 79976720152435218818731114555425458470, 234654694673289327542859971371886984118, 51332273108989067644245919615090753756, 134120280423303717489979349737802826605, 182001158305920226320085758522717203725, 98408798757865562737462169470346158516, 78200435603900368619334272308272773797, 232796357836930341547987600782979821555, 589106968861493082018132081244848952, 24186003230092331554886767628744415123, 236070626491251466741246103662922841423, 238699080882667864827094121849090696547, 141659873734297659078160283051728812410, 228977113517120063860252637394240795552, 236613527842969921794004708284265628300, 145522034982744654991661857596541755396, 249608374387044047328725156440984678776, 325110572051913836681821746093704556, 171492052199838424502681030556098576483, 156498865212994371079795360268866413702, 196747701509389071931992996873572785043, 70811811603137896158765356680364490781, 83672551582385607422240464086955462541, 117961603623637997457153763936550310698, 224448821395214505399297116719025174412, 4598815373009554321735225938200807251, 194892269604260726530091473301914449005, 127484628022155760909820605666827662175, 208706240846212140439291547368645656474, 14102286481104997303651684152195298336, 6129503335471304345451795609683770657, 103799668048593149396277157385628834185, 185813375481410513002496683918106238351, 233491689316882978147517340230794025796, 46274083097168831187719988888816378961, 119487551553664772614629936285345836934, 84340029922118279362389419277915602509, 88253743193124528032223101368846247085, 227895357640018330099501504941388167432, 92189947144174433744195727086236905626, 83114957902192791332190922428847199876, 173535754090441937731619031520699325122, 192309407933789484835602071782330798398, 255421921600128994923738650157598053776, 155535082468314012733563336837641958625, 49064798421022327310707074253263463055, 161216416471071644769301963857685054031, 252480348817188872515008985698620059851, 75854882798183185741756645038434215611, 256065006192683011190132982128640682537, 87507510173514424105732562474643251223, 163309795132131534875147566536485288212, 253583084320404985699510129361746869059, 253300112521651972637580307326576568313, 239027717080729650738678032571840680727, 117444657686971615526398894470673026034, 215470942802874046857958621181684551426, 58767098748728136687851735836323448020, 249357164697409977883764098879705065535, 174705348385893117518084017669958647345, 211108767177375215605155301209259781232, 57829566748907062397366819001461941421, 88265742700024922112974862134385921564, 80952107622167923709226013231566882261, 236078582132483864916117213281193714198, 193448482646563141692726575550417225891, 245972799166806058223048506073553726233, 10132977708896091601871557249244373666, 201785418152654519825849206312616081028, 15169816744048531212384271865884567710, 122545328290385950043826822277924297182, 202918646192255177261567701479991753600, 32696887488223731055835744711207261936, 88319352182963224921157305627381030375, 92381505322264045777004475690398861771, 189745654013352563126968415157143821842, 152254915005998949299817641843658795579, 198032433618991362619448347415342295581, 84073892809321676935569114878067118319, 82243805869584256211699602267760745768, 61994229948266781537191603999495995852, 253668765227759797787675352833142466255, 38865376724677211964966907748953557125, 134615436811268347303232550777225944929, 176932422465426107783498083830285780588, 207573742393618910694054452362826628208, 200033130835394442710748301293534928706, 127536063935293533700918451145963158658, 219125698281820710910675956971948816959, 179795893258398750139395156587561075767, 69649628109726874051635160004398498964, 241433717681314766463039563422535023524, 202664264135718511331695232476272832350, 205151096657425932591242432052912914182, 210305712465948130683966275157181140301, 196555690055906934925300527324955477733, 66817932643964538216259564711698986077, 95270796440975607179107356182889534333, 123226880424532374188134357659879826495, 53506495440223773538415807620524749240, 19253217887083870834249774316467647628, 165699356396365023442008488156823647206, 107809175498119862854792975070673056027, 250453989887421415931162217952559757164, 171492052199838424502681030556098576483, 133778166882550119563444625306816232463, 149009301604122447269581792013291889175, 9982418254629616281350713836647603294, 203486292122499140756846060502464655972, 157686696123400087437836943220926921848, 88338919773540412238116717043122711811, 113265824169274322024623493892867211478, 5549372099744960679418616304893848801, 12431828907518852062050349123660880165, 183957934738536914983862053251433028750, 42027289270308356303682029801998790750, 117406080036483925915502666019795783905, 154312255292300186042636734144948304054, 143706917273862261295046346995206133170, 50088136095338601440516112338120787526, 250634504150859449051246497912830488025, 8073010289877796888705519374892639903, 40049582814576788803483039836229025416, 227012342545923833983403067401561291645, 201776603581414625783054400184026088994, 55474945478884522762318445841998187357, 221515530211550293408010846844218019597, 172650752042211610909190315288155597255, 67046194931321172530462444254204111483, 207435868835185636819659137800256834557, 188063222224545200294767050268070647452, 58099349021260301211275261896736590564, 23598877596106927870697531042828774738, 58546308516383335224739442370238545000, 58125311541947998710088435169901475101, 238219925698115060748249043752036454438, 203910234934340893915761800653823457631, 190854889967769152565565000250829375099, 37573623890629846209257307181880876288, 226220240200270623843038279593586687278, 144246075981535671790438155977352345487, 14665770553338784222331493932533448756, 37992062606775322664977502677838074649, 47370175759976523832233910009306151684, 97047813247943880266351445874642842468, 237607444658797800072728280983357541134, 174853113478993738890584814806707459112, 17104608155861584438824639050715857607, 83639027011494777283064583268678718843, 237826165608708003941944469905843354705, 231707683915242052796886276983724691027, 146089830852925550139294146760718642221, 25604562707667550478623425477029052785, 108577663147976992047614498924706939204, 69040319834829375335287614995435269276, 169933229202934375632745753379104389929, 72693008284867494808267387710985847974, 158548279589965576940349068403862889270, 49458101234256610254825879149914255140, 24389558269688411084589654047215902968, 210567980379246548727819953025607019254, 110423375132252997825868399832298953831, 109589895677661968369424757992411668628, 66177577069199763925999718357846633613, 83602293803708828242273186265396676466, 172226271050176278536911356541786290551, 85799805809703976643034084477579915867, 179399990302447560847151603157937241688, 81687654752229170984692833277072534294, 160766441640281044008645821822296569868, 100306680611749750243920501921769642984, 42195187332833922597871030332905266026, 238918420772178508359295233180536910768, 221685929158944699801776621298532178665, 209349638787804999657456057184702655805, 183953393268431043006359511952782903516, 137364333131365794683132159746962959967, 15637689373906596015395350692459218048, 145956368418289159411911667337899986262, 197987711355277581048877821432652325207, 125421308989313724733467092345532539875, 90525081516582408488547894471421476595, 107405840115256692042814887586009104950, 71587500700172519801649824611045199280, 10155721246869986043302768283257682883, 100522792569358427133597834727509523742, 244473925018526409824670892423775482110, 50746138425761666610345252577572889037, 142188269919422432629363225167297071042, 8235113926890598897465093754260801947, 174540885017405784646782293055852044631, 171949847901434672429841435895697323702, 34391199559497599434575002007581170988, 7337868660819385932166025474594964373, 89608475952042154068811282935241824949, 162561097613906905390170334328135062933, 252566077272083954707900007055640560669, 4284637988579219107997224848114896904, 220026371387782427901244689037957398829, 86019060485320999498155965142619258089, 19304861731281576405798605142335886482, 123188238667151068575810494833929221938, 125089740978532716086813732154638565196, 252061524500088702951562270741214799294, 89528875472312768404823823905699760649, 63307407053590054220492282094909190524, 24389558269688411084589654047215902968, 43835777110183833958990705735152973942, 196543204310466258426232803779025620993, 225032412767857179129234169288824097261, 50292890880286260984317361296226049436, 64928956886509273090981701066528078331, 25408225921774957745573142542576755590, 235921667882292842303120860570747218086, 217132603855089441017750752624514343437, 11106129204256119599329380588789107048, 147501327490657927610543345089238991876, 158091159632919983870444592039392730373, 254215886971254771885657857148535673338, 129869106474614345624950211566868568809, 10425702332274469498479699675668087022, 136595953187315682777976356839442311764, 1607792140397737044118662059498732982, 23710000155612873207506044342091514799, 118571340370877720354330132780832828911, 194624784476702188629452374731837038856, 51332273108989067644245919615090753756, 240921043405288511960365826273938845156, 158670188709175825212687487436006138030, 133641825913283256858340618209700716053, 43054466484232130048301271684438593412, 20361972967806283315536154125012604660, 135700832615866572032111395529532615300, 160609169788639387827865051539103507016, 100576279475451993660766480883708996211, 215424685541583305069271024253690375127, 60018956375784961551937423504137141702, 107997941230633604720421526632224279451, 219482010609171816035007605036664317041, 22173526221024380740269311947729076493, 249746554302052221287371350978970766087, 93207359085331319264650563354951254906, 221421697282310997113867048083058096452, 61834092635779365101011109381392037516, 162215218701897689647766394615098617152, 141856131587452385513407955541400099703, 177910903795887762773545874929605680469, 228832704523723308335513552177377803295, 229427981969125094398744034150988525118, 217938760689082034514008764751385239765, 3238055163645731541423094980789895030, 42308449860804765793467328093112118974, 254764518926620089428032312378507653680, 215733901156118606036318409454786603209, 59640829345183339336712595595022506261, 33515071724475649656070325837411550208, 51175659069843551646353202764296812462, 211462959696081863041546889096760952490, 230559603938699838189391087728971115767, 85878911733601049548471257838175175563, 214134904074265214033878852207103328297, 160702405980652445507529591230654474171, 223755040649990285320102091954198427148, 166476753890268002826149533120107157745, 26283916639129998224675164834425763384, 232971495542024495583092055361321729894, 79741799146769724681649849525636816379, 228506526471280046809909301748098760369, 167502422063741368765891061653686283332, 26984184590668253713951516794937308166, 105952393031190074432183821281493254, 113823192955281698937767041115166174652, 93264047694114869263275726820602569731, 55481974783112950660682138071588408040, 108961894273530837550182447112767144669, 47975793549419083945738147934068241928, 204024371586357035343484206754422857590, 251859351272989525849999231358507018068, 75939709807860493804628805619699991501, 129031774446142139804436921156668129187, 110764318451937254261883856778359218969, 246404864722813298477426808193494673610, 153818236564405157581869620439634140065, 246125932167584353084676586883038397451]\n\n# 预计算16位素数\nprimes_16bit = [i for i in range(2, 2**16) if isPrime(i)]\n\ndef decrypt_bit(n):\n    for b in [0, 1]:  # 尝试0和1\n        for d in range(1, 11):  # 尝试d从1到10\n            for e in primes_16bit:  # 尝试所有16位素数\n                if pow(a + b*d, e, p) == n:\n                    return str(b)\n    return '?'  # 未找到\n\n# 解密所有位\nplain_bits = []\nfor n in tqdm(ciphertext):\n    plain_bits.append(decrypt_bit(n))\n\n# 将二进制字符串转换回字节\nplaintext = ''.join(plain_bits)\nflag = bytes(int(plaintext[i:i+8], 2) for i in range(0, len(plaintext), 8))\nprint(flag)\n```\n\nflag：b'moectf{Y0u_h@v3_ju5t_s01v3d_7h1s_pr0b13m!}'\n\n\n\n\n\n总结：为数不多能ak的密码（如果后续不上题的话），刚学两三个月的密码手适合做，可以增强一下信心以及练一下基本功\n\n最后，测试一下图片：\n\n\n\n![099f596209ac5396bf92b5f661c7ed24](2025moectf(Crypto)/099f596209ac5396bf92b5f661c7ed24.jpeg)\n\n哦，后续会继续上题","tags":["CTF","Crypto"],"categories":["CTF","Crypto"]}]