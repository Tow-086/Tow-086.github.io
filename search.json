[{"title":"2025moectf(Crypto)","url":"/2025/08/09/2025moectf(Crypto)/","content":"\n# 2025moectf(Crypto)\n\n## 1.moectf(Crypto)\n\n```python\n#!/usr/bin/env python3\nfrom Crypto.PublicKey import ElGamal\nfrom Crypto.Random import get_random_bytes, random\nfrom Crypto.Util.number import *\nfrom random import *\nfrom secret import flag\ndef generate_elgamal_keypair(bits=512):\np = getPrime(bits)\nfor _ in range(1000):\ng = getRandomRange(2, 5)\nif pow(g, (p - 1) // 2, p) != 1:\nbreak\nx = randrange(2, p - 1)\n注:此处的secret模块可以理解为存储了明文flag的python文件，属于未知信息，而非公开的可用模\n块。你需要尝试从密文去恢复原始的flag，而不是去下载secret模块。secrets则是一个用于生成管\n理密码的安全随机数的python标准库。\nbytes_to_long函数用于将flag编码为整数。\nHint：什么是 Elgamal\n还是附个链接吧Elgamal\ny = pow(g, x, p)\nreturn p, g, y, x\nkey=generate_elgamal_keypair(bits=512)\np, g, y ,x= key\nprint(\"=== 公钥 (p, g, y) ===\")\nprint(\"p =\", p)\nprint(\"g =\", g)\nprint(\"y =\", y)\nprint()\nk = randrange(1, p - 2)\nm = bytes_to_long(flag)\nc1 = pow(g, k, p)\nc2 = (m * pow(y, k, p)) % p\nprint(\"=== 密文 (c1, c2) ===\")\nprint(\"c1 =\", c1)\nprint(\"c2 =\", c2)\n#不小心把x输出了()\nprint(\"x =\", x)\n\"\"\"\n=== 公钥 (p, g, y) ===\np =\n115409637159621449517635782553574175289667159048490149855475976576983048910448410\n99894993117258279094910424033273299863589407477091830213468539451196239863\ng = 2\ny =\n831342478336601128701462358277352159533328529138054068946707321221293164841558006\n5207081449784135835711205324186662482526357834042013400765421925274271853\n=== 密文 (c1, c2) ===\nc1 =\n665205355305564535827536225955485652597693184131825115294046454317510856013294961\n0916012490837970851191204144757409335011811874896056430105292534244732863\nc2 =\n231491356808152642824798171910095233144493885239903182663547597194748466341836253\n3363591441216570597417789120470703548843342170567039399830377459228297983\nx =\n801095707808655428402095966412478447961091359656003501195114326955976122911402773\n8791440961864150225798049120582540951874956255115884539333966429021004214\n\"\"\"\n注:此处的secret模块可以理解为存储了明文flag的python文件，属于未知信息，而非公开的可用模\n块。你需要尝试从密文去恢复原始的flag，而不是去下载secret模块。secrets则是一个用于生成管\n理密码的安全随机数的python标准库。\nbytes_to_long函数用于将flag编码为整数。\n```\n\nai可以一把梭，明个再来写解题过程：\n\n![image-20250810004708703](2025moectf(Crypto)/image-20250810004708703.png)\n\n\n\n```python\nfrom Crypto.Util.number import long_to_bytes\n\n# 给定的公钥和私钥\np = 11540963715962144951763578255357417528966715904849014985547597657698304891044841099894993117258279094910424033273299863589407477091830213468539451196239863\ng = 2\ny = 8313424783366011287014623582773521595333285291380540689467073212212931648415580065207081449784135835711205324186662482526357834042013400765421925274271853\nc1 = 6652053553055645358275362259554856525976931841318251152940464543175108560132949610916012490837970851191204144757409335011811874896056430105292534244732863\nc2 = 2314913568081526428247981719100952331444938852399031826635475971947484663418362533363591441216570597417789120470703548843342170567039399830377459228297983\nx = 8010957078086554284020959664124784479610913596560035011951143269559761229114027738791440961864150225798049120582540951874956255115884539333966429021004214\n\n# 计算共享密钥 s = c1^x mod p\ns = pow(c1, x, p)\n\n# 计算 s 的模逆元\ns_inv = pow(s, -1, p)\n\n# 解密消息 m = c2 * s_inv mod p\nm = (c2 * s_inv) % p\n\n# 将整数转换为字节串\nflag = long_to_bytes(m)\n\nprint(\"解密后的 flag:\", flag.decode())\n```\n\nflag:   moectf{th1s_1s_y0ur_f1rst_ElG@m@l}\n\n\n\n## 2.ez_DES\n\n原题：\n\n```python\nfrom Crypto.Cipher import DES\nimport secrets\nimport string\n\nflag = 'moectf{???}'\ncharacters = string.ascii_letters + string.digits + string.punctuation\nkey = 'ezdes'+''.join(secrets.choice(characters) for _ in range(3))\nassert key[:5] == 'ezdes'\nkey = key.encode('utf-8')\nl = 8\n\ndef encrypt(text, key):\n    cipher = DES.new(key, DES.MODE_ECB)\n    padded_text = text + (l - len(text) % l) * chr(len(text))\n    data = cipher.encrypt(padded_text.encode('utf-8'))\n    return data\n\nc = encrypt(flag, key)\nprint('c =', c)\n\n# c = b'\\xe6\\x8b0\\xc8m\\t?\\x1d\\xf6\\x99sA>\\xce \\rN\\x83z\\xa0\\xdc{\\xbc\\xb8X\\xb2\\xe2q\\xa4\"\\xfc\\x07'\n```\n\n爆破秘钥就好，ai能一把梭：\n\n```python\nfrom Crypto.Cipher import DES\nimport string\nfrom itertools import product\n\n# 给定的密文\nc = b'\\xe6\\x8b0\\xc8m\\t?\\x1d\\xf6\\x99sA>\\xce \\rN\\x83z\\xa0\\xdc{\\xbc\\xb8X\\xb2\\xe2q\\xa4\"\\xfc\\x07'\n\n# 可能的字符集\ncharacters = string.ascii_letters + string.digits + string.punctuation\n\ndef decrypt(ciphertext, key):\n    \"\"\"尝试使用给定的密钥解密，使用题目特定的填充方案\"\"\"\n    try:\n        cipher = DES.new(key, DES.MODE_ECB)\n        data = cipher.decrypt(ciphertext)\n        \n        # 获取原始消息长度（填充字符的值）\n        msg_len = data[-1]\n        \n        # 计算填充长度\n        pad_len = 8 - (msg_len % 8)\n        if pad_len == 0:  # 如果长度是8的倍数\n            pad_len = 8\n        \n        # 验证填充是否正确\n        if all(byte == msg_len for byte in data[-pad_len:]):\n            # 移除填充并返回原始消息\n            return data[:-pad_len]\n    except:\n        pass\n    return None\n\ndef main():\n    \"\"\"主函数，爆破密钥并解密\"\"\"\n    # 生成所有可能的3字符组合\n    total = len(characters) ** 3\n    count = 0\n    \n    print(f\"开始爆破 {total} 种可能的密钥组合...\")\n    \n    # 使用笛卡尔积生成所有可能的3字符后缀\n    for suffix in product(characters, repeat=3):\n        count += 1\n        if count % 100000 == 0:\n            print(f\"进度: {count}/{total} ({count/total*100:.1f}%)\")\n        \n        # 构建完整密钥\n        key_str = 'ezdes' + ''.join(suffix)\n        key = key_str.encode('utf-8')\n        \n        # 尝试解密\n        result = decrypt(c, key)\n        \n        # 如果解密成功并且结果包含 moectf 标志\n        if result and b'moectf{' in result:\n            print(f\"\\n找到有效密钥: {key_str}\")\n            print(f\"解密结果: {result.decode()}\")\n            return\n    \n    print(\"爆破完成，未找到有效密钥。尝试检查填充逻辑或密钥空间。\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n找到有效密钥: ezdes8br\n解密结果: moectf{_Ju5t envmEra+e.!}\n\n\n\n\n\n## 3.baby_next\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import next_prime\nfrom functools import reduce\nfrom secret import flag\n\nassert len(flag) == 38\nassert flag[:7] == b'moectf{'\nassert flag[-1:] == b'}'\n\ndef main():\n    p = getPrime(512)\n    q = int(reduce(lambda res, _: next_prime(res), range(114514), p))\n\n    n = p * q\n    e = 65537\n\n    m = bytes_to_long(flag)\n\n    c = pow(m, e, n)\n\n    print(f'{n = }')\n    print(f'{c = }')\n\nif __name__ == '__main__':\n    main()\n\n\"\"\"\nn = 96742777571959902478849172116992100058097986518388851527052638944778038830381328778848540098201307724752598903628039482354215330671373992156290837979842156381411957754907190292238010742130674404082688791216045656050228686469536688900043735264177699512562466087275808541376525564145453954694429605944189276397\nc = 17445962474813629559693587749061112782648120738023354591681532173123918523200368390246892643206880043853188835375836941118739796280111891950421612990713883817902247767311707918305107969264361136058458670735307702064189010952773013588328843994478490621886896074511809007736368751211179727573924125553940385967\n\"\"\"\n```\n\nnext_prime的应用，也是爆破一下，因为数据量不大，给点描述就能一把梭了\n\n```python\nfrom gmpy2 import isqrt, next_prime, mpz\nfrom Crypto.Util.number import long_to_bytes\n\nn = mpz(96742777571959902478849172116992100058097986518388851527052638944778038830381328778848540098201307724752598903628039482354215330671373992156290837979842156381411957754907190292238010742130674404082688791216045656050228686469536688900043735264177699512562466087275808541376525564145453954694429605944189276397)\nc = mpz(17445962474813629559693587749061112782648120738023354591681532173123918523200368390246892643206880043853188835375836941118739796280111891950421612990713883817902247767311707918305107969264361136058458670735307702064189010952773013588328843994478490621886896074511809007736368751211179727573924125553940385967)\ne = 65537\n\ndef factor_n(n):\n    \"\"\"高效分解接近的素数因子\"\"\"\n    a = isqrt(n)  # 精确整数平方根\n    \n    # 从平方根开始向前搜索素数作为候选p\n    p = next_prime(a - 10**7)  # 从稍低于平方根的位置开始\n    \n    # 尝试p和p后面的114514个素数作为q\n    for _ in range(10000000):  # 安全范围内搜索\n        q = n // p\n        \n        # 检查是否找到有效因子\n        if p * q == n:\n            return p, q\n        \n        # 移动到下一个候选p\n        p = next_prime(p)\n    \n    return None, None\n\np, q = factor_n(n)\n\nif p and q:\n    phi = (p-1)*(q-1)\n    d = pow(e, -1, phi)\n    m = pow(c, d, n)\n    flag = long_to_bytes(int(m))\n    print(\"Flag:\", flag.decode())\nelse:\n    print(\"未找到因子\")\n```\n\n\n\nflag：  moectf{vv0W_p_m1nu5_q_i5_r34l1y_sm4lI}\n\n\n\n## 4.ez_square\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\nfrom secret import flag\n\nassert len(flag) == 35\nassert flag[:7] == b'moectf{'\nassert flag[-1:] == b'}'\n\ndef main():\n    p = getPrime(512)\n    q = getPrime(512)\n\n    n = p * q\n    e = 65537\n\n    m = bytes_to_long(flag)\n\n    c = pow(m, e, n)\n    hint = pow(p + q, 2, n)\n\n    print(f'{n = }')\n    print(f'{c = }')\n    print(f'{hint = }')\n\nif __name__ == '__main__':\n    main()\n\n\"\"\"\nn = 83917281059209836833837824007690691544699901753577294450739161840987816051781770716778159151802639720854808886223999296102766845876403271538287419091422744267873129896312388567406645946985868002735024896571899580581985438021613509956651683237014111116217116870686535030557076307205101926450610365611263289149\nc = 69694813399964784535448926320621517155870332267827466101049186858004350675634768405333171732816667487889978017750378262941788713673371418944090831542155613846263236805141090585331932145339718055875857157018510852176248031272419248573911998354239587587157830782446559008393076144761176799690034691298870022190\nhint = 5491796378615699391870545352353909903258578093592392113819670099563278086635523482350754035015775218028095468852040957207028066409846581454987397954900268152836625448524886929236711403732984563866312512753483333102094024510204387673875968726154625598491190530093961973354413317757182213887911644502704780304\n\"\"\"\n```\n\nrsa加密公式的考察，不难，也能一把梭\n\n```python\nimport math\nfrom Crypto.Util.number import long_to_bytes\n\n# 已知参数\nn = 83917281059209836833837824007690691544699901753577294450739161840987816051781770716778159151802639720854808886223999296102766845876403271538287419091422744267873129896312388567406645946985868002735024896571899580581985438021613509956651683237014111116217116870686535030557076307205101926450610365611263289149\nc = 69694813399964784535448926320621517155870332267827466101049186858004350675634768405333171732816667487889978017750378262941788713673371418944090831542155613846263236805141090585331932145339718055875857157018510852176248031272419248573911998354239587587157830782446559008393076144761176799690034691298870022190\nhint = 5491796378615699391870545352353909903258578093592392113819670099563278086635523482350754035015775218028095468852040957207028066409846581454987397954900268152836625448524886929236711403732984563866312512753483333102094024510204387673875968726154625598491190530093961973354413317757182213887911644502704780304\ne = 65537\n\n# 关键推导：(p+q)² = (p-q)² + 4pq，而hint = (p+q)² mod n = (p-q)² mod n\n# 计算s = (p+q)² = 4n + hint（因为hint = (p-q)²且小于n）\ns = 4 * n + hint\n\n# 求s的平方根得到p+q\ns_sqrt = math.isqrt(s)\nassert s_sqrt * s_sqrt == s, \"s不是完全平方数，推导错误\"\n\n# 求hint的平方根得到p-q\nd_sqrt = math.isqrt(hint)\nassert d_sqrt * d_sqrt == hint, \"hint不是完全平方数，推导错误\"\n\n# 计算p和q\np = (s_sqrt + d_sqrt) // 2\nq = (s_sqrt - d_sqrt) // 2\n\n# 验证p*q是否等于n\nassert p * q == n, \"分解n失败\"\n\n# 计算欧拉函数φ(n)\nphi = (p - 1) * (q - 1)\n\n# 计算私钥d（e的逆元）\nd = pow(e, -1, phi)\n\n# 解密得到明文m\nm = pow(c, d, n)\n\n# 转换为flag\nflag = long_to_bytes(m)\nprint(\"解密得到的flag:\", flag.decode())\n\n```\n\n\n\nflag：   moectf{Ma7hm4t1c5_is_@_k1nd_0f_a2t}\n\n\n\n## 5.**ezlegendre**\n\n原题：\n\n```python\nfrom Crypto.Util.number import getPrime, bytes_to_long\nfrom secret import flag\n\np = 258669765135238783146000574794031096183\na = 144901483389896508632771215712413815934\n\ndef encrypt_flag(flag):\n    ciphertext = []\n    plaintext = ''.join([bin(i)[2:].zfill(8) for i in flag])\n    for b in plaintext:\n        e = getPrime(16)\n        d = randint(1,10)\n        n = pow(a+int(b)*d, e, p)\n        ciphertext.append(n)\n    return ciphertext\n\nprint(encrypt_flag(flag))\n\n```\n\n数据都给你了，直接读数据得出未知数就好了\n\n```python\nfrom Crypto.Util.number import isPrime\nfrom tqdm import tqdm\n\n# 已知参数\np = 258669765135238783146000574794031096183\na = 144901483389896508632771215712413815934\n\n# 假设我们有部分密文\nciphertext = [102230607782303286066661803375943337852, 196795077203291879584123548614536291210, 41820965969318717978206410470942308653, 207485265608553973031638961376379316991, 126241934830164184030184483965965358511, 20250852993510047910828861636740192486, 103669039044817273633962139070912140023, 97337342479349334554052986501856387313, 159127719377115088432849153087501377529, 45764236700940832554086668329121194445, 35275004033464216369574866255836768148, 52905563179465420745275423120979831405, 17032180473319795641143474346227445013, 29477780450507011415073117531375947096, 55487351149573346854028771906741727601, 121576510894250531063152466107000055279, 69959515052241122548546701060784004682, 173839335744520746760315021378911211216, 28266103662329817802592951699263023295, 194965730205655016437216590690038884309, 208284966254343254016582889051763066574, 137680272193449000169293006333866420934, 250634504150859449051246497912830488025, 124228075953362483108097926850143387433, 232956176229023369857830577971626577196, 149441784891021006224395235471825205661, 118758326165875568431376314508740278934, 222296215466271835013184903421917936512, 49132466023594939909761224481560782731, 406286678537520849308828749751513339, 215122152883292859254246948661946520324, 81283590250399459209567683991648438199, 150395133067480380674905743031927410663, 5710878479977467762548400320726575491, 83627753774286426170934105100463456109, 164968224377869331545649899270867630850, 241057183685774160581265732812497247167, 109136287048010096863680430193408099828, 116313129605409961931811582899075031153, 202739016625709380026000805340243458300, 25408225921774957745573142542576755590, 151336258796933656160956289529558246702, 2947189044370494063643525166023973095, 228678413963736672394976193093568181979, 40627063032321835707220414670018641024, 55446789315226949622969082042881319148, 32219108726651509070669836923591948459, 134454924722414419191920784435633637634, 97952023967728640730045857104376826039, 20659076942504417479953787092276592682, 93281761173713729777326842152860901050, 133634773495582264000160065317239987936, 79976720152435218818731114555425458470, 234654694673289327542859971371886984118, 51332273108989067644245919615090753756, 134120280423303717489979349737802826605, 182001158305920226320085758522717203725, 98408798757865562737462169470346158516, 78200435603900368619334272308272773797, 232796357836930341547987600782979821555, 589106968861493082018132081244848952, 24186003230092331554886767628744415123, 236070626491251466741246103662922841423, 238699080882667864827094121849090696547, 141659873734297659078160283051728812410, 228977113517120063860252637394240795552, 236613527842969921794004708284265628300, 145522034982744654991661857596541755396, 249608374387044047328725156440984678776, 325110572051913836681821746093704556, 171492052199838424502681030556098576483, 156498865212994371079795360268866413702, 196747701509389071931992996873572785043, 70811811603137896158765356680364490781, 83672551582385607422240464086955462541, 117961603623637997457153763936550310698, 224448821395214505399297116719025174412, 4598815373009554321735225938200807251, 194892269604260726530091473301914449005, 127484628022155760909820605666827662175, 208706240846212140439291547368645656474, 14102286481104997303651684152195298336, 6129503335471304345451795609683770657, 103799668048593149396277157385628834185, 185813375481410513002496683918106238351, 233491689316882978147517340230794025796, 46274083097168831187719988888816378961, 119487551553664772614629936285345836934, 84340029922118279362389419277915602509, 88253743193124528032223101368846247085, 227895357640018330099501504941388167432, 92189947144174433744195727086236905626, 83114957902192791332190922428847199876, 173535754090441937731619031520699325122, 192309407933789484835602071782330798398, 255421921600128994923738650157598053776, 155535082468314012733563336837641958625, 49064798421022327310707074253263463055, 161216416471071644769301963857685054031, 252480348817188872515008985698620059851, 75854882798183185741756645038434215611, 256065006192683011190132982128640682537, 87507510173514424105732562474643251223, 163309795132131534875147566536485288212, 253583084320404985699510129361746869059, 253300112521651972637580307326576568313, 239027717080729650738678032571840680727, 117444657686971615526398894470673026034, 215470942802874046857958621181684551426, 58767098748728136687851735836323448020, 249357164697409977883764098879705065535, 174705348385893117518084017669958647345, 211108767177375215605155301209259781232, 57829566748907062397366819001461941421, 88265742700024922112974862134385921564, 80952107622167923709226013231566882261, 236078582132483864916117213281193714198, 193448482646563141692726575550417225891, 245972799166806058223048506073553726233, 10132977708896091601871557249244373666, 201785418152654519825849206312616081028, 15169816744048531212384271865884567710, 122545328290385950043826822277924297182, 202918646192255177261567701479991753600, 32696887488223731055835744711207261936, 88319352182963224921157305627381030375, 92381505322264045777004475690398861771, 189745654013352563126968415157143821842, 152254915005998949299817641843658795579, 198032433618991362619448347415342295581, 84073892809321676935569114878067118319, 82243805869584256211699602267760745768, 61994229948266781537191603999495995852, 253668765227759797787675352833142466255, 38865376724677211964966907748953557125, 134615436811268347303232550777225944929, 176932422465426107783498083830285780588, 207573742393618910694054452362826628208, 200033130835394442710748301293534928706, 127536063935293533700918451145963158658, 219125698281820710910675956971948816959, 179795893258398750139395156587561075767, 69649628109726874051635160004398498964, 241433717681314766463039563422535023524, 202664264135718511331695232476272832350, 205151096657425932591242432052912914182, 210305712465948130683966275157181140301, 196555690055906934925300527324955477733, 66817932643964538216259564711698986077, 95270796440975607179107356182889534333, 123226880424532374188134357659879826495, 53506495440223773538415807620524749240, 19253217887083870834249774316467647628, 165699356396365023442008488156823647206, 107809175498119862854792975070673056027, 250453989887421415931162217952559757164, 171492052199838424502681030556098576483, 133778166882550119563444625306816232463, 149009301604122447269581792013291889175, 9982418254629616281350713836647603294, 203486292122499140756846060502464655972, 157686696123400087437836943220926921848, 88338919773540412238116717043122711811, 113265824169274322024623493892867211478, 5549372099744960679418616304893848801, 12431828907518852062050349123660880165, 183957934738536914983862053251433028750, 42027289270308356303682029801998790750, 117406080036483925915502666019795783905, 154312255292300186042636734144948304054, 143706917273862261295046346995206133170, 50088136095338601440516112338120787526, 250634504150859449051246497912830488025, 8073010289877796888705519374892639903, 40049582814576788803483039836229025416, 227012342545923833983403067401561291645, 201776603581414625783054400184026088994, 55474945478884522762318445841998187357, 221515530211550293408010846844218019597, 172650752042211610909190315288155597255, 67046194931321172530462444254204111483, 207435868835185636819659137800256834557, 188063222224545200294767050268070647452, 58099349021260301211275261896736590564, 23598877596106927870697531042828774738, 58546308516383335224739442370238545000, 58125311541947998710088435169901475101, 238219925698115060748249043752036454438, 203910234934340893915761800653823457631, 190854889967769152565565000250829375099, 37573623890629846209257307181880876288, 226220240200270623843038279593586687278, 144246075981535671790438155977352345487, 14665770553338784222331493932533448756, 37992062606775322664977502677838074649, 47370175759976523832233910009306151684, 97047813247943880266351445874642842468, 237607444658797800072728280983357541134, 174853113478993738890584814806707459112, 17104608155861584438824639050715857607, 83639027011494777283064583268678718843, 237826165608708003941944469905843354705, 231707683915242052796886276983724691027, 146089830852925550139294146760718642221, 25604562707667550478623425477029052785, 108577663147976992047614498924706939204, 69040319834829375335287614995435269276, 169933229202934375632745753379104389929, 72693008284867494808267387710985847974, 158548279589965576940349068403862889270, 49458101234256610254825879149914255140, 24389558269688411084589654047215902968, 210567980379246548727819953025607019254, 110423375132252997825868399832298953831, 109589895677661968369424757992411668628, 66177577069199763925999718357846633613, 83602293803708828242273186265396676466, 172226271050176278536911356541786290551, 85799805809703976643034084477579915867, 179399990302447560847151603157937241688, 81687654752229170984692833277072534294, 160766441640281044008645821822296569868, 100306680611749750243920501921769642984, 42195187332833922597871030332905266026, 238918420772178508359295233180536910768, 221685929158944699801776621298532178665, 209349638787804999657456057184702655805, 183953393268431043006359511952782903516, 137364333131365794683132159746962959967, 15637689373906596015395350692459218048, 145956368418289159411911667337899986262, 197987711355277581048877821432652325207, 125421308989313724733467092345532539875, 90525081516582408488547894471421476595, 107405840115256692042814887586009104950, 71587500700172519801649824611045199280, 10155721246869986043302768283257682883, 100522792569358427133597834727509523742, 244473925018526409824670892423775482110, 50746138425761666610345252577572889037, 142188269919422432629363225167297071042, 8235113926890598897465093754260801947, 174540885017405784646782293055852044631, 171949847901434672429841435895697323702, 34391199559497599434575002007581170988, 7337868660819385932166025474594964373, 89608475952042154068811282935241824949, 162561097613906905390170334328135062933, 252566077272083954707900007055640560669, 4284637988579219107997224848114896904, 220026371387782427901244689037957398829, 86019060485320999498155965142619258089, 19304861731281576405798605142335886482, 123188238667151068575810494833929221938, 125089740978532716086813732154638565196, 252061524500088702951562270741214799294, 89528875472312768404823823905699760649, 63307407053590054220492282094909190524, 24389558269688411084589654047215902968, 43835777110183833958990705735152973942, 196543204310466258426232803779025620993, 225032412767857179129234169288824097261, 50292890880286260984317361296226049436, 64928956886509273090981701066528078331, 25408225921774957745573142542576755590, 235921667882292842303120860570747218086, 217132603855089441017750752624514343437, 11106129204256119599329380588789107048, 147501327490657927610543345089238991876, 158091159632919983870444592039392730373, 254215886971254771885657857148535673338, 129869106474614345624950211566868568809, 10425702332274469498479699675668087022, 136595953187315682777976356839442311764, 1607792140397737044118662059498732982, 23710000155612873207506044342091514799, 118571340370877720354330132780832828911, 194624784476702188629452374731837038856, 51332273108989067644245919615090753756, 240921043405288511960365826273938845156, 158670188709175825212687487436006138030, 133641825913283256858340618209700716053, 43054466484232130048301271684438593412, 20361972967806283315536154125012604660, 135700832615866572032111395529532615300, 160609169788639387827865051539103507016, 100576279475451993660766480883708996211, 215424685541583305069271024253690375127, 60018956375784961551937423504137141702, 107997941230633604720421526632224279451, 219482010609171816035007605036664317041, 22173526221024380740269311947729076493, 249746554302052221287371350978970766087, 93207359085331319264650563354951254906, 221421697282310997113867048083058096452, 61834092635779365101011109381392037516, 162215218701897689647766394615098617152, 141856131587452385513407955541400099703, 177910903795887762773545874929605680469, 228832704523723308335513552177377803295, 229427981969125094398744034150988525118, 217938760689082034514008764751385239765, 3238055163645731541423094980789895030, 42308449860804765793467328093112118974, 254764518926620089428032312378507653680, 215733901156118606036318409454786603209, 59640829345183339336712595595022506261, 33515071724475649656070325837411550208, 51175659069843551646353202764296812462, 211462959696081863041546889096760952490, 230559603938699838189391087728971115767, 85878911733601049548471257838175175563, 214134904074265214033878852207103328297, 160702405980652445507529591230654474171, 223755040649990285320102091954198427148, 166476753890268002826149533120107157745, 26283916639129998224675164834425763384, 232971495542024495583092055361321729894, 79741799146769724681649849525636816379, 228506526471280046809909301748098760369, 167502422063741368765891061653686283332, 26984184590668253713951516794937308166, 105952393031190074432183821281493254, 113823192955281698937767041115166174652, 93264047694114869263275726820602569731, 55481974783112950660682138071588408040, 108961894273530837550182447112767144669, 47975793549419083945738147934068241928, 204024371586357035343484206754422857590, 251859351272989525849999231358507018068, 75939709807860493804628805619699991501, 129031774446142139804436921156668129187, 110764318451937254261883856778359218969, 246404864722813298477426808193494673610, 153818236564405157581869620439634140065, 246125932167584353084676586883038397451]\n\n# 预计算16位素数\nprimes_16bit = [i for i in range(2, 2**16) if isPrime(i)]\n\ndef decrypt_bit(n):\n    for b in [0, 1]:  # 尝试0和1\n        for d in range(1, 11):  # 尝试d从1到10\n            for e in primes_16bit:  # 尝试所有16位素数\n                if pow(a + b*d, e, p) == n:\n                    return str(b)\n    return '?'  # 未找到\n\n# 解密所有位\nplain_bits = []\nfor n in tqdm(ciphertext):\n    plain_bits.append(decrypt_bit(n))\n\n# 将二进制字符串转换回字节\nplaintext = ''.join(plain_bits)\nflag = bytes(int(plaintext[i:i+8], 2) for i in range(0, len(plaintext), 8))\nprint(flag)\n```\n\nflag：b'moectf{Y0u_h@v3_ju5t_s01v3d_7h1s_pr0b13m!}'\n\n\n\n\n\n总结：为数不多能ak的密码（如果后续不上题的话），刚学两三个月的密码手适合做，可以增强一下信心以及练一下基本功\n\n最后，测试一下图片：\n\n\n\n![099f596209ac5396bf92b5f661c7ed24](2025moectf(Crypto)/099f596209ac5396bf92b5f661c7ed24.jpeg)\n\n哦，后续会继续上题","tags":["CTF","Crypto"],"categories":["CTF","Crypto"]}]