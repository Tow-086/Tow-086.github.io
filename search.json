[{"title":"2024BaseCTF（re）","url":"/2025/07/15/2024basectf（re）/","content":"\n\n\n# 2024basectf（re）\n\n## 1.You are good at IDA\n\n![](屏幕截图 2025-04-15 131137.png)\n\n用IDA打开文件，找到main先f5一下，然后再发现它让你shift+f12，所以试试，然后得到：\n\n![](屏幕截图 2025-04-15 130555.png)\n\n发现this is the second part，点击它，然后R之后，发现没有能R的东西，但是我们发现：`DATA XREF:`显示了哪个函数使用了这个字符串，双击可以跳转到那个函数，然后R。\n\n![](屏幕截图 2025-04-15 132125.png)\n\n然后，发现他告诉你最后一个在Interesting，找到它然后R\n\n\n\n\n\n![](屏幕截图 2025-04-15 131604.png)\n\n\n\n得到flag：BaseCTF{Y0u_4Re_900d_47_id4}\n\n\n\n\n\n## 2.UPX mini\n\nupx脱壳然后在ida里f5（反编译），然后发现这样：   //至于为什么要先脱壳，那是因为，我搜到的用upx就是先脱壳，哦，忘了脱壳图片了，现在贴吧：\n\n![](屏幕截图 2025-04-15 134839.png)\n\n\n\n![](屏幕截图 2025-04-15 134542.png)\n\n然后发现了一个base64格式的数据，==填充了，直接解码：\n\n![](屏幕截图 2025-04-15 134623.png)\n\n得出flag：BaseCTF{Hav3_@_g0od_t1m3!!!}\n\n\n\n## 3.ez_maze(还没会)（现在会了）\n\nf5:然后发现自己不会，问完ai，继续看wp：\n\n![](屏幕截图 2025-04-15 210900.png)\n\n然后这是c语言代码，开始读代码，u1s1有点看不懂，所以我问ai了，这是一个15*15的迷宫，然后我们shift+e导出数据，导出了一个文件export_results.txt。是迷宫的数据，hex的ASCII文件。然后解码定行长整理后成这样：\n\n这是工具：[文本行定长 - 锤子在线工具](https://www.toolhelper.cn/Char/TextLineSameLength)\n\n```\nx $ $ $ $ $ $ $ $ $ $ $ $ $ $ \n& & & & & & $ $ $ $ $ $ $ $ $ \n& $ & $ $ & $ $ & & & & & $ $ \n& $ & $ $ $ & & $ $ $ $ & $ $ \n& $ $ $ & & & $ $ $ $ $ & $ $ \n& $ $ $ & $ & & $ & $ $ $ $ $ \n& $ $ $ & $ & $ $ & & & $ $ $ \n& & & & & $ & & & & $ & $ $ $ \n$ $ $ $ $ $ & & & & & & $ $ $ \n$ $ $ $ $ $ & $ $ $ $ $ $ $ $ \n$ $ $ & & & & $ $ & & & $ $ $ \n$ $ $ & & & & & & & $ $ $ $ $ \n$ $ $ $ $ $ $ $ $ & $ $ & $ $ \n$ $ $ $ $ $ $ $ $ & $ & $ $ $ \n$ $ $ $ $ $ & & & & & & & & y \n```\n\n然后找到最短路径：sssssssddddwwwddsssssssdddsssddddd\n\n之后发现一点思路没有，然后问了问Beck_，好像是因为自己没找到，然后再找找发现了：\n\n![](屏幕截图 2025-05-08 202140.png)\n\n找到了他说让我md5一下（别骂我，我刚开始学re），这是工具[MD5在线加密/解密/破解—MD5在线](https://www.sojson.com/md5/)\n\n解密出：131b7d6e60e8a34cb01801ae8de07efe\n\n得出flag:BaseCTF{131b7d6e60e8a34cb01801ae8de07efe}\n\n\n\n## 4.BasePlus\n\n先看函数都用了啥：\n\n![](屏幕截图 2025-05-09 020848.png)\n\n布拉布拉说了一堆，大概意思就是让我们根据密文解密解出flag，至于为什么是密文呢？因为我是学密码的大概能看出是密文，然后我直接base了，然后乱码，额，开看wp\n\n发现她的encode函数：\n\n![](屏幕截图 2025-05-09 020836.png)\n\n对base64的结果进行了异或0xE，哦然后就简单了，我们直接先对密文异或回来，然后base64。base64失败，看到了他给的码表，以码表格式base64成功得出flag：\n\n[To Base64, XOR, From Base64 - CyberChef](https://cyberchef.org/#recipe=To_Base64('A-Za-z0-9%2B/%3D'/disabled)XOR({'option':'Hex','string':'0xE'},'Standard',false)From_Base64('/128GhIoPQROSTeUbADfgHijKLM%2Bn0pFWXY456xyzB7%3D39VaqrstJklmNuZvwcdEC',true,false)&input=bHZmekJpWmlPdzc8bGhGOGRET2ZFYm1JXWlAYmRjWmZFY156PmFEIQ)\n\n![](屏幕截图 2025-05-09 021632.png)\n\n\n\nBaseCTF{BA5e_DEcoD1N6_sEcr3t}\n\n\n\n## 5.ez_xor\n\n一个异或解密\n\n秘钥：\n\n- `v4 = 7499608`（十六进制为0x00727F58）\n- 密钥字节：`key = [0x58, 0x7F, 0x72]`\n\n，秘钥流生成：\n\nkey_stream[i] = i ^ key[i % 3]\n\n对于位置`i`，使用密钥字节`key[i % 3]`与索引`i`异或\n\n加密过程：\n\nencrypted[i] = flag[i] ^ key_stream[27 - i]\n\n用户输入的每个字节与密钥流中对称位置的字节异或\n\n目标字符串：\n\n- 28字节的固定值（从代码中提取）\n\n\n\n要获取flag就去执行逆过程：\n\nflag[i] = encrypted[i] ^ key_stream[27 - i]\n\n\n\n主函数：\n\n![image-20250706210342960](image-20250706210342960.png)\n\n秘钥流：\n\n![image-20250706210412012](image-20250706210412012.png)\n\n加密函数：\n\n![image-20250706210442981](image-20250706210442981.png)\n\npython脚本：\n\n```python\ndef main():\n    # 目标加密字符串（从反汇编代码中提取）\n    encrypted_data = bytes([\n        0x01, 0x09, 0x05, 0x25, 0x26, 0x2D, 0x0B, 0x1D, \n        0x24, 0x7A, 0x31, 0x20, 0x1E, 0x49, 0x3D, 0x67,\n        0x4D, 0x50, 0x08, 0x25, 0x2E, 0x6E, 0x05, 0x34,\n        0x22, 0x40, 0x3B, 0x25\n    ])\n    \n    # 初始密钥（来自v4 = 7499608）\n    v4 = 7499608\n    key_bytes = bytes([v4 & 0xFF, (v4 >> 8) & 0xFF, (v4 >> 16) & 0xFF])\n    \n    print(\"=\"*50)\n    print(\"逆向解密过程详解\")\n    print(\"=\"*50)\n    print(f\"1. 从 v4 = 7499608 (0x{v4:08X}) 提取密钥字节\")\n    print(f\"   key_bytes = [{', '.join(f'0x{b:02X}' for b in key_bytes)}]\")\n    \n    # 生成密钥流\n    key_stream = []\n    print(\"\\n2. 生成密钥流 (key_stream[i] = i ^ key_bytes[i % 3]):\")\n    for i in range(len(encrypted_data)):\n        key_index = i % 3\n        key_byte = key_bytes[key_index]\n        ks_byte = i ^ key_byte\n        key_stream.append(ks_byte)\n        print(f\"   i={i:2d}, key_index={key_index}, key_byte=0x{key_byte:02X}, \"\n              f\"ks_byte = {i:2d} ^ 0x{key_byte:02X} = 0x{ks_byte:02X}\")\n    \n    # 逆向计算flag\n    flag = []\n    print(\"\\n3. 计算flag (flag[i] = encrypted[i] ^ key_stream[27-i]):\")\n    for i in range(len(encrypted_data)):\n        reverse_index = len(encrypted_data) - 1 - i\n        key_byte = key_stream[reverse_index]\n        enc_byte = encrypted_data[i]\n        flag_byte = enc_byte ^ key_byte\n        flag.append(flag_byte)\n        print(f\"   i={i:2d}, rev_i={reverse_index:2d}, \"\n              f\"enc=0x{enc_byte:02X}, key=0x{key_byte:02X}, \"\n              f\"flag_char=0x{flag_byte:02X} ('{chr(flag_byte)}')\")\n    \n    # 转换为字符串\n    flag_str = ''.join(chr(b) for b in flag)\n    \n    print(\"\\n\" + \"=\"*50)\n    print(\"最终结果\")\n    print(\"=\"*50)\n    print(f\"解密后的Flag: {flag_str}\")\n    \n    # 验证过程\n    print(\"\\n\" + \"=\"*50)\n    print(\"验证过程\")\n    print(\"=\"*50)\n    print(\"重新加密flag以验证是否匹配目标字符串:\")\n    \n    # 重新加密\n    re_encrypted = []\n    for i in range(len(flag)):\n        reverse_index = len(flag) - 1 - i\n        key_byte = key_stream[reverse_index]\n        enc_byte = flag[i] ^ key_byte\n        re_encrypted.append(enc_byte)\n        match = \"✓\" if enc_byte == encrypted_data[i] else \"✗\"\n        print(f\"   i={i:2d}, flag_char='{chr(flag[i])}', \"\n              f\"key=0x{key_byte:02X}, enc=0x{enc_byte:02X}, \"\n              f\"target=0x{encrypted_data[i]:02X} {match}\")\n    \n    if bytes(re_encrypted) == encrypted_data:\n        print(\"\\n验证成功! 重新加密结果与目标字符串完全匹配\")\n    else:\n        print(\"\\n验证失败! 请检查解密过程\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nflag：BaseCTF{X0R_I5_345Y_F0r_y0U}\n\n\n\n## 6.UPX\n\n脱壳后发现只有start，然后用010看到内部结构将小写改为大写再脱壳，得到exe分析\n\n![image-20250706215119609](image-20250706215119609.png)\n\n\n\n脱壳然后：\n\n![image-20250706234849522](image-20250706234849522.png)\n\nb64函数：\n\n![image-20250706234910344](image-20250706234910344.png)\n\nmap中这个：\n\n![image-20250706234950164](image-20250706234950164.png)\n\n\n\n找到映射表，然后写代码解密：\n\n![image-20250706235037266](image-20250706235037266.png)\n\n\n\n```python\n# 自定义Base64解码实现 - 用于逆向工程中的特殊Base64编码\n# 从工具中提取的自定义Base64映射表（前64个字符）\n# 注意：原始字符串中有重复字符（如'A'），可能需要手动调整\ncustom_b64_map = \"A,.1fgvw#`/2ehux$~\\\"3dity%_;4cjsz^+{5bkrA&=}6alqB*-[70mpC()]89noX\"[:64]\n\n# 标准Base64映射表（用于参考和转换）\nstandard_b64_map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n\n# 构建反向映射表：将自定义字符映射到标准Base64的索引位置\n# 例如：若自定义表中'$'在位置0，则reverse_map['$'] = 0\nreverse_map = {c: i for i, c in enumerate(custom_b64_map)}\n\ndef custom_b64decode(ciphertext):\n    \"\"\"\n    使用自定义映射表解码Base64字符串\n    \n    步骤：\n    1. 将每个自定义字符转换为对应的6位二进制值\n    2. 将所有6位二进制片段连接成完整的二进制字符串\n    3. 将二进制字符串按每8位分割，转换为字节数据\n    4. 尝试将字节数据解码为ASCII字符串\n    \"\"\"\n    # 存储所有6位二进制片段的连接结果\n    bits = \"\"\n    \n    # 遍历密文中的每个字符\n    for c in ciphertext:\n        # 检查字符是否在自定义映射表中\n        if c in reverse_map:\n            # 将字符转换为对应的6位二进制值（补前导零）\n            # 例如：索引0 -> '000000', 索引1 -> '000001', 依此类推\n            bits += f\"{reverse_map[c]:06b}\"\n    \n    # 存储解码后的字节数据\n    bytes_data = bytearray()\n    \n    # 将二进制字符串按每8位分割，转换为字节\n    for i in range(0, len(bits), 8):\n        byte = bits[i:i+8]\n        # 确保每次处理完整的8位（最后一组可能不足8位，需忽略）\n        if len(byte) == 8:\n            bytes_data.append(int(byte, 2))\n    \n    # 尝试将字节数据解码为ASCII字符串（CTF中常见的flag格式）\n    # 注意：如果flag包含非ASCII字符，这里可能需要尝试其他编码\n    return bytes_data.decode('ascii')\n\n# 待解码的目标密文（从逆向工程中获取）\nciphertext = \"$rg7_dhd~Alidg+zeyhz`vnz_d,7sy0=\"\n\n# 调用自定义解码函数\nplaintext = custom_b64decode(ciphertext)\n\n# 输出解码结果\nprint(plaintext)\n\n# 验证是否符合常见的CTF flag格式\n# 例如：BaseCTF{...}, CTF{...}, flag{...}等\n# 注意：需根据具体题目要求调整验证逻辑\n```\n\nflag: BaseCTF{UPX_1s_$o_e@sy})\n\n\n\n## 7.lk\n\n\n\n对于这种超复杂的线性方程，我们可以用python的z3solver库解决\n\n\n\n打断点调试：\n\n![image-20250707151407732](image-20250707151407732.png)\n\n![image-20250707151349739](image-20250707151349739.png)\n\n\n\n```python\nfrom z3 import *\n\n# 定义未知数\na = [Int('a[%d]' % i) for i in range(21)]\n\n# 创建求解器\ns = Solver()\n\n# 添加加权和的条件\ns.add(948 * a[20]\n     + 887 * a[19]\n     + 410 * a[18]\n     + 978 * a[17]\n     + 417 * a[16]\n     + 908 * a[15]\n     + 965 * a[14]\n     + 987 * a[13]\n     + 141 * a[12]\n     + 257 * a[11]\n     + 323 * a[10]\n     + 931 * a[9]\n     + 773 * a[8]\n     + 851 * a[7]\n     + 758 * a[6]\n     + 891 * a[5]\n     + 575 * a[4]\n     + 616 * a[3]\n     + 860 * a[2]\n     + 283 * a[1] == 913686)\ns.add( 938 * a[20]\n     + 490 * a[19]\n     + 920 * a[18]\n     + 50 * a[17]\n     + 568 * a[16]\n     + 68 * a[15]\n     + 35 * a[14]\n     + 708 * a[13]\n     + 938 * a[12]\n     + 718 * a[11]\n     + 589 * a[10]\n     + 954 * a[9]\n     + 974 * a[8]\n     + 62 * a[7]\n     + 580 * a[6]\n     + 80 * a[5]\n     + 111 * a[4]\n     + 151 * a[3]\n     + 421 * a[2]\n     + 148 * a[1] == 630335)\ns.add( 908 * a[20]\n     + 590 * a[19]\n     + 668 * a[18]\n     + 222 * a[17]\n     + 489 * a[16]\n     + 335 * a[15]\n     + 778 * a[14]\n     + 622 * a[13]\n     + 95 * a[12]\n     + 920 * a[11]\n     + 932 * a[10]\n     + 892 * a[9]\n     + 409 * a[8]\n     + 392 * a[7]\n     + 11 * a[6]\n     + 113 * a[5]\n     + 948 * a[4]\n     + 674 * a[3]\n     + 506 * a[2]\n     + 182 * a[1] == 707525)\ns.add( 479 * a[20]\n     + 859 * a[19]\n     + 410 * a[18]\n     + 399 * a[17]\n     + 891 * a[16]\n     + 266 * a[15]\n     + 773 * a[14]\n     + 624 * a[13]\n     + 34 * a[12]\n     + 479 * a[11]\n     + 465 * a[10]\n     + 728 * a[9]\n     + 447 * a[8]\n     + 427 * a[7]\n     + 890 * a[6]\n     + 570 * a[5]\n     + 716 * a[4]\n     + 180 * a[3]\n     + 571 * a[2]\n     + 707 * a[1] == 724203)\ns.add( 556 * a[20]\n     + 798 * a[19]\n     + 380 * a[18]\n     + 716 * a[17]\n     + 71 * a[16]\n     + 901 * a[15]\n     + 949 * a[14]\n     + 304 * a[13]\n     + 142 * a[12]\n     + 679 * a[11]\n     + 459 * a[10]\n     + 814 * a[9]\n     + 282 * a[8]\n     + 49 * a[7]\n     + 873 * a[6]\n     + 169 * a[5]\n     + 437 * a[4]\n     + 199 * a[3]\n     + 771 * a[2]\n     + 807 * a[1] == 688899)\ns.add( 465 * a[20]\n     + 898 * a[19]\n     + 979 * a[18]\n     + 198 * a[17]\n     + 156 * a[16]\n     + 831 * a[15]\n     + 856 * a[14]\n     + 322 * a[13]\n     + 25 * a[12]\n     + 35 * a[11]\n     + 369 * a[10]\n     + 917 * a[9]\n     + 522 * a[8]\n     + 654 * a[7]\n     + 235 * a[6]\n     + 385 * a[5]\n     + 469 * a[4]\n     + 231 * a[3]\n     + 496 * a[2]\n     + 83 * a[1] == 604784)\ns.add( 305 * a[20]\n     + 928 * a[19]\n     + 260 * a[18]\n     + 793 * a[17]\n     + 787 * a[16]\n     + 708 * a[15]\n     + 758 * a[14]\n     + 236 * a[13]\n     + 688 * a[12]\n     + 747 * a[11]\n     + 711 * a[10]\n     + 195 * a[9]\n     + 50 * a[8]\n     + 648 * a[7]\n     + 787 * a[6]\n     + 376 * a[5]\n     + 220 * a[4]\n     + 33 * a[3]\n     + 194 * a[2]\n     + 585 * a[1] == 665485)\ns.add( 767 * a[20]\n     + 573 * a[19]\n     + 22 * a[18]\n     + 909 * a[17]\n     + 598 * a[16]\n     + 588 * a[15]\n     + 136 * a[14]\n     + 848 * a[12]\n     + 964 * a[11]\n     + 311 * a[10]\n     + 701 * a[9]\n     + 653 * a[8]\n     + 541 * a[7]\n     + 443 * a[6]\n     + 7 * a[5]\n     + 976 * a[4]\n     + 803 * a[3]\n     + 273 * a[2]\n     + 859 * a[1] == 727664)\ns.add( 776 * a[20]\n     + 59 * a[19]\n     + 507 * a[18]\n     + 164 * a[17]\n     + 397 * a[16]\n     + 744 * a[15]\n     + 377 * a[14]\n     + 768 * a[13]\n     + 456 * a[12]\n     + 799 * a[11]\n     + 9 * a[10]\n     + 215 * a[9]\n     + 365 * a[8]\n     + 181 * a[7]\n     + 634 * a[6]\n     + 818 * a[5]\n     + 81 * a[4]\n     + 236 * a[3]\n     + 883 * a[2]\n     + 95 * a[1] == 572015)\ns.add( 873 * a[20]\n     + 234 * a[19]\n     + 381 * a[18]\n     + 423 * a[17]\n     + 960 * a[16]\n     + 689 * a[15]\n     + 617 * a[14]\n     + 240 * a[13]\n     + 933 * a[12]\n     + 300 * a[11]\n     + 998 * a[10]\n     + 773 * a[9]\n     + 484 * a[8]\n     + 905 * a[7]\n     + 806 * a[6]\n     + 792 * a[5]\n     + 606 * a[4]\n     + 942 * a[3]\n     + 422 * a[2]\n     + 789 * a[1] == 875498)\ns.add( 766 * a[20]\n     + 7 * a[19]\n     + 283 * a[18]\n     + 900 * a[17]\n     + 211 * a[16]\n     + 305 * a[15]\n     + 343 * a[14]\n     + 696 * a[13]\n     + 590 * a[12]\n     + 736 * a[11]\n     + 817 * a[10]\n     + 603 * a[9]\n     + 414 * a[8]\n     + 828 * a[7]\n     + 114 * a[6]\n     + 845 * a[5]\n     + 175 * a[4]\n     + 212 * a[3]\n     + 898 * a[2]\n     + 988 * a[1] == 714759)\ns.add( 220 * a[20]\n     + 30 * a[19]\n     + 788 * a[18]\n     + 106 * a[17]\n     + 574 * a[16]\n     + 501 * a[15]\n     + 366 * a[14]\n     + 952 * a[13]\n     + 121 * a[12]\n     + 996 * a[11]\n     + 735 * a[10]\n     + 689 * a[9]\n     + 998 * a[8]\n     + 689 * a[7]\n     + 729 * a[6]\n     + 886 * a[5]\n     + 860 * a[4]\n     + 70 * a[3]\n     + 466 * a[2]\n     + 961 * a[1] == 778853)\ns.add( 313 * a[20]\n     + 748 * a[19]\n     + 522 * a[18]\n     + 864 * a[17]\n     + 156 * a[16]\n     + 362 * a[15]\n     + 283 * a[14]\n     + 49 * a[13]\n     + 316 * a[12]\n     + 79 * a[11]\n     + 136 * a[10]\n     + 299 * a[9]\n     + 271 * a[8]\n     + 604 * a[7]\n     + 907 * a[6]\n     + 540 * a[5]\n     + 141 * a[4]\n     + 620 * a[3]\n     + 701 * a[2]\n     + 866 * a[1] == 584591)\ns.add( 922 * a[20]\n     + 399 * a[19]\n     + 425 * a[18]\n     + 26 * a[17]\n     + 159 * a[16]\n     + 224 * a[15]\n     + 438 * a[14]\n     + 770 * a[13]\n     + 144 * a[12]\n     + 406 * a[11]\n     + 110 * a[10]\n     + 991 * a[9]\n     + 749 * a[8]\n     + 701 * a[7]\n     + 646 * a[6]\n     + 147 * a[5]\n     + 979 * a[4]\n     + 674 * a[3]\n     + 999 * a[2]\n     + 913 * a[1] == 717586)\ns.add( 13 * a[20]\n     + 537 * a[19]\n     + 225 * a[18]\n     + 421 * a[17]\n     + 153 * a[16]\n     + 484 * a[15]\n     + 654 * a[14]\n     + 743 * a[13]\n     + 779 * a[12]\n     + 74 * a[11]\n     + 325 * a[10]\n     + 439 * a[9]\n     + 797 * a[8]\n     + 41 * a[7]\n     + 784 * a[6]\n     + 269 * a[5]\n     + 454 * a[4]\n     + 725 * a[2]\n     + 164 * a[1] == 537823)\ns.add( 591 * a[20]\n     + 210 * a[19]\n     + 874 * a[18]\n     + 204 * a[17]\n     + 485 * a[16]\n     + 42 * a[15]\n     + 433 * a[14]\n     + 176 * a[13]\n     + 436 * a[12]\n     + 634 * a[11]\n     + 82 * a[10]\n     + 978 * a[9]\n     + 818 * a[8]\n     + 683 * a[7]\n     + 404 * a[6]\n     + 562 * a[5]\n     + 41 * a[4]\n     + 789 * a[3]\n     + 200 * a[2]\n     + 220 * a[1] == 587367)\ns.add( 584 * a[20]\n     + 597 * a[19]\n     + 928 * a[18]\n     + 532 * a[17]\n     + 902 * a[16]\n     + 858 * a[15]\n     + 820 * a[14]\n     + 240 * a[13]\n     + 124 * a[12]\n     + 899 * a[11]\n     + 848 * a[10]\n     + 822 * a[9]\n     + 409 * a[8]\n     + 491 * a[7]\n     + 587 * a[6]\n     + 715 * a[5]\n     + 410 * a[4]\n     + 268 * a[3]\n     + 721 * a[2]\n     + 915 * a[1] == 842245)\ns.add( 421 * a[20]\n     + 302 * a[19]\n     + 327 * a[18]\n     + 180 * a[17]\n     + a[16] * 512\n     + 160 * a[15]\n     + 623 * a[14]\n     + 28 * a[13]\n     + 411 * a[12]\n     + 53 * a[11]\n     + 633 * a[10]\n     + 560 * a[9]\n     + 623 * a[8]\n     + 477 * a[7]\n     + 901 * a[6]\n     + 287 * a[5]\n     + 149 * a[4]\n     + 726 * a[3]\n     + 934 * a[2]\n     + 875 * a[1] == 610801)\ns.add( 838 * a[20]\n     + 434 * a[19]\n     + 792 * a[18]\n     + 649 * a[17]\n     + 462 * a[16]\n     + 170 * a[15]\n     + 980 * a[14]\n     + 15 * a[13]\n     + 295 * a[12]\n     + 495 * a[11]\n     + 666 * a[10]\n     + 934 * a[9]\n     + 17 * a[8]\n     + 69 * a[7]\n     + 367 * a[6]\n     + 780 * a[5]\n     + 291 * a[4]\n     + 834 * a[3]\n     + 587 * a[2]\n     + 133 * a[1] == 653127)\ns.add( 41 * a[20]\n     + 422 * a[19]\n     + 420 * a[18]\n     + 224 * a[17]\n     + 475 * a[16]\n     + 854 * a[15]\n     + 233 * a[14]\n     + 179 * a[13]\n     + 620 * a[12]\n     + 69 * a[11]\n     + 42 * a[10]\n     + 684 * a[9]\n     + 300 * a[8]\n     + 745 * a[7]\n     + 894 * a[6]\n     + 554 * a[5]\n     + 495 * a[4]\n     + 66 * a[3]\n     + 316 * a[2]\n     + 391 * a[1] == 533470 )\n\n# 在求解器中添加字节的范围限制：0到255\nfor i in range(1, 21):\n    s.add(a[i] >= 0, a[i] <= 255)\n\n# 检查是否有解\nif s.check() == sat:\n    model = s.model()\n    result = ''.join([chr(model[a[i]].as_long()) for i in range(1, 21)])\n    print(\"解是:\", result)\nelse:\n    print(\"没有解\")\n\n```\n\n\n\nflag:  BaseCTF{CDBBDCAAABBDBCCBCCAC}\n\n\n\n## 8.喝杯下午茶\n\n主函数可以在这里找：\n\n![image-20250707180931063](image-20250707180931063.png)\n\n![image-20250707180956066](image-20250707180956066.png)\n\n![image-20250707181011691](image-20250707181011691.png)\n\n大概是这样：\n\n![image-20250707181159001](image-20250707181159001.png)\n\n\n\nv5是key，v6是密文\n\n```python\ndef decrypt_block(left, right, key):\n    k0, k1, k2, k3 = key\n    delta = 1131796\n    total_delta = 32 * delta\n    for _ in range(32):\n        right = (right - ((k3 + (left >> 5)) ^ (left + total_delta) ^ (k2 + (left << 4)))) & 0xFFFFFFFF\n        left = (left - ((k1 + (right >> 5)) ^ (right + total_delta) ^ (k0 + (right << 4)))) & 0xFFFFFFFF\n        total_delta -= delta\n    return left, right\n\n# Key and ciphertext\nkey = [0x11223344, 0x55667788, 0x99AABBCC, 0xDDEEFF11]\nciphertext = [\n    0x94B1F1E7, 0x21D5D352,\n    0x5247793D, 0x040D1C97,\n    0xF36E7F74, 0x9C53F70F,\n    0x6AEACFD8, 0x6F9F06F4,\n    0xEAFD9E2E, 0x32B655F7\n]\n\n# Decrypt each block\nflag = b\"\"\nfor i in range(0, 10, 2):\n    left, right = ciphertext[i], ciphertext[i+1]\n    dec_left, dec_right = decrypt_block(left, right, key)\n    flag += dec_left.to_bytes(4, 'little')\n    flag += dec_right.to_bytes(4, 'little')\n\nprint(flag.decode())\n```\n\nflag: BaseCTF{h3r3_4_cuP_0f_734_f0R_y0U!!!!!!}\n\n\n\n\n\n## 9.Ezpy\n\n可以用网址：https://tool.lu/   这个里的来解pyc\n\n先转exe为pyc，再把pyc反编译成py。**使用方法放到G:\\Agent\\Cybersecurity\\reverse\\un_python_gui了**\n\n![image-20250715172853547](image-20250715172853547.png)\n\n一个简单的RC4加密解密\n\n\n\n```python\nkey = 'yOU_f1nd_m3'\nkeykey = [66, 97, 115, 101]  # 对应 'Base' 的 ASCII 码\n\nenc = b'\\xe6\\xaeC~F\\xf2\\xe3\\xbb\\xac\\x9a-\\x02U\\x85p\\xeb\\x19\\xd1\\xe4\\xc93sG\\xb0\\xeb1\\xb5\\x05\\x05\\xc3\\xd7\\x00\\x18+D\\xbc\\x0cO\\x9em\\xf1\\xbd'\n\ndef init_Sbox(seed):\n    k_b = [ord(seed[i % len(seed)]) for i in range(256)]\n    s = list(range(256))\n    j = 0\n    for i in range(256):\n        j = (j + s[i] + k_b[i]) % 256\n        s[i], s[j] = s[j], s[i]\n    return s\n\ndef KeyStream(length, Sbox):\n    s = Sbox.copy()\n    i, j = 0, 0\n    k = [0] * length\n    for r in range(length):\n        i = (i + 1) % 256\n        j = (j + s[i]) % 256\n        s[i], s[j] = s[j], s[i]\n        t = (s[i] + s[j]) % 256\n        k[r] = s[t] ^ keykey[r % len(keykey)]\n    return k\n\ndef decrypt(ciphertext, seed):\n    Sbox = init_Sbox(seed)\n    key = KeyStream(len(ciphertext), Sbox)\n    dec = [ciphertext[i] ^ key[i] for i in range(len(ciphertext))]\n    return bytes(dec)\n\n# 执行解密\nflag_bytes = decrypt(enc, key)\ntry:\n    flag = flag_bytes.decode('utf-8')\n    print(\"Flag:\", flag)\nexcept UnicodeDecodeError:\n    print(\"无法以UTF-8解码，原始字节:\", flag_bytes)\n    print(\"尝试其他编码或查看字节内容...\")\n```\n\nflag：BaseCTF{Y0u_kn0W_d3C0Mp1l4710N_PY_4ND_rC4}\n\n\n\n\n\n## 10.最简单的编码\n\n\n\n\n\n先看主要逻辑：\n\n![image-20250707233826969](image-20250707233826969.png)\n\nbase换表和编码索引值+\n\n获得魔改base，编码索引值+了那我们就减回去就行了\n\n![image-20250707233755702](image-20250707233755702.png)\n\n![image-20250707234720598](image-20250707234720598.png)\n\n\n\n```python\ntable = \"CDABGHEFKLIJOPMNSTQRWXUVabYZefcdijghmnklqropuvstyzwx23016745+/89\"\nenc = \"TqK1YUSaQryEMHaLMnWhYU+Fe0WPenqhRXahfkV6WE2fa3iRW197Za62eEaD\"\nindex = []\nnumber = [1,2,3,4]\nfor i in range(len(enc)):\n    tmp = table.index(enc[i]) - number[i % 4]\n    if tmp >= 0:\n        index.append(tmp)\n    else:\n        index.append(tmp + 64)\nprint(index)\nfor i in range(0,len(index),4):\n    a = index[i]\n    b = index[i + 1]\n    c = index[i + 2]\n    d = index[i + 3]\n    sum = a << 18 | b << 12 | c << 6 | d\n    for j in range(3):\n        print(chr((sum >> ((2 - j) * 8)) & 0xff),end=\"\")\n```\n\nflag：  BaseCTF{B45E64_eNCoDIn9_I5_rE4LLY_7OO_5implE}\n\n**<u>*==最终这个题我还是没做出来，因为环境问题：==*</u>**\n\n![image-20250708150946361](image-20250708150946361.png)\n\n![image-20250708151005928](image-20250708151005928.png)\n\n![image-20250708150921288](image-20250708150921288.png)\n\n\n\n## 11.neuro爱数学\n\n主要逻辑：\n\n![image-20250708235335543](image-20250708235335543.png)\n\n逆向这个就可以了，然后我们扔给ai得到：x1到x9，然后再喂一下子就可以：\n\n```python\nimport numpy as np\n\ndef main():\n    # 定义多项式的根\n    roots = [44, 58, 17, 6, 5, -4, -9, -37]\n    \n    # 从根构建多项式\n    poly_coeffs = np.poly(roots)\n    \n    # 将系数四舍五入为整数\n    integer_coeffs = [int(round(coeff)) for coeff in poly_coeffs]\n    \n    # 验证关键系数\n    assert integer_coeffs[0] == 1, f\"i^8 系数应为 1，实际为 {integer_coeffs[0]}\"\n    assert integer_coeffs[1] == -80, f\"i^7 系数应为 -80，实际为 {integer_coeffs[1]}\"\n    assert integer_coeffs[2] == -358, f\"i^6 系数应为 -358，实际为 {integer_coeffs[2]}\"\n    \n    # 反转后的系数\n    reversed_coeffs = integer_coeffs[::-1]\n    \n    # 打印多项式信息\n    print(\"多项式根:\", roots)\n    print(\"多项式形式: P(i) = (i-44)(i-58)(i-17)(i-6)(i-5)(i+4)(i+9)(i+37)\")\n    \n    # 打印原始系数\n    print(\"\\n多项式系数 (从最高次项到常数项):\")\n    for i, coeff in enumerate(integer_coeffs):\n        print(f\"i^{8-i} 的系数: {coeff}\")\n    \n    # 打印反转后的系数\n    print(\"\\n反转后的多项式系数 (从常数项到最高次项):\")\n    for i, coeff in enumerate(reversed_coeffs):\n        print(f\"i^{i} 的系数: {coeff}\")\n    \n    # 输出原始顺序的九个整数输入\n    print(\"\\n原始顺序的九个整数输入:\")\n    print(\" \".join(str(coeff) for coeff in integer_coeffs))\n    \n    # 输出反转顺序的九个整数输入\n    print(\"\\n反转顺序的九个整数输入:\")\n    print(\" \".join(str(coeff) for coeff in reversed_coeffs))\n    \n    # 提供复制方便的格式\n    print(\"\\n复制以下内容直接输入到程序中 (原始顺序):\")\n    print(f\"{integer_coeffs[0]} {integer_coeffs[1]} {integer_coeffs[2]} {integer_coeffs[3]} {integer_coeffs[4]} {integer_coeffs[5]} {integer_coeffs[6]} {integer_coeffs[7]} {integer_coeffs[8]}\")\n    \n    print(\"\\n复制以下内容直接输入到程序中 (反转顺序):\")\n    print(f\"{reversed_coeffs[0]} {reversed_coeffs[1]} {reversed_coeffs[2]} {reversed_coeffs[3]} {reversed_coeffs[4]} {reversed_coeffs[5]} {reversed_coeffs[6]} {reversed_coeffs[7]} {reversed_coeffs[8]}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n![image-20250708235659056](image-20250708235659056.png)\n\n\n\n期间遇到了怎么绕过反反调试的问题，目前知道的解决办法：\n\n1、改rax为0\n\n2、在https://github.com/notify-bibi/ScyllaHide-IDA7.5/tree/0.2 下载绕过反反调试的插件\n\n\n\nflag： BaseCTF{neuro_11AdD8_result_21_filtered_ajar_boxfan}\n\n\n\n\n\n## 12.RivestCipher\n\n主函数：\n\n![image-20250709181739320](image-20250709181739320.png)\n\n加密：\n\n![image-20250709181856243](image-20250709181856243.png)\n\n解密：\n\n![image-20250709181921476](image-20250709181921476.png)\n\n注意，这个题用的ida9.1，之前的题用的ida7.6\n\n\n\nflag: BaseCTF{go1@ng_!S_RuNNin9_RC4}\n\n  \n\n## 13.ezAndroid\n\n用jadx工具反编译apk得到Java程序：\n\n![image-20250710021743441](image-20250710021743441.png)\n\n读懂这一部分发现是调其他的部分，过程大概是这样：\n\n![image-20250710021838015](image-20250710021838015.png)\n\n![image-20250710021914322](image-20250710021914322.png)\n\n然后放到ida发现，是取地址然后异或运算：相同为零，不同为一\n\n提取一下，然后py代码逆一下：\n\n![image-20250710022355836](image-20250710022355836.png)\n\n```python\na=open('flag','rb')\nf=a.read()\nm=[97, 54, 98, 52, 100, 52, 102, 101, 51, 52, 54, 49]\nfor i in range(len(f)):\n     print(chr(f[i]^m[i%len(m)]),end='')\n```\n\n\n\n也可以用这种方法：\n\n![image-20250710031436642](image-20250710031436642.png)\n\n```java\nJava.perform(()=>{\n  let MainActivity = Java.use(\"com.example.hello.MainActivity\");\nMainActivity[\"loadFlagFile\"].implementation = function (str) {\n    console.log(`MainActivity.loadFlagFile is called: str=${str}`);\n    let result = this[\"loadFlagFile\"](str);\n    console.log(`MainActivity.loadFlagFile result=${result}`);\n    var A=Java.array('byte',result);\n    var B = this[\"Base64encode\"](A);\n    console.log(`MainActivity.loadFlagFile Base64encode result=${B}`);\n    return result;\n};\n})\n```\n\n\n\nflag:  BaseCTF{28e1bf5b-5a8e-4f7d-9afd-3991dfb28453}\n\n## 13.1额外知识点mobile\n\n![image-20250710163848041](image-20250710163848041.png)\n\n开启雷电模拟器root权限，启动frida服务（在mobile里）\n\n然后运行上面那个脚本：\n![image-20250710164036511](image-20250710164036511.png)\n\nhook脚本是运行到包里的\n\n然后用雷神模拟器输入任意内容就能出：\n\n![image-20250710164143029](image-20250710164143029.png)\n\n然后ASCII查一下就可以了：\n\n![image-20250710164210014](image-20250710164210014.png)\n\nflag:  BaseCTF{28e1bf5b-5a8e-4f7d-9afd-3991dfb28453}\n\n\n\n## 14.出题人已疯\n\n\n\n用die发现是c++编译的.net：\n\n![image-20250710185653410](image-20250710185653410.png)\n\n然后：\n\n![image-20250710185721527](image-20250710185721527.png)\n\n![image-20250710185753927](image-20250710185753927.png)\n\n找到关键方法，发现是三重异或\n\n然后解密\n\n\n\n解题逻辑：\n\n```\n我们已知以下信息：\n1. 密钥字符串 key_str 是由 sentences 数组中的所有字符串连接而成。\n2. 目标数组 array3 是一个 uint 数组，实际存储的是字符的 Unicode 编码（因为后面被转换为 char 数组）。\n3. 用户输入经过变换后与 array3 转换成的字符串进行比较。\n变换过程：\n   array[i] = (char)( ( (array[i] * array[i]) ) ^ i ^ (int)array2[i % array2.Length] )\n逆向过程：\n  设 T = array3 中第 i 个元素转换成的字符的 Unicode 值（即 target_chars[i] 的 ord）。\n  变换后的值 T 满足：\n      T = ( (input_char)² ) ^ i ^ key_char\n因此，我们需要计算：\n      (input_char)² = T ^ i ^ key_char\n然后开平方得到 input_char。\n注意：由于 input_char 是一个 char 类型，所以它的值在 0 到 65535 之间。开平方后取整，然后取整后的数值的平方应该等于计算出的值（否则可能出错，但根据算法，原始输入应该是可打印字符，所以通常不会超出范围）。\n步骤：\n1. 构造密钥字符串（key_str）。\n2. 将 array3 中的每个 uint 转换为字符，然后获取其 Unicode 码点（即整数）。\n3. 对于每个位置 i：\n      xor_triple = T_i ^ i ^ (key_str[i % len(key_str)] 的码点)\n      然后计算 sqrt(xor_triple)，四舍五入取整，得到原始字符的码点。\n4. 将码点转换为字符，连接起来得到 flag。\n注意：由于平方操作，原始字符的码点必须是一个整数，并且其平方必须在 0 到 65535 之间，所以原始字符的码点范围在 0 到 255 之间（因为 256*256=65536，超出 char 范围，所以实际上原始字符应该是 ASCII 或 Latin-1 字符，因为中文字符的码点较大，平方会溢出）。但实际上，array3 中的值都是小于 65536 的，所以原始字符的码点不会超过 255（因为平方后最大为 255^2=65025，小于65536）。因此，我们只需要考虑 0~255 的字符。\n但是，注意：变换后的值 T 是 char，所以 T 在 0~65535 之间，而 key_char 也是 char（0~65535），所以计算出的平方值（即 xor_triple）可能很大，但实际在逆向时，我们得到 xor_triple 后开平方，然后取整，再检查取整后的数值的平方是否等于 xor_triple（因为平方取整会有精度损失）。如果不相等，则说明该位置无解。但根据算法，正确的输入应该是有解的。\n编写完整代码：\n```\n\n```python\nimport math\n\n# 定义干扰字符串数组（sentences）\nsentences = [\n    \"你以为我还会在乎吗？\\ud83d\\ude2c\\ud83d\\ude2c\\ud83d\\ude2c我在昆仑山练了六年的剑\\ud83d\\ude1f\\ud83d\\ude1f\\ud83d\\ude1f我的心早就和昆仑山的雪一样冷了\\ud83d\\ude10\\ud83d\\ude10\\ud83d\\ude10我在大润发杀了十年的鱼\\ud83d\\ude2b\\ud83d\\ude2b\\ud83d\\ude2b我以为我的心早已跟我的刀一样冷了\\ud83d\\ude29\\ud83d\\ude29\\ud83d\\ude29\",\n    \"我早上坐公交滴卡的时候和司机大叔说“两个人”，司机惊讶地看着我“你明明就是一个人，为什么要滴两个人的卡？”我回他，“我心中还有一个叫Kengwang的。”司机回我说，“天使是不用收钱的。”\",\n    \"（尖叫）（扭曲）（阴暗的爬行）（扭动）（阴暗地蠕动）（翻滚）（激烈地爬动）（痉挛）（嘶吼）（蠕动）（阴森的低吼）（爬行）（分裂）（走上岸）（扭曲的行走）（不分对象攻击）\",\n    \"地球没我照样转？硬撑罢了！地球没我照样转？硬撑罢了！地球没我照样转？硬撑罢了！地球没我照样转？硬撑罢了！地球没我照样转？硬撑罢了！地球没我照样转？硬撑罢了！\",\n    \"扭曲上勾拳！阴暗的下勾拳！尖叫左勾拳！右勾拳爬行！扭动扫堂腿！分裂回旋踢！这是蜘蛛阴暗的吃耳屎，这是龙卷风翻滚停车场！乌鸦痉挛！老鼠嘶吼！大象蠕动！愤怒的章鱼！无差别攻击！无差别攻击！无差别攻击！\"\n]\n\n# 连接所有干扰字符串形成密钥\nkey_str = ''.join(sentences)\nkey_chars = list(key_str)  # 转换为字符数组\nkey_length = len(key_chars)\n\n# 目标验证数据（从 array3 复制）\ntarget_uint = [\n    24164, 27173, 32145, 17867, 40533, 21647, 17418, 30032, 27950, 62998,\n    60750, 64870, 52680, 61797, 49234, 59762, 16704, 19200, 32132, 24038,\n    21764, 30130, 28113, 23070, 27413, 27917, 28938, 50207, 64834, 60132,\n    64832, 63334, 55103, 22176, 21991, 20073, 22281, 19476, 28302, 24336,\n    24720, 19544, 23018, 43976\n]\n\n# 将目标 uint 数组转换为字符数组\ntarget_chars = [chr(x) for x in target_uint]\n\n# 逆向计算 flag\nflag_chars = []\n\nfor i in range(len(target_chars)):\n    # 获取目标字符的 Unicode 码点\n    transformed_val = ord(target_chars[i])\n    \n    # 获取对应位置的密钥字符\n    key_val = ord(key_chars[i % key_length])\n    \n    # 逆向计算三重异或\n    # 原始公式: transformed_val = (input_char²) ^ i ^ key_val\n    # 因此: input_char² = transformed_val ^ i ^ key_val\n    xor_result = transformed_val ^ i ^ key_val\n    \n    # 开平方逆向计算原始字符值\n    # 由于字符值必须是整数，四舍五入后取整\n    original_val = round(math.sqrt(xor_result))\n    \n    # 验证计算结果是否有效\n    if original_val * original_val != xor_result:\n        # 如果验证失败，尝试寻找最接近的整数解\n        candidates = []\n        for candidate in range(max(0, original_val - 2), min(0xFFFF, original_val + 3)):\n            if candidate * candidate == xor_result:\n                candidates.append(candidate)\n        \n        if candidates:\n            # 优先选择可打印字符\n            for cand in candidates:\n                if 32 <= cand <= 126:  # ASCII 可打印字符范围\n                    original_val = cand\n                    break\n            else:\n                original_val = candidates[0]  # 没有可打印字符则取第一个解\n        else:\n            # 没有精确解时使用近似值（这种情况在正确输入下不应发生）\n            print(f\"警告: 位置 {i} 无精确解，使用近似值 {original_val}\")\n    \n    # 将数值转换回字符\n    flag_chars.append(chr(original_val))\n\n# 组合最终 flag\nflag = ''.join(flag_chars)\nprint(\"解密后的 Flag:\", flag)\n```\n\n\n\n\n\nflag： BaseCTF{y0u_KnOw_UTF16_6uT_U_r_n0t_Cr@zym@n}\n\n\n\n## 15.UPX PRO\n\n有壳，脱壳失败，010看一下，改4F为F4：\n\n![image-20250710204754663](image-20250710204754663.png)\n\n\n\n看加密逻辑：\n\n![image-20250713203309949](image-20250713203309949.png)\n\n 基本确定就是RC4，不过是把加密的轮数从256改成了128了。那么有了密钥，以及加密结果，就可以写解密脚本了。\n\n 这里还需要注意的是在写解密脚本的时候，ida反汇编出来的加密数据是小端序排列，我们在写解密脚本的时候需要用大端序。\n\n\n\n```python\ndef init(s, k2, Len_k2):\n    k = [0] * 128\n    for i in range(128):\n        s[i] = i\n        # 完全匹配 C++ 代码的写法：k[i] = k[i % Len_k2]\n        # 在 Python 中，由于 k 初始化为全零，这等同于 k[i] = 0\n        k[i] = k[i % Len_k2]\n    \n    j = 0\n    for i in range(128):\n        j = (j + s[i] + k[i]) % 128\n        s[i], s[j] = s[j], s[i]\n\ndef c4_decrypt(Data, Len_D, k1, Len_k1):\n    s = [0] * 128\n    init(s, k1, Len_k1)\n    i = j = 0\n    \n    decrypted = bytearray()\n    for k in range(Len_D):\n        i = (i + 1) % 128\n        j = (j + s[i]) % 128\n        s[i], s[j] = s[j], s[i]\n        t = (s[i] + s[j]) % 128\n        # 直接修改 Data 中的字节\n        Data[k] ^= s[t]\n    \n    return Data\n\nif __name__ == \"__main__\":\n    # 密钥（必须与C++完全一致）\n    key = b\"B2a0s2e40815\"\n    print(key.decode('ascii'))\n    \n    key_len = len(key)\n    # 加密数据（与C++代码完全一致）\n    encrypted_data = bytearray([\n        0x16, 0x12, 0x27, 0x6c, 0x46, 0x65, 0x4a, 0x36, 0x39, 0x21,\n        0x08, 0x68, 0x35, 0x24, 0x47, 0x24, 0x60, 0x7d, 0x1a, 0x5a,\n        0x0f, 0x3c, 0x32, 0x29, 0x44, 0x15, 0x53, 0x45, 0x3c, 0x7c,\n        0x64, 0x4d, 0x24, 0x70, 0x0f, 0x13, 0x39, 0x23, 0x15, 0x74\n    ])\n    \n    # 解密\n    decrypted = c4_decrypt(encrypted_data, len(encrypted_data), key, key_len)\n    \n    # 输出结果（逐字符打印，与C++完全一致）\n    print(\"解密结果：\")\n    for b in decrypted:\n        print(chr(b), end='')\n    print()\n    \n    # 十六进制输出\n    print(\"\\n十六进制形式：\")\n    print(' '.join(f'{b:02x}' for b in decrypted))\n```\n\nflag： BaseCTF{Rc4_1$_@_G0od_3nCrypt!on_MethOd}\n\n\n\n\n\n## 16.Dont-debug-me\n\n下断点动调一下：\n\n![image-20250715153611861](image-20250715153611861.png)\n\n读读函数然后发现会按反调试走，那我们就可以：到了这，0000000000401F7D这一行的jz语句下方的两个箭头，右边这个在闪动，意思是下一步程序会往箭头所指的方向运行，那就是结束程序了，那么我们可以选择修改标志位寄存器，ZF，来进行绕过，\n\n双击ZF的值，就可以修改了，修改为0就好了\n\n![image-20250715153522505](image-20250715153522505.png)\n\nflag：  BaseCTF{8ea2710a717f89d83af695d312fe3b625df14a6ba6b3a74e15ed1e2d35cb10}\n\n\n\n## 17.UPX PRO MAX\n\n发现加壳且标志位被改为0：\n\n![image-20250715220300501](image-20250715220300501.png)\n\nx64dbg打开程序，先F9运行，\n\n再按几次F8，可以看到很明显就是ESP定律\n\n![image-20250715221505935](image-20250715221505935.png)\n\n鼠标光标放到RSP寄存器上，右键，\n\n![image-20250715231411811](image-20250715231411811.png)点击在内存窗口中转到，然后右键，选择断点->硬件，访问->4字节，接着按几次F9运行，可以看到，\n\n![image-20250715231444015](image-20250715231444015.png)\n\n![image-20250715231509964](image-20250715231509964.png)\n\n第一个红色方框中的多个pop就说明解压已经结束，正要恢复现场，第二个红色方框中就是OEP了，然后我们只需F8通过jmp跳到正确有效函数的入口，\n\n![image-20250715231530613](image-20250715231530613.png)\n\n跳转到这，我们就可以使用插件 **scylla** 进行脱壳了，\n\n好像可以在这里直接改：\n\n![image-20250715231607081](image-20250715231607081.png)\n\n\n\n可以看到使用插件，进程已经填好，OEP也填好了，我们只需点击Dump，然后保存好文件，\n\n再点击IAT Autosearch,\n\n![image-20250715231632359](image-20250715231632359.png)\n\n看到IAT已找到，再点击Get Imports，\n\n![image-20250715231649626](image-20250715231649626-1752592610441-1.png)\n\n那个打叉的函数不管，另外三个是正常的，最后点击Fix Dump，选择我们刚才Dump下来的文件就可以了。最后分析的时候我们分析的是修复好的文件，**UPX PRO MAX_dump_SCY.exe**\n\n然后剩下的正常逆，发现是一个异或运算，直接套：\n\n```python\n# 从C++代码中提取的加密数组\nenc = [0x22, 0x11, 0x17, 0x21, 0x16, 0x11, 0x3C, 0x23, 0x65, 0x5C,\n       0x2E, 0x74, 0x7C, 0x7D, 0x6D, 0x72, 0x6C, 0x0E, 0x36, 0x34,\n       0x64, 0x42, 0x57, 0x4E, 0x3B, 0x24, 0x36, 0x3A, 0x2C, 0x6D,\n       0x43, 0x13, 0x7A, 0x68, 0x11, 0x3D, 0x24, 0x10, 0x2E, 0x52,\n       0x5D, 0x29]\n\n# 第一步：执行累积异或操作（从后向前）\nfor i in range(41, 0, -1):\n    enc[i - 1] ^= enc[i]\n\n# 第二步：执行最终异或操作并构建flag\nflag = ''.join([chr(enc[j] ^ j ^ ord('}')) for j in range(42)])\n\nprint(f\"解出的flag: {flag}\")\n```\n\n\n\n```\nflag:   BaseCTF{W3lC0M3_2_ReV3r$e_xOr_1s_$O_e@S|!}\n```\n\n","tags":["CTF","逆向","入门"],"categories":["CTF","逆向"]},{"title":"2024-2025一学年的总结","url":"/2025/06/27/2024-2025一学年的总结/","content":"\n# 2024-2025一学年的总结\n\n\n\n## 9月\n\n加入网安社，突觉天地之无穷，宇宙之浩渺，我还是太菜了。打了basectf，启蒙比赛，u1s1题比较适合我，学了点密码，会了点python，哦思绪回到现在，密码水平，以我已知的密码水平为100的话，我现在的密码水平大概三四十吧，会一些简单的题罢了。\n\n\n\n## 10月\n\n学了Javaweb，继续学了密码\n\n\n\n## 11月\n\n打了金盾，继续学了密码\n\n\n\n## 12月\n\n学了某马经典xx外卖\n\n\n\n## 1月\n\n期末了，说结果吧，最后计组挂科，其他踩线过，得到了2.4的超低绩点\n\n\n\n## 2月、3月\n\n寒假，用websocket写了个实时聊天的demo\n\n\n\n## 4月\n\n自己写了个类似论坛的网页，详情之前发过。学了点算法，蓝桥杯拿了个省二，对不起guoql神，给您丢脸了。痛失三百块\n\n\n\n## 5月\n\niscc和御网，结果双双败北，让我感觉CTF比赛没那么有意思了，但解题还是很好玩的，只是比赛的话，额，其实还是因为我太菜了\n\n\n\n## 6月\n\n某点评写完了。又写了个rabbitMQ的demo，另外，我Apex白金了。","tags":["-日常"],"categories":["-日常"]},{"title":"rabbitMQ下载配置与demo测试","url":"/2025/06/17/rabbitMQ下载配置与demo测试/","content":"\n# rabbitMQ下载配置与demo测试\n\n\n\n## 下载与配置文件\n\n先下载Erlang  https://www.erlang.org/downloads  ，找到符合自己windows的版本下载就好。\n\n为什么要先下载这个东西，因为rabbitmq没法直接在windows上直接运行，因为我是windows，所以找到的方法就是这个，其他系统可以自行寻找方法。\n\n下载之后安装，记住安装路径然后配置到环境变量，各位到rabbitmq了估计已经配过Java，MySQL和redis之类的了，方法差不多，但是注意：**下载好的Erlang OTP中间是有空格的要改为ErlangOTP再添加到环境变量。**（环境变量是不识别空格和中文的）\n\n然后下载rabbitmq，https://www.rabbitmq.com/download.html  ，选择 “Windows Installer” (.exe) 版本下载。然后安装，配置环境变量，注意：**rabbitmq的不是bin而是sbin**\n\n然后就能启动服务了：\n\n```\n# 安装rabbitmq的服务\nrabbitmq-service install\n# 启动rabbitmq的服务\nrabbitmq-service start\n\n```\n\nRabbitMQ 自带 Web 管理页面，需要安装插件:\n\n```\nrabbitmq-plugins enable rabbitmq_management\n\n```\n\n访问地址：\n\n- http://localhost:15672\n- 默认账号密码为：guest / guest\n\n\n\n**如果打不开可以尝试刷新几次，如果还是打不开清理一下换从重新启动服务即可**\n\n\n\n## demo测试\n\n额，其实我不会rabbitmq，只知道她大概是个什么东西，所以扒了一个demo：\n\n\n\n该项目实现了一个基于Spring Boot和RabbitMQ的消息队列基本功能，主要包括：\n\n1. RabbitMQ配置 `RabbitMQConfig` ：\n\n   - 创建持久化队列 demo.queue\n   - 定义直连交换机 demo.exchange\n   - 绑定队列与交换机使用路由键 demo.key\n2. 消息生产者 `MessageProducer` ：\n\n```\npublic void send(String message) {\n    rabbitTemplate.convertAndSend(\n        RabbitMQConfig.EXCHANGE_NAME,\n        RabbitMQConfig.ROUTING_KEY,\n        message\n    );\n}\n```\n\n 消息消费者 `MessageConsumer` ：\n\n```\n@RabbitListener(queues = RabbitMQConfig.QUEUE_NAME)\npublic void receive(String message) {\n    System.out.println(\" [x] Received: \" + message);\n}\n```\n\n启动时自动发送测试消息 `RabbitMqDemoTestApplication` ：\n\n```\n@Override\npublic void run(String... args) {\n    messageProducer.send(\"Hello from Spring Boot and RabbitMQ!\");\n}\n```\n\n当前实现功能：\n\n- 基本的消息生产消费流程\n- Spring Boot与RabbitMQ集成\n- 直连交换机模式的消息路由\n- 控制台打印发送/接收记录","tags":["-java -技术栈 -rabbitMQ"],"categories":["-java -技术栈 -rabbitMQ"]},{"title":"这是一次测试","url":"/2025/06/02/一次关于图片的测试/","content":"\n![test](一次关于图片的测试/test.png)\n\n\n\nshishi\n\nhttps://i-blog.csdnimg.cn/blog_migrate/b35fbbc13e7eb8df543f6ab255f0319b.jpeg\n\n\n\n![](https://i-blog.csdnimg.cn/blog_migrate/b35fbbc13e7eb8df543f6ab255f0319b.jpeg)"},{"title":"Hello World","url":"/2025/06/01/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","tags":["Crypto"]},{"title":"2025litCTF","url":"/2025/05/30/2025litctf/","content":"\n\n\n# 2025litctf  这位师傅的wp好：    [2025LitCTF--Crypto--WriteUp_litctf2025-CSDN博客](https://blog.csdn.net/2301_81161051/article/details/148230231)\n\n## basic\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\nfrom enc import flag \n\nm = bytes_to_long(flag)\nn = getPrime(1024)\ne = 65537\nc = pow(m,e,n)\nprint(f\"n = {n}\")\nprint(f\"e = {e}\")\nprint(f\"c = {c}\")\n\n'''\nn = 150624321883406825203208223877379141248303098639178939246561016555984711088281599451642401036059677788491845392145185508483430243280649179231349888108649766320961095732400297052274003269230704890949682836396267905946735114062399402918261536249386889450952744142006299684134049634061774475077472062182860181893\ne = 65537\nc = 22100249806368901850308057097325161014161983862106732664802709096245890583327581696071722502983688651296445646479399181285406901089342035005663657920475988887735917901540796773387868189853248394801754486142362158369380296905537947192318600838652772655597241004568815762683630267295160272813021037399506007505\n'''\n```\n\n一个简单的欧拉函数题，直接n-1得到phi剩下的正常解就好了：\n\nwp:\n\n```python\nfrom Crypto.Util.number import *\n# from enc import flag \n\nn = 150624321883406825203208223877379141248303098639178939246561016555984711088281599451642401036059677788491845392145185508483430243280649179231349888108649766320961095732400297052274003269230704890949682836396267905946735114062399402918261536249386889450952744142006299684134049634061774475077472062182860181893\ne = 65537\nc = 22100249806368901850308057097325161014161983862106732664802709096245890583327581696071722502983688651296445646479399181285406901089342035005663657920475988887735917901540796773387868189853248394801754486142362158369380296905537947192318600838652772655597241004568815762683630267295160272813021037399506007505\n\ne = 65537\n# c = pow(m,e,n)\nphi=n-1\nd=pow(e,-1,phi)\nprint(long_to_bytes(pow(c,d,n)))\n\nLitCTF{ee2c30dfe684f13a6e6c07b9ec90cc2c}\n```\n\n\n\n## ez_math（不会\n\n原题：\n\n```python\nfrom sage.all import *\nfrom Crypto.Util.number import *\nfrom uuid import uuid4\n\nflag = b'LitCTF{'+ str(uuid4()).encode() + b'}'\nflag = bytes_to_long(flag)\nlen_flag = flag.bit_length()\ne = 65537\np = getPrime(512)\nP = GF(p)\nA = [[flag,                 getPrime(len_flag)],\n     [getPrime(len_flag),   getPrime(len_flag)]]\nA = matrix(P, A)\nB = A ** e\n\nprint(f\"e = {e}\")\nprint(f\"p = {p}\")\nprint(f\"B = {list(B)}\".replace('(', '[').replace(')', ']'))\n\n# e = 65537\n# p = 8147594556101158967571180945694180896742294483544853070485096002084187305007965554901340220135102394516080775084644243545680089670612459698730714507241869\n# B = [[2155477851953408309667286450183162647077775173298899672730310990871751073331268840697064969968224381692698267285466913831393859280698670494293432275120170, 4113196339199671283644050914377933292797783829068402678379946926727565560805246629977929420627263995348168282358929186302526949449679561299204123214741547], [3652128051559825585352835887172797117251184204957364197630337114276860638429451378581133662832585442502338145987792778148110514594776496633267082169998598, 2475627430652911131017666156879485088601207383028954405788583206976605890994185119936790889665919339591067412273564551745588770370229650653217822472440992]]\n\n```\n\n\n\nai一把梭的\n\nwp：\n\n```python\nfrom sage.all import *\nfrom Crypto.Util.number import long_to_bytes\n\ne = 65537\np = 8147594556101158967571180945694180896742294483544853070485096002084187305007965554901340220135102394516080775084644243545680089670612459698730714507241869\nB = [[2155477851953408309667286450183162647077775173298899672730310990871751073331268840697064969968224381692698267285466913831393859280698670494293432275120170, 4113196339199671283644050914377933292797783829068402678379946926727565560805246629977929420627263995348168282358929186302526949449679561299204123214741547], [3652128051559825585352835887172797117251184204957364197630337114276860638429451378581133662832585442502338145987792778148110514594776496633267082169998598, 2475627430652911131017666156879485088601207383028954405788583206976605890994185119936790889665919339591067412273564551745588770370229650653217822472440992]]\n\nFp = GF(p)\nB_matrix = matrix(Fp, 2, 2, B)\n\ndet_B = B_matrix.determinant()\ntr_B = B_matrix.trace()\n\nR.<x> = PolynomialRing(Fp, 'x')\npoly = x^2 - tr_B * x + det_B\nroots = poly.roots()\n\nif len(roots) != 2:\n    raise ValueError(\"B矩阵在GF(p)上没有两个特征值，无法解密。\")\n\nmu1, _ = roots[0]\nmu2, _ = roots[1]\n\nd = inverse_mod(e, p-1)  # RSA解密指数\n\nlambda1 = mu1 ** d  # 直接幂运算\nlambda2 = mu2 ** d\n\nt = lambda1 + lambda2\ndet_A = lambda1 * lambda2\n\n# 修正点：使用 ** (-1) 求逆\nlambda1_e_minus_1 = mu1 * (lambda1 ** (-1))  # 等价于 lambda1^(e-1)\nlambda2_e_minus_1 = mu2 * (lambda2 ** (-1))\n\nnumerator_m = lambda1_e_minus_1 - lambda2_e_minus_1\ndenominator_k = lambda1 - lambda2\n\nk_e = (mu1 - mu2) / denominator_k\nm_e = -(det_A * numerator_m) / denominator_k\n\nA00 = (B_matrix[0][0] - m_e) / k_e\nA01 = B_matrix[0][1] / k_e\nA10 = B_matrix[1][0] / k_e\nA11 = (B_matrix[1][1] - m_e) / k_e\n\nassert A00 + A11 == t, \"迹不匹配\"\nassert A00 * A11 - A01 * A10 == det_A, \"行列式不匹配\"\n\nflag = long_to_bytes(int(A00))\nprint(\"Flag:\", flag.decode())\n```\n\n\n\n看了眼大佬的：\n\n[2025LitCTF--Crypto--WriteUp_litctf2025-CSDN博客](https://blog.csdn.net/2301_81161051/article/details/148230231)\n\n![QQ_1748581409954](QQ_1748581409954.png)\n\n## math\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\nfrom enc import flag\n\nm = bytes_to_long(flag)\ne = 65537\np,q = getPrime(1024),getPrime(1024)\nn = p*q\nnoise = getPrime(40)\ntmp1 = noise*p+noise*q\ntmp2 = noise*noise\nhint = p*q+tmp1+tmp2\nc = pow(m,e,n)\nprint(f\"n = {n}\")\nprint(f\"e = {e}\")\nprint(f\"c = {c}\")\nprint(f\"hint = {hint}\")\n'''\nn = 17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565066224724927142875488372745811265526082952677738164529563954987228906850399133238995317510054164641775620492640261304545177255239344267408541100183257566363663184114386155791750269054370153318333985294770328952530538998873255288249682710758780563400912097941615526239960620378046855974566511497666396320752739097426013141\ne = 65537\nc = 1443781085228809103260687286964643829663045712724558803386592638665188285978095387180863161962724216167963654290035919557593637853286347618612161170407578261345832596144085802169614820425769327958192208423842665197938979924635782828703591528369967294598450115818251812197323674041438116930949452107918727347915177319686431081596379288639254670818653338903424232605790442382455868513646425376462921686391652158186913416425784854067607352211587156772930311563002832095834548323381414409747899386887578746299577314595641345032692386684834362470575165392266454078129135668153486829723593489194729482511596288603515252196\nhint = 17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565315879035806034866363781260326863226820493638303543900551786806420978685834963920605455531498816171226961859405498825422799670404315599803610007692517859020686506546933013150302023167306580068646104886750772590407299332549746317286972954245335810093049085813683948329319499796034424103981702702886662008367017860043529164\n'''\n```\n\n\n\n\n\nwp：素数分解delta一下就能得到noise进而求的p+q。详细大概是这样：\n\n![QQ_1748253569490](QQ_1748253569490.png)\n\n```python\nfrom Crypto.Util.number import long_to_bytes\nimport gmpy2\n\nn = 17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565066224724927142875488372745811265526082952677738164529563954987228906850399133238995317510054164641775620492640261304545177255239344267408541100183257566363663184114386155791750269054370153318333985294770328952530538998873255288249682710758780563400912097941615526239960620378046855974566511497666396320752739097426013141\nhint = 17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565315879035806034866363781260326863226820493638303543900551786806420978685834963920605455531498816171226961859405498825422799670404315599803610007692517859020686506546933013150302023167306580068646104886750772590407299332549746317286972954245335810093049085813683948329319499796034424103981702702886662008367017860043529164\n\ndelta = hint - n\nnoise = 942430120937\ns_pq_plus_num = delta // noise  # 重新计算正确的因子组合\n\n# 验证分解正确性\nif noise * s_pq_plus_num != delta:\n    print(\"错误: 因子乘积不等于delta\")\n    exit()\n\ns_pq = s_pq_plus_num - noise\n\n# 计算二次方程判别式\nD = s_pq**2 - 4*n\nroot, is_square = gmpy2.iroot(D, 2)\n\nif not is_square:\n    print(\"错误: 判别式D不是完全平方数\")\n    exit()\n\np = (s_pq + root) // 2\nq = (s_pq - root) // 2\n\nif p * q != n:\n    print(\"错误: p*q不等于n\")\n    exit()\n\n# 解密流程\ne = 65537\nc = 1443781085228809103260687286964643829663045712724558803386592638665188285978095387180863161962724216167963654290035919557593637853286347618612161170407578261345832596144085802169614820425769327958192208423842665197938979924635782828703591528369967294598450115818251812197323674041438116930949452107918727347915177319686431081596379288639254670818653338903424232605790442382455868513646425376462921686391652158186913416425784854067607352211587156772930311563002832095834548323381414409747899386887578746299577314595641345032692386684834362470575165392266454078129135668153486829723593489194729482511596288603515252196\n\nphi = (p-1)*(q-1)\nd = pow(e, -1, phi)\nm = pow(c, d, n)\n\nprint(\"解密成功！Flag:\", long_to_bytes(m).decode())\n\nLitCTF{db6f52b9265971910b306754b9df8b76}\n```\n\n## baby\n\n原题：\n\n```python\nimport gmpy2\nfrom Crypto.Util.number import *\nfrom enc import flag\n\n\nm = bytes_to_long(flag)\ng = getPrime(512)\nt = getPrime(150)\ndata = (t * gmpy2.invert(m, g)) % g\nprint(f'g = {g}')\nprint(f'data = {data}')\n'''\ng = 7835965640896798834809247993719156202474265737048568647376673642017466116106914666363462292416077666356578469725971587858259708356557157689066968453881547\ndata = 2966297990428234518470018601566644093790837230283136733660201036837070852272380968379055636436886428180671888655884680666354402224746495312632530221228498\n'''\n```\n\n\n\nwp：\n\n![QQ_1748530244744](QQ_1748530244744.png)\n\n\n\n![QQ_1748530270354](QQ_1748530270354.png)\n\n```python\nfrom fractions import Fraction\nfrom Crypto.Util.number import inverse, long_to_bytes\nimport gmpy2\n\n# 已知数据\ng = 7835965640896798834809247993719156202474265737048568647376673642017466116106914666363462292416077666356578469725971587858259708356557157689066968453881547\ndata = 2966297990428234518470018601566644093790837230283136733660201036837070852272380968379055636436886428180671888655884680666354402224746495312632530221228498\n\n# 手动实现连分数系数生成（基于欧几里得算法）\ndef generate_continued_fraction(a, b):\n    coeffs = []\n    while b != 0:\n        q, r = divmod(a, b)\n        coeffs.append(q)\n        a, b = b, r\n    return coeffs\n\n# 生成连分数系数\ncoeffs = generate_continued_fraction(data, g)\n\n# 手动实现收敛项生成\ndef get_convergents(coeffs):\n    convergents = []\n    h1, h2 = 1, 0\n    k1, k2 = 0, 1\n    for c in coeffs:\n        h = c * h1 + h2\n        k = c * k1 + k2\n        convergents.append(Fraction(h, k))\n        h2, h1 = h1, h\n        k2, k1 = k1, k\n    return convergents\n\nconv_list = get_convergents(coeffs)\n\n# 枚举收敛项\nfor conv in conv_list:\n    h, k = conv.numerator, conv.denominator\n    t_candidate = data * k - g * h\n    if t_candidate > 0 and t_candidate.bit_length() == 150:\n        if gmpy2.is_prime(t_candidate):\n            try:\n                inv_m = inverse(k, g)\n                if (t_candidate * inv_m) % g == data:\n                    print(\"Found valid m:\", k)\n                    flag = long_to_bytes(k)\n                    print(\"Flag:\", flag.decode())\n                    break\n            except:\n                pass\n            \nFound valid m: 637558173724466419510759412644075143734813144557473543913639658885806728973294110666447896405373\nFlag: LitCTF{56008a819331c9f3608a718327b7e6ce}\n```\n\n\n\n## leak\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\nfrom enc import flag\n\nm = bytes_to_long(flag)\np,q,e = getPrime(1024),getPrime(1024),getPrime(101)\nn = p*q\ntemp = gmpy2.invert(e,p-1)\nc = pow(m,e,n)\nhint = temp>>180\nprint(f\"e = {e}\")\nprint(f\"n = {n}\")\nprint(f\"c = {c}\")\nprint(f\"hint = {hint}\")\n'''\ne = 1915595112993511209389477484497\nn = 12058282950596489853905564906853910576358068658769384729579819801721022283769030646360180235232443948894906791062870193314816321865741998147649422414431603039299616924238070704766273248012723702232534461910351418959616424998310622248291946154911467931964165973880496792299684212854214808779137819098357856373383337861864983040851365040402759759347175336660743115085194245075677724908400670513472707204162448675189436121439485901172477676082718531655089758822272217352755724670977397896215535981617949681898003148122723643223872440304852939317937912373577272644460885574430666002498233608150431820264832747326321450951\nc = 5408361909232088411927098437148101161537011991636129516591281515719880372902772811801912955227544956928232819204513431590526561344301881618680646725398384396780493500649993257687034790300731922993696656726802653808160527651979428360536351980573727547243033796256983447267916371027899350378727589926205722216229710593828255704443872984334145124355391164297338618851078271620401852146006797653957299047860900048265940437555113706268887718422744645438627302494160620008862694047022773311552492738928266138774813855752781598514642890074854185464896060598268009621985230517465300289580941739719020511078726263797913582399\nhint = 10818795142327948869191775315599184514916408553660572070587057895748317442312635789407391509205135808872509326739583930473478654752295542349813847128992385262182771143444612586369461112374487380427668276692719788567075889405245844775441364204657098142930\n'''\n\n```\n\n\n\n![QQ_1748584867976](QQ_1748584867976.png)\n\nwp：\n\n```python\nfrom Crypto.Util.number import *\nimport itertools\n\ndef small_roots(f, bounds, m=1, d=None):\n    if not d:\n        d = f.degree()\n\n    R = f.base_ring()\n    N = R.cardinality()\n\n    f /= f.coefficients().pop(0)\n    f = f.change_ring(ZZ)\n\n    G = Sequence([], f.parent())\n    for i in range(m + 1):\n        base = N ^ (m - i) * f ^ i\n        for shifts in itertools.product(range(d), repeat=f.nvariables()):\n            g = base * prod(map(power, f.variables(), shifts))\n            G.append(g)\n\n    B, monomials = G.coefficient_matrix()\n    monomials = vector(monomials)\n\n    factors = [monomial(*bounds) for monomial in monomials]\n    for i, factor in enumerate(factors):\n        B.rescale_col(i, factor)\n\n    B = B.dense_matrix().LLL()\n\n    B = B.change_ring(QQ)\n    for i, factor in enumerate(factors):\n        B.rescale_col(i, 1 / factor)\n\n    H = Sequence([], f.parent().change_ring(QQ))\n    for h in filter(None, B * monomials):\n        H.append(h)\n        I = H.ideal()\n        if I.dimension() == -1:\n            H.pop()\n        elif I.dimension() == 0:\n            roots = []\n            for root in I.variety(ring=ZZ):\n                root = tuple(R(root[var]) for var in f.variables())\n                roots.append(root)\n            return roots\n\n    return []\n\n\ne = 1915595112993511209389477484497\nn = 12058282950596489853905564906853910576358068658769384729579819801721022283769030646360180235232443948894906791062870193314816321865741998147649422414431603039299616924238070704766273248012723702232534461910351418959616424998310622248291946154911467931964165973880496792299684212854214808779137819098357856373383337861864983040851365040402759759347175336660743115085194245075677724908400670513472707204162448675189436121439485901172477676082718531655089758822272217352755724670977397896215535981617949681898003148122723643223872440304852939317937912373577272644460885574430666002498233608150431820264832747326321450951\nc = 5408361909232088411927098437148101161537011991636129516591281515719880372902772811801912955227544956928232819204513431590526561344301881618680646725398384396780493500649993257687034790300731922993696656726802653808160527651979428360536351980573727547243033796256983447267916371027899350378727589926205722216229710593828255704443872984334145124355391164297338618851078271620401852146006797653957299047860900048265940437555113706268887718422744645438627302494160620008862694047022773311552492738928266138774813855752781598514642890074854185464896060598268009621985230517465300289580941739719020511078726263797913582399\nhint = 10818795142327948869191775315599184514916408553660572070587057895748317442312635789407391509205135808872509326739583930473478654752295542349813847128992385262182771143444612586369461112374487380427668276692719788567075889405245844775441364204657098142930\n\nR.<dp_low, k>=PolynomialRing(Zmod(n))\n\nf = e * (hint * 2 ** 180 + dp_low) + k - 1\n\nans, k=small_roots(f, [2 ** 180, 2 ** 100], 1, 3)[0]\n\ndp = hint * 2 ** 180 + ans\np = (e * dp - 1) // k + 1\n\nd = inverse(e, int(p - 1))\nm = pow(c, d, p)\nprint(long_to_bytes(int(m)))\n# b'LitCTF{03ecda15d1a89b06454c6050c1bd489f}'\n\n```\n\n\n\n## new_bag\n\n\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\nimport random\nimport string\n \ndef get_flag(length):\n    characters = string.ascii_letters + string.digits + '_'\n    flag = 'LitCTF{' + ''.join(random.choice(characters) for _ in range(length)) + '}'\n    return flag.encode()\n\nflag = get_flag(8)\nprint(flag)\nflag = bin(bytes_to_long(flag))[2:]\n\np = getPrime(128)\npubkey = [getPrime(128) for i in range(len(flag))]\nenc = 0\nfor i in range(len(flag)):\n    enc += pubkey[i] * int(flag[i])\n    enc %= p\nf = open(\"output.txt\",\"w\")\nf.write(f\"p = {p}\\n\")\nf.write(f\"pubkey = {pubkey}\\n\")\nf.write(f\"enc = {enc}\\n\")\nf.close()\n\n```\n\n数据：\n\n```\np = 173537234562263850990112795836487093439\npubkey = [184316235755254907483728080281053515467, 301753295242660201987730522100674059399, 214746865948159247109907445342727086153, 190710765981032078577562674498245824397, 331594659178887289573546882792969306963, 325241251857446530306000904015122540537, 183138087354043440402018216471847480597, 184024660891182404534278014517267677121, 221852419056451630727726571924370029193, 252122782233143392994310666727549089119, 175886223097788623718858806338121455451, 275410728642596840638045777234465661687, 251664694235514793799312335012668142813, 218645272462591891220065928162159215543, 312223630454310643034351163568776055567, 246969281206041998865813427647656760287, 314861458279166374375088099707870061461, 264293021895772608566300156292334238719, 300802209357110221724717494354120213867, 293825386566202476683406032420716750733, 280164880535680245461599240490036536891, 223138633045675121340315815489781884671, 194958151408670059556476901479795911187, 180523100489259027750075460231138785329, 180425435626797251881104654861163883059, 313871202884226454316190668965524324023, 184833541398593696671625353250714719537, 217497008601504809464374671355532403921, 246589067140439936215888566305171004301, 289015788017956436490096615142465503023, 301775305365100149653555500258867275677, 185893637147914858767269807046039030871, 319328260264390422708186053639594729851, 196198701308135383224057395173059054757, 231185775704496628532348037721799493511, 243973313872552840389840048418558528537, 213140279661565397451805047456032832611, 310386296949148370235845491986451639013, 228492979916155878048849684460007011451, 240557187581619139147592264130657066299, 187388364905654342761169670127101032713, 305292765113810142043496345097024570233, 303823809595161213886303993298011013599, 227663140954563126349665813092551336597, 257833881948992845466919654910838972461, 291249161813309696736659661907363469657, 228470133121759300620143703381920625589, 337912208888617180835513160742872043511, 252639095930536359128379880984347614689, 306613178720695137374121633131944714277, 328627523443531702430603855075960220403, 283995291614222889691668376952473718279, 185992200035693404743830210660606140043, 175575945935802771832062328390060568381, 239709736751531517044198331233711541211, 325191992201185112802734343474281930993, 285825734319916654888050222626163129503, 260820892372814862728958615462018022903, 271109638409686342632742230596810197399, 195432366301516284662210689868561107229, 252351678712166898804432075801905414141, 175869608753229067314866329908981554323, 212291732707466211705141589249474157597, 299891357045144243959903067354676661051, 271237385422923460052644584552894282763, 268702576849722796315440463412052409241, 198273535005705777854651218089804228523, 177684355989910045168511400849036259973, 189237944200991357454773904466163557789, 175427967765368330787115337317676160499, 270446056495616077936737430232108222303, 243318639972702711024520926308402316247, 223872107662231922057872197123261908053, 268995355861070998347238198063073079851, 244478236168888494353493404999149985963, 230731375083676409248450208772518041369, 231630208287176700035265642824425872113, 187649298194887119502654724235771449423, 264924369987111619306245625770849264491, 327092811483332202721992798797117253283, 274967838920225995524024619709213673571, 313836314009366857157961838519499192671, 181860768653760352435352944732117309357, 184011200837375425882494435177626368109, 246455975565763627776562816894916143559, 262208917125258935991543552004318662109, 334006940602786701813813048552124976177, 241119397420390120456580389194328607351, 255370083166310325724283692646412327547, 280056982387584554076672702548437488901, 190822826881447578202544631446213911541, 206119293866065537243159766877834200177, 289535246575130471484249052043282790337, 222004375767927951747133364917437739627, 186041951615746748538744491355290007923, 299120276948597373232905692530626175519, 268645812049699572580085139845553457511, 231990902203442306941381714523426756489, 259677531562170067444672097354970172129, 232573792063456357545735601063504090387, 268451806037215206985127877726665463011, 324266632324016349795115268035757999593, 323952615081869295386415078624753400501, 302316593553669781596237136546083536339, 235576231941572491681115931798290883659, 202271277470197960243533508432663735031, 172391954991101354275650988921310984563, 215333185856183701105529790905068832303, 335916893044781805453250006520700519353, 217268288923298532517983372665872329797, 265455575922780577837866687874732212733, 182194442259001995170676842797322170297, 180222796978664332193987060700843734759, 332629077640484670095070754759241249101, 238815683708676274248277883404136375767, 246167709707533867216616011486975023679, 188375282015595301232040104228085154549, 230675799347049231846866057019582889423, 290911573230654740468234181613682439691, 173178956820933028868714760884278201561, 340087079300305236498945763514358009773, 215775253913162994758086261347636015049, 286306008278685809877266756697807931889, 175231652202310718229276393280541484041, 230887015177563361309867021497576716609, 306478031708687513424095160106047572447, 172289054804425429042492673052057816187]\nenc = 82516114905258351634653446232397085739\n\n```\n\n\n\n","tags":["CTF","密码","校赛"],"categories":["CTF","密码"]},{"title":"2025XYCTFCTF","url":"/2025/04/17/2025XYCTF/","content":"\n\n\n\n\n# 连接端口\n\n```python\nfrom pwn import *\n\nio = remote('gz.imxbt.cn', 20611)\nprint(io.recv().decode())  # 打印欢迎信息\nio.interactive()          # 进入交互模式（手动输入）\n```\n\n\n\n# Division\n\n原题：\n\n```python\n\n\n# -*- encoding: utf-8 -*-\n'''\n@File    :   server.py\n@Time    :   2025/03/20 12:25:03\n@Author  :   LamentXU \n'''\nimport random \nprint('----Welcome to my division calc----')\nprint('''\nmenu:\n      [1]  Division calc\n      [2]  Get flag\n''')\nwhile True:\n    choose = input(': >>> ')\n    if choose == '1':\n        try:\n            denominator = int(input('input the denominator: >>> '))\n        except:\n            print('INPUT NUMBERS')\n            continue\n        nominator = random.getrandbits(32)\n        if denominator == '0':\n            print('NO YOU DONT')\n            continue\n        else:\n            print(f'{nominator}//{denominator} = {nominator//denominator}')\n    elif choose == '2':\n        try:\n            ans = input('input the answer: >>> ')\n            rand1 = random.getrandbits(11000)\n            rand2 = random.getrandbits(10000)\n            correct_ans = rand1 // rand2\n            if correct_ans == int(ans):\n                print('WOW')\n                with open('flag', 'r') as f:\n                    print(f'Here is your flag: {f.read()}')\n            else:\n                print(f'NOPE, the correct answer is {correct_ans}')\n        except:\n            print('INPUT NUMBERS')\n    else:\n        print('Invalid choice')\n```\n\n这是一个伪随机数加密类的题，他是通过除输入的分母1，进行624次，得出内部结构，因此可以预测接下来的数。又由于是11000位和10000位相除，所以精度不必那么高（可以是32的n倍直接求，当然切割也行）\n注意要精确截取，ai生成的有点小问题，但这位师傅的没问题，稳得一批\n\n文章参考：[[CTF/randcrack\\]python随机数预测模块分析及改进方案_random.getrandbits(32)-CSDN博客](https://blog.csdn.net/qq_42557115/article/details/128228201?spm=1001.2014.3001.5502)\n\n\n\nwp：\n\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom pwn import *       # 用于网络交互的基础库\nfrom randcrack import RandCrack  # MT19937预测器库\nfrom tqdm import trange  # 进度条显示\n\ndef main():\n    \"\"\"\n    主函数：实现完整的攻击流程\n    原理：\n    1. MT19937伪随机数生成器基于624个32位内部状态\n    2. 收集624个连续生成的随机数即可重建完整状态\n    3. 利用重建的状态可以预测后续所有随机数\n    \"\"\"\n    \n    # ==================== 初始化阶段 ====================\n    # 初始化预测器对象\n    rc = RandCrack()  # 创建MT19937状态预测器\n    \n    # 建立与服务器的连接（重要：确认端口正确性）\n    # 注意：这里使用pwntools的remote函数连接指定IP和端口\n    p = remote(\"39.106.69.240\", 24578)  # 题目给定的服务器地址和端口\n\n    # ================== 状态收集阶段 ====================\n    # 需要收集624个连续生成的32位随机数\n    # 进度条显示增强交互体验（trange是tqdm的进度条封装）\n    for _ in trange(624, desc=\"Collecting states\"):\n        # 发送选项1进入除法计算模式\n        p.sendlineafter(b\": >>>\", b\"1\")  # 当接收到\": >>>\"提示时发送选项1\n        \n        # 发送分母1（关键：确保每次计算的分母为1）\n        p.sendlineafter(b\"denominator: >>>\", b\"1\")  # 分母设置为1使结果等于分子\n        \n        # 接收服务器响应并解析分子值\n        # 响应格式示例：\"4294967295//1 = 4294967295\"\n        line = p.recvline().decode()     # 接收完整响应行\n        numerator = int(line.split('//')[0].strip())  # 提取'//'前的分子部分\n        \n        # 将分子提交给预测器重建内部状态\n        rc.submit(numerator)  # 每次submit会更新预测器的内部状态\n\n    # ================ 随机数预测阶段 ====================\n    # 生成第一个大整数（11000位）\n    # 原理：\n    # 1. predict_getrandbits(n)会自动计算需要生成多少次32位随机数\n    # 2. 11000位需要344次32位生成（344*32=11008位），然后截取前11000位\n    rand1 = rc.predict_getrandbits(11000)  # 预测11000位随机整数\n    \n    # 生成第二个大整数（10000位）\n    # 同理需要313次32位生成（313*32=10016位），截取前10000位\n    rand2 = rc.predict_getrandbits(10000)  # 预测10000位随机整数\n    \n    # 计算整除结果（服务器验证的核心）\n    ans = rand1 // rand2  # 大整数除法，Python天然支持高精度计算\n\n    # ================== 答案提交阶段 ====================\n    # 发送选项2进入答案提交模式\n    p.sendlineafter(b\": >>>\", b\"2\")  # 当出现提示时发送选项2\n    \n    # 提交计算结果（必须转换为字符串格式）\n    p.sendlineafter(b\"answer: >>>\", str(ans).encode())  # 编码为字节流发送\n\n    # ================== 获取Flag阶段 ====================\n    # 进入交互模式查看服务器返回结果\n    # 成功时会返回包含flag的信息，失败则显示错误提示\n    p.interactive()  # 保持连接交互，直到手动退出\n\nif __name__ == \"__main__\":\n    # 执行主函数\n    main()\n```\n\n\n\n# Complex_signin\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\nfrom Crypto.Cipher import ChaCha20\nimport hashlib\nfrom secret import flag\n\n\nclass Complex:\n    def __init__(self, re, im):\n        self.re = re\n        self.im = im\n\n    def __mul__(self, c):\n        re_ = self.re * c.re - self.im * c.im\n        im_ = self.re * c.im + self.im * c.re\n        return Complex(re_, im_)\n\n    def __eq__(self, c):\n        return self.re == c.re and self.im == c.im\n\n    def __rshift__(self, m):\n        return Complex(self.re >> m, self.im >> m)\n\n    def __lshift__(self, m):\n        return Complex(self.re << m, self.im << m)\n\n    def __str__(self):\n        if self.im == 0:\n            return str(self.re)\n        elif self.re == 0:\n            if abs(self.im) == 1:\n                return f\"{'-' if self.im < 0 else ''}i\"\n            else:\n                return f\"{self.im}i\"\n        else:\n            return f\"{self.re} {'+' if self.im > 0 else '-'} {abs(self.im)}i\"\n\n    def tolist(self):\n        return [self.re, self.im]\n\n\ndef complex_pow(c, exp, n):\n    result = Complex(1, 0)\n    while exp > 0:\n        if exp & 1:\n            result = result * c\n            result.re = result.re % n\n            result.im = result.im % n\n        c = c * c\n        c.re = c.re % n\n        c.im = c.im % n\n        exp >>= 1\n    return result\n\nbits = 128\np = getPrime(1024)\nq = getPrime(1024)\nn = p * q\nm = Complex(getRandomRange(1, n), getRandomRange(1, n))\ne = 3\nc = complex_pow(m, e, n)\nprint(f\"n = {n}\")\nprint(f\"mh = {(m >> bits << bits).tolist()}\")\nprint(f\"C = {c.tolist()}\")\nprint(f\"enc = {ChaCha20.new(key=hashlib.sha256(str(m.re + m.im).encode()).digest(), nonce=b'Pr3d1ctmyxjj').encrypt(flag)}\")\n\n'''\nn = 24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753\nmh = [3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016, 15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552]\nC = [5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760, 21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752]\nenc = b'\\x9c\\xc4n\\x8dF\\xd9\\x9e\\xf4\\x05\\x82!\\xde\\xfe\\x012$\\xd0\\x8c\\xaf\\xfb\\rEb(\\x04)\\xa1\\xa6\\xbaI2J\\xd2\\xb2\\x898\\x11\\xe6x\\xa9\\x19\\x00pn\\xf6rs- \\xd2\\xd1\\xbe\\xc7\\xf51.\\xd4\\xd2 \\xe7\\xc6\\xca\\xe5\\x19\\xbe'\n'''\n```\n\n\n\n题解：\n\n![](5E283890C76F7FF717066E073BA880D8.jpg)\n\n\n\n\n\n\n\n```python\n# sage\nfrom sage.all import *  # 导入SageMath的数学库\nfrom Crypto.Cipher import ChaCha20  # 导入ChaCha20加密库\nimport hashlib  # 导入哈希函数库\nimport itertools  # 导入迭代工具库\n\ndef small_roots(f, bounds, m=1, d=None):\n    \"\"\"\n    使用Coppersmith方法求解多项式的小根\n    参数：\n        f: 需要求解的多项式\n        bounds: 变量的上界（如(2^128, 2^128)）\n        m: LLL算法的参数（影响格的构造）\n        d: 多项式的最大次数（默认为多项式次数）\n    返回：\n        满足条件的根列表\n    \"\"\"\n    if not d:\n        d = f.degree()  # 若未指定d，取多项式次数\n\n    R = f.base_ring()  # 获取多项式系数的环（如Zmod(n)）\n    N = R.cardinality()  # 环的基数（如n）\n\n    # 正规化多项式：将首项系数归一化为1\n    f /= f.coefficients().pop(0)  \n    f = f.change_ring(ZZ)  # 将多项式转换为整数环上的多项式\n\n    G = Sequence([], f.parent())  # 初始化格基向量列表\n    for i in range(m + 1):\n        base = N^(m - i) * f^i  # 构造基础多项式（用于格的构造）\n        for shifts in itertools.product(range(d), repeat=f.nvariables()):\n            # 枚举所有可能的指数组合（构造格的列）\n            g = base * prod(map(power, f.variables(), shifts))\n            G.append(g)\n\n    B, monomials = G.coefficient_matrix()  # 提取系数矩阵和单项式\n    monomials = vector(monomials)  # 转换为向量形式\n\n    factors = [monomial(*bounds) for monomial in monomials]  # 计算缩放因子\n    for i, factor in enumerate(factors):\n        B.rescale_col(i, factor)  # 缩放矩阵列\n\n    B = B.dense_matrix().LLL()  # 应用LLL算法进行格规约\n\n    B = B.change_ring(QQ)  # 转换为有理数环\n    for i, factor in enumerate(factors):\n        B.rescale_col(i, 1 / factor)  # 反缩放矩阵列\n\n    H = Sequence([], f.parent().change_ring(QQ))  # 初始化新多项式列表\n    for h in filter(None, B * monomials):  # 生成新多项式\n        H.append(h)\n        I = H.ideal()  # 构造理想\n        if I.dimension() == -1:  # 理想维度不为0，移除最后一个多项式\n            H.pop()\n        elif I.dimension() == 0:  # 理想维度为0，存在解\n            roots = []\n            for root in I.variety(ring=ZZ):  # 求解整数解\n                root = tuple(R(root[var]) for var in f.variables())\n                roots.append(root)\n            return roots  # 返回第一个解集\n    return []  # 无解时返回空列表\n\n# RSA模数n（大素数的乘积）\nn = 24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753\n\n# 已知的m的高位部分（mh_re为实部高位，mh_im为虚部高位）\nmh = [\n    3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016,\n    15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552\n]\n\n# 密文C的实部和虚部\nC = [\n    5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760,\n    21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752\n]\n\nenc = b'\\x9c\\xc4n\\x8dF\\xd9\\x9e\\xf4\\x05\\x82!\\xde\\xfe\\x012$\\xd0\\x8c\\xaf\\xfb\\rEb(\\x04)\\xa1\\xa6\\xbaI2J\\xd2\\xb2\\x898\\x11\\xe6x\\xa9\\x19\\x00pn\\xf6rs- \\xd2\\xd1\\xbe\\xc7\\xf51.\\xd4\\xd2 \\xe7\\xc6\\xca\\xe5\\x19\\xbe'  # 密文\n\n# 提取m的实部和虚部高位\nmh_re, mh_im = mh\nC_re, C_im = C  # 提取密文的实部和虚部\n\n# 构造多项式环（模n）\nPR.<x,y> = PolynomialRing(Zmod(n))\n\n# 构造多项式方程：(mh_re + x)^3 - 3*(mh_re + x)*(mh_im + y)^2 ≡ C_re mod n\n# 该方程基于复数m = (mh_re + x) + (mh_im + y)i的立方模n等于C_re + C_im i的实部\nf = (mh_re + x)**3 - 3*(mh_re + x)*(mh_im + y)**2 - C_re\n\n# 求解多项式的小根（x和y的绝对值小于2^128）\nres = small_roots(f, (2^128, 2^128), m=2, d=3)  \n\n# 计算真实的m_re和m_im\nm_re = mh_re + int(res[0][0])\nm_im = mh_im + int(res[0][1])\n\n# 生成密钥：将m_re + m_im的字符串哈希为32字节的密钥\nkey = hashlib.sha256(str(m_re + m_im).encode()).digest()\n\n# 解密密文（ChaCha20要求nonce为12字节）\ncipher = ChaCha20.new(key=key, nonce=b'Pr3d1ctmyxjj')\nflag = cipher.decrypt(enc).decode()\n\nprint(\"Flag:\", flag)\n# XYCTF{Welcome_to_XYCTF_Now_let_us_together_play_Crypto_challenge}\n```\n\n\n\n# reed\n\n原题：\n\n```python\nimport string\nimport random\nfrom secret import flag  # 从secret模块导入flag\n\n# 验证flag格式是否正确（必须以'XYCTF{'开头，'}'结尾）\nassert flag.startswith('XYCTF{') and flag.endswith('}')\n\n# 去除flag的外层包装，获取核心内容\nflag = flag.rstrip('}').lstrip('XYCTF{')\n\n# 定义字符表 - 包含所有大小写字母和数字（a-z, A-Z, 0-9）\ntable = string.ascii_letters + string.digits\n\n# 确保flag中的所有字符都在字符表中\nassert all(i in table for i in flag)\n\n# 创建随机数生成器实例\nr = random.Random()\n\nclass PRNG:\n    \"\"\"自定义伪随机数生成器，带有特殊的种子更新机制\"\"\"\n    \n    def __init__(self, seed):\n        # 定义随机数生成范围\n        self.a = 1145140      # 最小值\n        self.b = 19198100     # 最大值\n        # 初始化随机种子\n        random.seed(seed)\n\n    def next(self):\n        \"\"\"生成下一个随机数并基于该数更新种子\"\"\"\n        # 在固定范围内生成随机数\n        x = random.randint(self.a, self.b)\n        # 用该数的平方+1作为新种子（关键特性）\n        random.seed(x ** 2 + 1)\n        return x\n    \n    def round(self, k):\n        \"\"\"生成k个随机数并返回最后一个\"\"\"\n        x = 0\n        for _ in range(k):\n            x = self.next()\n        return x\n\ndef encrypt(msg, a, b):\n    \"\"\"使用线性同余算法加密消息\"\"\"\n    # 对消息中的每个字符：\n    # 1. 找到它在字符表中的索引\n    # 2. 应用公式 (a * 索引 + b) mod 19198111\n    c = [(a * table.index(m) + b) % 19198111 for m in msg]\n    return c\n\n# 获取用户输入的种子值\nseed = int(input('请输入种子: '))\n\n# 用用户提供的种子初始化PRNG\nprng = PRNG(seed)\n\n# 生成加密参数a和b：\n# - 每个参数都是通过PRNG运行随机轮次得到的\n# - 轮次数范围是0到65535（2^16-1）\na = prng.round(r.randrange(2**16))\nb = prng.round(r.randrange(2**16))\n\n# 用生成的参数加密flag\nenc = encrypt(flag, a, b)\n\n# 输出加密结果\nprint(enc)\n```\n\n\n\n\n\n我们知道她的加密过程：    c = [(a * table.index(m) + b) % 19198111 for m in msg]，这是同余式。\n\n然后，我们输入随机种子可以得到密文c，我们要想得到明文m，就需要得到a和b，而明文m的范围为ASCII值0到61，也就是说我们：\n$$\nc \n0\n​\n ≡a∗m \n0\n​\n +b\\%p\n$$\n\n$$\nc \n1\n​\n ≡a∗m \n1\n​\n +b\\%p\n$$\n\n$$\na≡(c \n0\n​\n −c \n1\n​\n )∗(m \n0\n​\n −m \n1\n​\n ) \n−1\n \\%p\n$$\n\n$$\n只要GCD(m \n0\n​\n −m \n1\n​\n ,p)=1，逆元即存在\n$$\n\n其实我们只要m循环取0到61，满足公式条件就能得出a和b，进而得出明文m为什么。\n\n至于为什么GCD=1,逆元存在：X*X-1=1 modp,当且仅当GCD（X，p)=1时，X-1才存在（乘法逆元）\n\n遍历两遍m,判断得出的a，b是不是满足范围：\n\n[XYCTF2025-WriteUp | HvAng's Nests](https://hvang10.github.io/2025/04/08/XYCTF2025-WriteUp/index.html)\n\n\n\n代码（直接搬了上面这位师傅的：\n\n```python\nimport string\nfrom pwn import *\nimport json\n\nio = remote(\"39.106.48.123\", 34301)\n\ntable = string.ascii_letters + string.digits\np = 19198111\n\n\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\n\n\ndef modinv(a, mod):\n    g, x, y = egcd(a, mod)\n    if g != 1:\n        return None\n    else:\n        return x % mod\n\n\ndef decrypt(enc):\n    for i in range(len(enc)):\n        for j in range(i + 1, len(enc)):\n            c0 = enc[i]\n            c1 = enc[j]\n            for m0 in range(len(table)):\n                for m1 in range(len(table)):\n                    if m0 == m1:\n                        continue\n                    delta_m = m1 - m0\n                    delta_c = (c1 - c0) % p\n                    inv = modinv(delta_m, p)\n                    if inv is None:\n                        continue\n                    a = (delta_c * inv) % p\n                    b = (c0 - a * m0) % p\n                    # Check if a and b are within PRNG's output range\n                    if not (1145140 <= a <= 19198100):\n                        continue\n                    if not (1145140 <= b <= 19198100):\n                        continue\n                    valid = True\n                    decrypted = []\n                    for c in enc:\n                        numerator = (c - b) % p\n                        inv_a = modinv(a, p)\n                        if inv_a is None:\n                            valid = False\n                            break\n                        m = (numerator * inv_a) % p\n                        if not (0 <= m < len(table)):\n                            valid = False\n                            break\n                        decrypted.append(table[m])\n                    if valid:\n                        return ''.join(decrypted)\n    return \"解密失败\"\n\n\nio.recvuntil(b'give me seed: ')\nio.sendline(str(114514))\nenc = json.loads(io.recvline().decode())\nflag = decrypt(enc)\nprint(\"解密后的Flag:\", f'XYCTF{{{flag}}}')\n# 解密后的Flag: XYCTF{114514fixedpointissodangerous1919810}\n```\n\n\n\n然后还有一个题解：\n\n上面那个题解据出题人languag3说是自己脑子抽了加了个仿射加密，实际上算是非预期了，预期题解是输入不同的seed找循环的规律得出，然后枚举a和b来计算flag，此话在Initialization的wp中亦有分析：[2025xyctf wp | Collectcrop's Blog](https://collectcrop.github.io/blog/2025/04/08/2025xyctf-wp/#一战队信息)\n\n1.看题目。大概就是用户提供一个种子，使用该种子初始化PRNG生成两个参数a和b，然后使用线性同余加密方式加密flag，(a * table.index(m) + b) % 19198111。\n\n2.nc上之后可以看到，虽然每次得到的密文组不同，但是固定的几个位置上的数一定是相同的，比如1，2，5...。说明这几个位置上的明文是相同的，如果可以先猜测这些位置上的明文，就可以列方程组解a,b，由此再去解剩余的密文。（说实话是遍历试的明文，代码总是有点问题改了很久，答案出来之后只能说哎，这怎么能没看出来，这相同的位置，这提示，哎）\n\n\n\n随便一组数据测试：\n\n```python\nfrom itertools import combinations\nimport string\ndef inverse(a, m):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = extended_gcd(b % a, a)\n            return gcd, y - (b // a) * x, x\n\n    gcd, x, _ = extended_gcd(a, m)\n    if gcd != 1:\n        raise ValueError(\"a在模m下没有逆\")\n    else:\n        return x % m\n\ndef solve(cipher, table, m):\n    \"\"\"解密cipher\"\"\"\n    # 找到重复值\n    repeated = [c for c in set(cipher) if cipher.count(c) > 1]\n    if len(repeated) < 2:\n        print(\"Not enough repeated values to solve\")\n        return\n\n    # 遍历可能的重复值组合\n    for c0, c1 in combinations(cipher, 2):\n        pos0 = cipher.index(c0)\n        pos1 = cipher.index(c1)\n\n        # 遍历可能的字符组合\n        for i0 in range(len(table)):\n            for i1 in range(len(table)):\n                if i0 == i1:\n                    continue\n\n                try:\n                    a = (c1 - c0) * inverse(i1 - i0, m) % m\n                    b = (c0 - a * i0) % m\n                except:\n                    continue\n\n                # 检查a和b范围\n                if not (1145140 <= a <= 19198100):\n                    continue\n                if not (1145140 <= b <= 19198100):\n                    continue\n\n                # 解密全部\n                try:\n                    inv_a = inverse(a, m)\n                    flag = []\n                    valid = True\n                    for c in cipher:\n                        numerator = (c - b) % m\n                        m_idx = (numerator * inv_a) % m\n                        if not (0 <= m_idx < len(table)):\n                            valid = False\n                            break\n                        flag.append(table[m_idx])\n                    if valid:\n                        flag_str = ''.join(flag)\n                        print(f\"Possible flag: {flag_str}\")\n                        return\n                except:\n                    continue\n\n    print(\"Failed to decrypt\")\n\n# 测试\ntable = string.ascii_letters + string.digits\nm = 19198111\n\n# 测试数据\ncipher = [13690524, 13690524, 8208775, 19180266, 13690524, 8208775, 5407953, 19124315, 10913681, 13634573, 2663082, 19132308, 8160817, 19124315, 16387437, 5423939, 19124315, 13650559, 13650559, 8160817, 2663082, 8144831, 16387437, 16379444, 13634573, 2679068, 8160817, 16395430, 13650559, 13690524, 5471897, 13690524, 5471897, 13698517, 13690524, 2719033]\nsolve(cipher, table, m)\n\n\n\n```\n\n\n\n\n\n# choice\n\n原题：\n\n```python\nfrom Crypto.Util.number import bytes_to_long\nfrom random import Random\nfrom secret import flag\n\nassert flag.startswith(b'XYCTF{') and flag.endswith(b'}')\nflag = flag[6:-1]\n\nmsg = bytes_to_long(flag)\nrand = Random()\ntest = bytes([i for i in range(255, -1, -1)])\nopen('output.py', 'w').write(f'enc = {msg ^ rand.getrandbits(msg.bit_length())}\\nr = {[rand.choice(test) for _ in range(2496)]}')\n```\n\n题中还给了一份random.py的附件，改了第246行，变成了k=n.bit_length()-1\n\n这意味着什么？意味着他会输出8位的随机数，也就是0到255，其实还是MT19937，看来得抽空系统的学学这个了，并且到明出几个题玩玩\n\n回到正题：至于为什么变成8位就好解密的多，那是因为题中说了0到255的索引，并且是2496次，那意味着我们\n\n可以得出624位已知数，这样就能破解次伪随机数，进而解密。哦，对了，要饭转一下才能推出已知数，然后破解：\n\n这里还是**MT19937**，伪随机数算法的缺陷，**2496\\*8=19968**刚好够一轮`state`，注意到我们这里需要的是**逆推**上一个`state`(相当于反向预测吧)\n\n[![img](https://picx.zhimg.com/80/v2-4cd29979ffa498905e34d294cc0fc69a_1440w.png)](https://picx.zhimg.com/80/v2-4cd29979ffa498905e34d294cc0fc69a_1440w.png)\n所以`r`需要取反处理一下\n\n参考：[XYCTF2025-WriteUp | HvAng's Nests](https://hvang10.github.io/2025/04/08/XYCTF2025-WriteUp/index.html)\n\n题解：\n\n```python\n# sage\nimport sys\n# https://github.com/JuliaPoo/MT19937-Symbolic-Execution-and-Solver\nsys.path.append('MT19937-Symbolic-Execution-and-Solver-master/source')\n\nfrom MT19937 import MT19937\nfrom Crypto.Util.number import *\nenc = 5042764371819053176884777909105310461303359296255297\nlength = enc.bit_length()\nprint(length)\nr = []\nr = [255-i for i in r]\nrng_clone = MT19937(state_from_data = (r, 8))\n\ndef getrandbits(n):\n    num = 0\n    for i in range(n//32):\n        num = (rng_clone() << (32 * i)) | num\n    num = rng_clone() >> (32 - (n % 32)) << n//32*32 | num\n    return num\n\nrng_clone.reverse_states(length//32+1)  # 回退到生成前n个随机数之前的状态\nflag = enc ^^ getrandbits(176-1)    # 172/8=21.5,22*8=176,可能存在误差所以减1试试\nflag = b'XYCTF{'+long_to_bytes(flag)+b'}'\nprint(flag.decode())\n# XYCTF{___0h_51mple_r@nd0m___}\n```\n\n\n\n\n\n# 复复复数\n\n原题：\n\n```python\nclass ComComplex:\n    def __init__(self, value=[0,0,0,0]):\n        self.value = value\n    def __str__(self):\n        s = str(self.value[0])\n        for k,i in enumerate(self.value[1:]):\n            if i >= 0:\n                s += '+'\n            s += str(i) +'ijk'[k]\n        return s\n    def __add__(self,x):\n        return ComComplex([i+j for i,j in zip(self.value,x.value)])\n    def __mul__(self,x):\n        a = self.value[0]*x.value[0]-self.value[1]*x.value[1]-self.value[2]*x.value[2]-self.value[3]*x.value[3]\n        b = self.value[0]*x.value[1]+self.value[1]*x.value[0]+self.value[2]*x.value[3]-self.value[3]*x.value[2]\n        c = self.value[0]*x.value[2]-self.value[1]*x.value[3]+self.value[2]*x.value[0]+self.value[3]*x.value[1]\n        d = self.value[0]*x.value[3]+self.value[1]*x.value[2]-self.value[2]*x.value[1]+self.value[3]*x.value[0]\n        return ComComplex([a,b,c,d])\n    def __mod__(self,x):\n        return ComComplex([i % x for i in self.value])\n    def __pow__(self, x, n=None):\n        tmp = ComComplex(self.value)\n        a = ComComplex([1,0,0,0])\n        while x:\n            if x & 1:\n                a *= tmp\n            tmp *= tmp\n            if n:\n                a %= n\n                tmp %= n\n            x >>= 1\n        return a\n\nfrom Crypto.Util.number import *\nfrom secret import flag, hint\n\np = getPrime(256)\nq = getPrime(256)\nr = getPrime(256)\nn = p * q * r\n\nP = getPrime(512)\nassert len(hint) == 20\nhints = ComComplex([bytes_to_long(hint[i:i+5]) for i in range(0,20,5)])\nkeys = ComComplex([0, p, q, r])\nprint('hint =',hints)\nprint('gift =',hints*keys%P)\nprint('P =',P)\n\ne = 65547\nm = ComComplex([bytes_to_long(flag[i:i+len(flag)//4+1]) for i in range(0,len(flag),len(flag)//4+1)])\nc = pow(m, e, n)\nprint('n =', n)\nprint('c =', c)\n\n'''\nhint = 375413371936+452903063925i+418564633198j+452841062207k\ngift = 8123312244520119413231609191866976836916616973013918670932199631084038015924368317077919454611785179950870055560079987034735836668109705445946887481003729+20508867471664499348708768798854433383217801696267611753941328714877299161068885700412171i+22802458968832151777449744120185122420871929971817937643641589637402679927558503881707868j+40224499597522456323122179021760594618350780974297095023316834212332206526399536884102863k\nP = 8123312244520119413231609191866976836916616973013918670932199631182724263362174895104545305364960781233690810077210539091362134310623408173268475389315109\nn = 408713495380933615345467409596399184629824932933932227692519320046890365817329617301604051766392980053993030281090124694858194866782889226223493799859404283664530068697313752856923001112586828837146686963124061670340088332769524367\nc = 212391106108596254648968182832931369624606731443797421732310126161911908195602305474921714075911012622738456373731638115041135121458776339519085497285769160263024788009541257401354037620169924991531279387552806754098200127027800103+24398526281840329222660628769015610312084745844610670698920371305353888694519135578269023873988641161449924124665731242993290561874625654977013162008430854786349580090169988458393820787665342793716311005178101342140536536153873825i+45426319565874516841189981758358042952736832934179778483602503215353130229731883231784466068253520728052302138781204883495827539943655851877172681021818282251414044916889460602783324944030929987991059211909160860125047647337380125j+96704582331728201332157222706704482771142627223521415975953255983058954606417974983056516338287792260492498273014507582247155218239742778886055575426154960475637748339582574453542182586573424942835640846567809581805953259331957385k\n'''\n\n```\n\n\n\n这个题，先看这个\n\n```python\nprint('gift =',hints*keys%P)\n```\n\n将数据联系起来。\n\n看它定义的四元数的加减乘除运算规则。我们在只有未知量keys不知道的情况下可以，通过运算求出keys，进而求出pqr，然后就是求四数RSA了，u1s1我不咋会，大概有个印象，好像就是要开根，贴贴别人的文章\n\n[2025 XYCTF - weyung](https://blog.weyung.cc/2025/04/04/2025 XYCTF/#Crypto)\n\n[XYCTF 2025 部分题目Write Up | Triode Field](https://triodelzx.github.io/2025/04/10/XYCTF-2025-部分题目Write-Up/index.html#复复复复数)\n\n\n\n题解：\n\n```python\nfrom sage.all import *\nfrom Crypto.Util.number import long_to_bytes\n\nh = [375413371936, 452903063925, 418564633198, 452841062207]\ng = [8123312244520119413231609191866976836916616973013918670932199631084038015924368317077919454611785179950870055560079987034735836668109705445946887481003729, 20508867471664499348708768798854433383217801696267611753941328714877299161068885700412171, 22802458968832151777449744120185122420871929971817937643641589637402679927558503881707868, 40224499597522456323122179021760594618350780974297095023316834212332206526399536884102863]\nP = 8123312244520119413231609191866976836916616973013918670932199631182724263362174895104545305364960781233690810077210539091362134310623408173268475389315109\nn = 408713495380933615345467409596399184629824932933932227692519320046890365817329617301604051766392980053993030281090124694858194866782889226223493799859404283664530068697313752856923001112586828837146686963124061670340088332769524367\n\nH = matrix(Zmod(P),\n[[h[0], h[1], h[2], h[3]],\n[-h[1], h[0], -h[3], h[2]],\n[-h[2], h[3], h[0], -h[1]],\n[-h[3], -h[2], h[1], h[0]]])\n\nG = matrix(Zmod(P),\n[[g[0], g[1], g[2], g[3]],\n[-g[1], g[0], -g[3], g[2]],\n[-g[2], g[3], g[0], -g[1]],\n[-g[3], -g[2], g[1], g[0]]])\n\nK = H^-1 * G\n_, p, q, r = K[0]\nassert ZZ(p) * ZZ(q) * ZZ(r) == n\n\np, q, r = ZZ(p), ZZ(q), ZZ(r)\nprint(p)\nprint(q)\nprint(r)\nc = [212391106108596254648968182832931369624606731443797421732310126161911908195602305474921714075911012622738456373731638115041135121458776339519085497285769160263024788009541257401354037620169924991531279387552806754098200127027800103, 24398526281840329222660628769015610312084745844610670698920371305353888694519135578269023873988641161449924124665731242993290561874625654977013162008430854786349580090169988458393820787665342793716311005178101342140536536153873825, 45426319565874516841189981758358042952736832934179778483602503215353130229731883231784466068253520728052302138781204883495827539943655851877172681021818282251414044916889460602783324944030929987991059211909160860125047647337380125, 96704582331728201332157222706704482771142627223521415975953255983058954606417974983056516338287792260492498273014507582247155218239742778886055575426154960475637748339582574453542182586573424942835640846567809581805953259331957385]\n\nC = matrix(Zmod(n),\n[[c[0], c[1], c[2], c[3]],\n[-c[1], c[0], -c[3], c[2]],\n[-c[2], c[3], c[0], -c[1]],\n[-c[3], -c[2], c[1], c[0]]])\n\ne = 65547\nphi = (p**4 - 1)*(q**4 - 1)*(r**4 - 1)//27\n\nd = inverse_mod(e, phi)\nM = C^d\n\nres = M[0]\nflag = b\"\"\nfor x in res:\n    flag += long_to_bytes(ZZ(x))\n\nprint(flag)\nb'flag{Quaternion_15_ComComComComplexXXX!!!?}'\n\n```\n\n","tags":["CTF","密码","好题"],"categories":["CTF","密码"]},{"title":"RSA系列","url":"/2025/03/19/RSA系列/","content":"\n\n\n# RSA系列\n\n\n\n## 1.最简单的rsa\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\n\nflag = b'NSSCTF{******}'\n\np = getPrime(512)\nq = getPrime(512)\nn = p*q\ne = 65537\nphi = (p-1)*(q-1)\n\nm = bytes_to_long(flag)\n\nc = pow(m, e, n)\n\nprint(f'p = {p}')\nprint(f'q = {q}')\nprint(f'e = {e}')\nprint(f'c = {c}')\n\n'''\np = 10554915510546378513140074459658086644656654144905337809416976066414771647836950941616441505897207397834928781511863699153349798682451297889979721668885951\nq = 8246403321715011123191410826902524505032643184038566851264109473851746507405534573077909160292816825514872584170252311902322051822644609979417178306809223\ne = 65537\nc = 40005881669517895877352756665523238535105922590962714344556374248977905431683140065629966778249773228248201807844489945346731806741025157651474530811920115794270396320935022110691338083709019538562205165553541077855422953438117902279834449006455379382431883650004540282758907332683496655914597029545677184720\n'''\n```\n\nwp：\n\n```python\nfrom Crypto.Util.number import *\np = 10554915510546378513140074459658086644656654144905337809416976066414771647836950941616441505897207397834928781511863699153349798682451297889979721668885951\nq = 8246403321715011123191410826902524505032643184038566851264109473851746507405534573077909160292816825514872584170252311902322051822644609979417178306809223\ne = 65537\nc = 40005881669517895877352756665523238535105922590962714344556374248977905431683140065629966778249773228248201807844489945346731806741025157651474530811920115794270396320935022110691338083709019538562205165553541077855422953438117902279834449006455379382431883650004540282758907332683496655914597029545677184720\n\nn=p*q\n\nphi = (p-1)*(q-1)\nd=pow(e,-1,phi)\nm=pow(c,d,n)\nprint(long_to_bytes(m))\nb'NSSCTF{now!you_know_rsa}'\n```\n\n\n\n## 2.已知n（简单）\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\n\nflag = b'NSSCTF{******}'\n\np = getPrime(256)\nq = getPrime(256)\nn = p*q\ne = 65537\nphi = (p-1)*(q-1)\n\nm = bytes_to_long(flag)\n\nc = pow(m, e, n)\n\nprint(f'n = {n}')\nprint(f'e = {e}')\nprint(f'c = {c}')\n\n'''\nn = 7382582015733895208810490097582153009797420348201515356767397357174775587237553842395468027650317457503579404097373070312978350435795210286224491315941881\ne = 65537\nc = 6511001389892474870028836129813814173158254564777610289284056550272120510686249909340499673868720839756059423749304765055919251717618117507007046973023557\n'''\n```\n\n**直接factor（n）就好，但yafu太慢，用的在线网站，不晓得离线咋弄，问问**\n\n```python\nfrom Crypto.Util.number import *\n\nflag = b'NSSCTF{******}'\n\np=70538125404512947763739093348083497980212021962975762144416432920656660487657\nq=104660876276442216612517835199819767034152013287345576481899196023866133215633\n\nn = 7382582015733895208810490097582153009797420348201515356767397357174775587237553842395468027650317457503579404097373070312978350435795210286224491315941881\ne = 65537\nc = 6511001389892474870028836129813814173158254564777610289284056550272120510686249909340499673868720839756059423749304765055919251717618117507007046973023557\nphi = (p-1)*(q-1)\nd=pow(e,-1,phi)\nm=pow(c,d,n)\nprint(long_to_bytes(m))\nb'NSSCTF{factordb_is_useful}'\n```\n\n## 3.yafu使用\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\n\nflag = b'NSSCTF{******}'\n\np = getPrime(128)\nq = getPrime(128)\nn = p*q\ne = 65537\nphi = (p-1)*(q-1)\n\nm = bytes_to_long(flag)\n\nc = pow(m, e, n)\n\nprint(f'n = {n}')\nprint(f'e = {e}')\nprint(f'c = {c}')\n\n'''\nn = 53690629441472827148854210396580805205350972614395425306316047967905824330731\ne = 65537\nc = 22130296334673852790451396673112575082637108306697684532954477845025885087040\n'''\n```\n\n这个直接用yafu能解，因为数不是很大\n\n```python\nfrom Crypto.Util.number import *\n\nflag = b'NSSCTF{******}'\n\nn = 53690629441472827148854210396580805205350972614395425306316047967905824330731\ne = 65537\nc = 22130296334673852790451396673112575082637108306697684532954477845025885087040\n\np = 277349599849597463956171076348973750041\nq = 193584665240506752994134779660255197091\nphi = (p-1)*(q-1)\n\nd=pow(e,-1,phi)\nm=pow(c,d,n)\nprint(long_to_bytes(m))\n\n#NSSCTF{yafu!yafu!yafu!}\n```\n\n## 4.nextprime\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\nimport gmpy2\nflag = b'NSSCTF{******}'\n\np = getPrime(512)\nq = gmpy2.next_prime(p)\nn = p*q\ne = 65537\nphi = (p-1)*(q-1)\n\nm = bytes_to_long(flag)\n\nc = pow(m, e, n)\n\nprint(f'n = {n}')\nprint(f'e = {e}')\nprint(f'c = {c}')\n\n'''\nn = 115637000420176820831322601039129424406844427046456738651883381559357542765613732363445112111006849040385859313572091386802534464534403117787314180179562651607533039692795522388596550968316951090748054495960090527479954143448774136390568881020918710834542819900918984139672802889774720153267841255456602500057\ne = 65537\nc = 98161406745910866780822530171878255235776133393411573803496865047700715941955255328757920065032397556905095591171977170479344602512244671081108703687450560269408412671849929423399172588599903975793985819498354819305128607934552101433664794909855378636055525016664559476808490723554481335856183927702549281730\n'''\n```\n\nwp：\n\np和q相邻，对n求根然后nextprime得出p即可：\n\n```python\nfrom Crypto.Util.number import *\nimport gmpy2\nimport numpy\nfrom sympy import nextprime, root\nflag = b'NSSCTF{******}'\nn = 115637000420176820831322601039129424406844427046456738651883381559357542765613732363445112111006849040385859313572091386802534464534403117787314180179562651607533039692795522388596550968316951090748054495960090527479954143448774136390568881020918710834542819900918984139672802889774720153267841255456602500057\ne = 65537\nc = 98161406745910866780822530171878255235776133393411573803496865047700715941955255328757920065032397556905095591171977170479344602512244671081108703687450560269408412671849929423399172588599903975793985819498354819305128607934552101433664794909855378636055525016664559476808490723554481335856183927702549281730\n\npq=root(n,2)\nq=nextprime(pq)\np=n//q\nphi = (p-1)*(q-1)\nd=pow(e,-1,phi)\nm=pow(c,d,n)\nprint(long_to_bytes(m))\nb'NSSCTF{so_closed}'\n```\n\n## 5.可以factor直接出，也可以费马\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\nimport gmpy2\nflag = b'NSSCTF{******}'\n\np = getPrime(512)\nq = gmpy2.next_prime(p - getPrime(256))\nn = p*q\ne = 65537\nphi = (p-1)*(q-1)\nm = bytes_to_long(flag)\nc = pow(m, e, n)\n\nprint(f'n = {n}')\nprint(f'e = {e}')\nprint(f'c = {c}')\n'''\nn = 148841588941490812589697505975986386226158446072049530534135525236572105309550985274214825612079495930267744452266230141871521931612761645600600201983605957650711248808703757693378777706453580124982526368706977258199152469200838211055230241296139605912607613807871432800586045262879581100319519318390454452117\ne = 65537\nc = 69038543593219231496623016705860610154255535760819426453485115089535439537440188692852514795648297200067103841434646958466720891016026061658602312900242658759575613625726750416539176437174502082858413122020981274672260498423684555063381678387696096811975800995242962853092582362805345713900308205654744774932\n'''\n```\n\nwp：\n\n方法一，factor直接出：\n\n```python\nfrom Crypto.Util.number import *\nimport gmpy2\nflag = b'NSSCTF{******}'\nn = 148841588941490812589697505975986386226158446072049530534135525236572105309550985274214825612079495930267744452266230141871521931612761645600600201983605957650711248808703757693378777706453580124982526368706977258199152469200838211055230241296139605912607613807871432800586045262879581100319519318390454452117\ne = 65537\nc = 69038543593219231496623016705860610154255535760819426453485115089535439537440188692852514795648297200067103841434646958466720891016026061658602312900242658759575613625726750416539176437174502082858413122020981274672260498423684555063381678387696096811975800995242962853092582362805345713900308205654744774932\n\np = 12200065120379104459630695224710181907653841921369674962900093531339421658815375891425102591939094029941691738405035324548070063226677838530633694428729829\nq = 12200065120379104459630695224710181907653841921369674962900093531339421658815305905822146210878434959851438079877557401145694064756239882458467901042367473\nphi = (p-1)*(q-1)\nd=pow(e,-1,phi)\nm=pow(c,d,n)\nprint(long_to_bytes(m))\nb'NSSCTF{fermat_factor}'\n```\n\n方法二：使用费马分解,因为p和q中间间隔较小\n1.将n开根号\n2.分别赋值到a和b\n\n3. b^2=a^2-n 最后得出的结果需要能开根号\n\n4.丢到while循环中去，a=a+1将开根号后的结果加一，一个一个试，直到最后得出的结果需要能开根号。\n5.p=a+b q=a-b\n\n```python\nfrom Crypto.Util.number import *\nimport gmpy2\n\ndef fermat_attack(n):\n    a=gmpy2.isqrt(n) #首先分解n，把分解后的小数点之后抛弃掉\n    b_squared=a*a-n #b^2=a^2-n\n    b=gmpy2.isqrt(n)\n    while b*b != b_squared:\n        a=a+1 #将分解n后的a,叠加1\n        b_squared = a*a-n #b^2=(a+1)^2-n，将叠加后的a平方并减一\n        b=gmpy2.isqrt(b_squared) #开根号，观察得数是否可以开根号，并且将开根号后的b^2赋值给b\n    p=a+b #若可以，则将n开根号后的a加上b，得出结果就是p,将n开根号后的a减b，得出结果就是q\n    q=a-b\n    assert n == p*q\n    return p,q\nn = 148841588941490812589697505975986386226158446072049530534135525236572105309550985274214825612079495930267744452266230141871521931612761645600600201983605957650711248808703757693378777706453580124982526368706977258199152469200838211055230241296139605912607613807871432800586045262879581100319519318390454452117\n\np,q=fermat_attack(n)\n\ne = 65537\nphi = (p-1)*(q-1)\nd=inverse(e,phi)\nc = 69038543593219231496623016705860610154255535760819426453485115089535439537440188692852514795648297200067103841434646958466720891016026061658602312900242658759575613625726750416539176437174502082858413122020981274672260498423684555063381678387696096811975800995242962853092582362805345713900308205654744774932\nmsg=pow(c,d,n)\nprint(long_to_bytes(msg))\n```\n\n## 6.共因数\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\nflag = b'NSSCTF{******}'\n\np1 = getPrime(512)\nq = getPrime(512)\np2 = getPrime(512)\n\nn1 = p1*q\nn2 = p2*q\n\ne = 65537\n\nm = bytes_to_long(flag)\nc1 = pow(m, e, n1)\nc2 = pow(m, e, n2)\n\nprint(f'n1 = {n1}')\nprint(f'n2 = {n2}')\nprint(f'e = {e}')\nprint(f'c1 = {c1}')\nprint(f'c2 = {c2}')\n'''\nn1 = 143348646254804947818644803938588739009782265465565896704788366218178523508874903492905378927641178487821742289009401873633609987818871281146199303052141439575438691652893995423962176259643151111739185844059243400387734688275416379337335777994990138009973618431459431410429980866760075387393812720247541406893\nn2 = 138110854441015362783564250048191029327770295545362614687087481715680856350219966472039006526758450117969049316234863489558254565946242898336924686721846675826468588471046162610143748100096038583426519355288325214365299329095841907207926280081868726568947436076663762493891291276498567791697978693639037765169\ne = 65537\nc1 = 54957154834913405861345262613986460384513988240935244315981524013378872930144117440787175357956479768211180412158274730449811947349624843965933828130932856052315165316154486515277625404352272475136003785605985702495858150662789554694910771308456687676791434476722168247882078861234982509648037033827107552029\nc2 = 122221335585005390437769701090707585780333874638519916373585594040154234166935881089609641995190534396533473702495240511296379249872039728112248708182969185010334637138777948970821974238214641235158623707766980447918480715835847907220219601467702961667091318910582445444058108454023108157805147341928089334736\n'''\n```\n\nwp：求出共因数q即可：\n\n```\nprint(binascii.unhexlify(hex(m2)[2:].strip(\"L\")))\n解释：\nhex(m2) 将 m2 转换为它的十六进制字符串表示（例如，0x123abcd）。\n[2:] 通过切片去掉十六进制表示中的 0x 前缀（结果是 123abcd）。\nstrip(\"L\") 用来去掉字符串中的 L（在 Python 2 中，当大整数被表示时会附加一个 L，但在 Python 3 中不再需要）。\nbinascii.unhexlify() 将十六进制字符串（例如，123abcd）转换为原始的字节串。\n目的：这行代码是将整数 m2 先转为十六进制字符串，再通过 unhexlify() 转换为字节串。这样做实际上是将整数转换为字节数据。\n```\n\n\n\n```python\nimport binascii\nfrom Crypto.Util.number import *\nfrom numpy import gcd, invert\nflag = b'NSSCTF{******}'\n\nn1 = 143348646254804947818644803938588739009782265465565896704788366218178523508874903492905378927641178487821742289009401873633609987818871281146199303052141439575438691652893995423962176259643151111739185844059243400387734688275416379337335777994990138009973618431459431410429980866760075387393812720247541406893\nn2 = 138110854441015362783564250048191029327770295545362614687087481715680856350219966472039006526758450117969049316234863489558254565946242898336924686721846675826468588471046162610143748100096038583426519355288325214365299329095841907207926280081868726568947436076663762493891291276498567791697978693639037765169\ne = 65537\nc1 = 54957154834913405861345262613986460384513988240935244315981524013378872930144117440787175357956479768211180412158274730449811947349624843965933828130932856052315165316154486515277625404352272475136003785605985702495858150662789554694910771308456687676791434476722168247882078861234982509648037033827107552029\nc2 = 122221335585005390437769701090707585780333874638519916373585594040154234166935881089609641995190534396533473702495240511296379249872039728112248708182969185010334637138777948970821974238214641235158623707766980447918480715835847907220219601467702961667091318910582445444058108454023108157805147341928089334736\n\nq=gcd(n1,n2)\np1=n1//q\np2=n2//q\nphi1 = (p1-1)*(q-1)\nphi2 = (p2-1)*(q-1)\n\nd1=pow(e,-1,phi1)\nd2=pow(e,-1,phi2)\nm1=pow(c1,d1,n1)\nm2=pow(c2,d2,n2)\nprint(long_to_bytes(m1))\nprint(long_to_bytes(m2))\n\nprint(binascii.unhexlify(hex(m2)[2:].strip(\"L\")))\nprint(binascii.unhexlify(hex(m1)[2:].strip(\"L\")))\nb'NSSCTF{no_share_number}'\n```\n\n\n\n## 7.简单三数的rsa\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\n\nflag = b'NSSCTF{******}' + b'1'*170\n\np = getPrime(512)\nq = getPrime(512)\nr = getPrime(512)\nn = p*q*r\ne = 65537\nphi = (p-1)*(q-1)*(r-1)\n\nm = bytes_to_long(flag)\n\nc = pow(m, e, n)\n\nprint(f'p = {p}')\nprint(f'q = {q}')\nprint(f'r = {r}')\nprint(f'e = {e}')\nprint(f'c = {c}')\n```\n\nwp：\n\n```python\nfrom Crypto.Util.number import *\n\nflag = b'NSSCTF{******}' + b'1'*170\n\np = 10666139331774428325755287635566473140804481321882464031499529816800186578792308674238646794969384836340484775213796013129603472328582005363876462361316357\nq = 8419311673449738061914489023962717718536471719688567807316495262754711350004888752049108347226115000749280146228195893953964759818878155006622123533942989\nr = 12875078327453384158245832541544758526474680184252540739652077682353277702054275525591573258723948221345537075374635382175740236093131628077747126356403959\ne = 65537\nc = 424552463648937499189041230155623101311087334789253159440707211761796081289342164253743235182597460622581134089949035117444838205449163269030784233435435681797627188717450074808905561404960693227573181548281296514743775615606388692910356320667720308219275107443303501165027740512539959960217657836317351146520079753390346207659007421416917274795119021374032194294225350901136669304225010974617136606299060486198480556729770211945777266366417547752798441211059402\n\nn = p*q*r\n\nphi = (p-1)*(q-1)*(r-1)\n\nd=pow(e,-1,phi)\nprint(long_to_bytes(pow(c,d,n)))\nb'NSSCTF{3th_number!}\n\n```\n\n## 8.最简单的欧拉函数\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\n\nflag = b'NSSCTF{******}' + b'1'*100\n\np = getPrime(256)\nq = getPrime(256)\nn = (p**3) * q\ne = 65537\nphi = (p-1)*(q-1)\n\nm = bytes_to_long(flag)\n\nc = pow(m, e, n)\n\nprint(f'p = {p}')\nprint(f'q = {q}')\nprint(f'e = {e}')\nprint(f'c = {c}')\n```\n\n\n\nwp：简单的欧拉函数：\n\n![NSSIMAGE](d98d41c9a2.jpg)\n\n```python\nfrom Crypto.Util.number import *\n\nflag = b'NSSCTF{******}' + b'1'*100\np = 80505091208742938705306670241621545375764148093711243653439069254008824979403\nq = 67599990875658931406915486208971556223245451500927259766683936131876689508521\ne = 65537\nc = 7958690969908064264211283192959937430539613460471121984649054121171267262097603091410178042319139582772142226087020110084551158367679146616732446561228522673699836019156243452069036383047309578614662564794584927846163157472211089368697387945469398750955336949678910159585015004994620777231073804301249774041\n\nn = (p**3) * q\ne = 65537\nphi = (p-1)*(q-1)*p*p\n\nd=pow(e,-1,phi)\nm=pow(c,d,n)\nprint(long_to_bytes(m))\nb'NSSCTF{more_exp}\n```\n\n## 9.多因子小明文攻击\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\n\nflag = b'NSSCTF{******}'\n\np = getPrime(512)\nq = getPrime(512)\n\ne = 65537\nwhile True:\n    r = 2*getPrime(100)*e+1\n    if isPrime(r):\n        break\n\nn = p*q*r\n\nm = bytes_to_long(flag)\n\nc = pow(m, e, n)\n\nprint(f'p = {p}')\nprint(f'q = {q}')\nprint(f'r = {r}')\nprint(f'e = {e}')\nprint(f'c = {c}')\n```\n\nwp：\n\n直接用正常的多因子例如7.简单三数的rsa会出错，因为e和phi不互质\n\n但我们知道flag并未进行填充，flag相当的小，则m也会很小，甚至比p*q更小，那么我们可以直接mod pq\n\n \n\n- 其实通俗一点的理解就是当m*m*比较小时，此时就算公钥对应的私钥不存在（逆元不存在），我们可以考虑将公钥转化为其他公钥（用原公钥因子进行重组）再尝试求解私钥进行解密，依然可以得到正确结果。\n\n  这里其实也就解释了为什么P7，P8需要加上大量字符串的填充，就是为了防止使用该方法直接解出，在现实世界的RSA算法应用标准中，明文其实都会用特定算法进行填充来防止这种情况出现。\n\n\n\n![](屏幕截图 2025-03-19 222849.png)\n\n\n\n```python\nfrom Crypto.Util.number import *\n\nflag = b'NSSCTF{******}'\np = 7478755670255767435237487693415479182290330775502792675052667363676831056436638619069277770540533350723045234676443621124912287506103439704868369839725279\nq = 9232828888049557325429111621080998490274442347556398052322580869768941301413255711626092627273543579067597113958627672298942570149816938335701615759283713\nr = 102909133680612532601801231903654039\ne = 65537\nc = 142893174944324070830219394465469685943669308818639857030565389839224452373848570577201378981080333784852764502832587008270072323948511579823852437852643609820245476634896477031076952735298279618952398460203032125853063235638358942643559551563899381032067185778629120272032518475352761100115057449043142848203976076694124978394099839339406197\n\nn = p*q\nphi=(p-1)*(q-1)\n\nd=pow(e,-1,phi)\nm=pow(c,d,n)\nprint(long_to_bytes(m))\nb'NSSCTF{no_inverse!but_decrypt}'\n```\n\n\n\n## 10.x倍的e\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\n\nflag = b'NSSCTF{******}'\n\np = getPrime(512)\nq = getPrime(512)\n\ne = 65537*2\n\nn = p*q\n\nm = bytes_to_long(flag)\n\nc = pow(m, e, n)\n\nprint(f'p = {p}')\nprint(f'q = {q}')\nprint(f'e = {e}')\nprint(f'c = {c}')\n```\n\nwp：\n\n又是e和phi不互素，观察到e为2*65537，猜都能猜一手m最后要开方\n\n![NSSIMAGE](74cceeb627.jpg)\n\n```python\n方法一：\n\nfrom Crypto.Util.number import *\n\nflag = b'NSSCTF{******}'\np = 9927950299160071928293508814174740578824022211226572614475267385787727188317224760986347883270504573953862618573051241506246884352854313099453586586022059\nq = 9606476151905841036013578452822151891782938033700390347379468858357928877640534612459734825681004415976431665670102068256547092636766287603818164456689343\ne = 131074\nc = 68145285629092005589126591120307889109483909395989426479108244531402455690717006058397784318664114589567149811644664654952286387794458474073250495807456996723468838094551501146672038892183058042546944692051403972876692350946611736455784779361761930869993818138259781995078436790236277196516800834433299672560\n# 对大整数开n次方\ndef integer_nth_root(value, n):\n   \n    low, high = 0, value\n    while low <= high:\n        mid = (low + high) // 2\n        mid_pow = pow(mid, n)\n\n        if mid_pow == value:\n            return mid\n        elif mid_pow < value:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return high\n\ne = 65537*2\nn = p*q\nphi=(p-1)*(q-1)\nd=pow(e//2,-1,phi)\nm=pow(c,d,n)\n\nm=integer_nth_root(m,2)\nprint(long_to_bytes(m))\nb'NSSCTF{inverse_and_root}'\n```\n\n```python\n方法二，其实也不算方法，只是表示不同罢了\n\nd = inverse(e//2, phi) 求d\nmsg = pow(c,d,n)  解密密文\nm=gmpy2.iroot(msg,2)  对明文进行平方处理，获得原始明文\nprint(long_to_bytes(int(m[0]))) 取出明文\n```\n\n","tags":["密码"],"categories":["密码"]},{"title":"2024金盾信安杯","url":"/2024/11/21/金盾密码/","content":"\n\n\n# 金盾密码\n\n## 1.Madoka Runes\n\n直接对着表单找就能找到密码：\n\n![](屏幕截图 2024-11-30 104213.png)\n\n输入密码直接出：\n\n![](屏幕截图 2024-11-30 104306.png)\n\n\n\n## 2.ezrsa\n\n列好同余式用中国剩余解同余式直接出message然后开九次方再转字节就好\n\n```python\nfrom sympy.ntheory.modular import solve_congruence\nimport numpy\nfrom Crypto.Util.number import long_to_bytes\n\nn_list= [66713068295640123413518043679913370923560077389016834699625591280879282047385580519245403302207114741281472997841541531287076973224279941649021535158376552494753299204575589142430284284245902413434936761821799053759034189893017134579658955719886273361722719112743586542747088480330917580156612938839250815003, 93220359729942518400923319353609855683086052837300675001244736571202233288801372553449408397689671981434057617518899402068905085286369656470335384345232065925153852793862944459424133537991621353691699611625715366974136180583843591508153614052037629606307298558367556655731098521869053032772401730403014449411, 52202773445480937424957100107218762961120283036868010272682251953657674323304499771956016361962421205773156515507563827756643249104742340232742821376488784769891503342865868526919624818397054897905012127075859262952310097157907061344025347963650086443568680953905161157142612464840961117362620801749842408879, 82553091456291336768427636001211333148350777177895589619884526855175557207820633168970479619932906390584318202289854140553376548714411052752572009881543144730480476077880021537960949338405404958761168462246680451456125133754632997631949332320326017613289694983606666716680033606392964861804003584352680590087, 126128435524890593300334615443194513842505260782298991058088278168395895439505633982038040121402360495508323195308297803504735565186008100115370181050483351447644843345197960248620729714988601407534725902209206970706208957109895421381133644050169949239120391954419828419646235622192096983089233429399798724487, 147720770377839100046936497325485136233566856174851147500154290566277684557076944335857851098373121814105829685203159352831436378953250080092174133899668012220790232079503109510689810335337728388773927584457619779716463492595401880008310538176873629037401466975901825628623051950211929925214837578332196553599, 124745293442434036385822462573709029035838193243455140374004343372128515081182349880050066834995439331895246886612935567956942945644079345244280145073777541185777585728280312507028128615465026099188525829472122192943136139654002445255523350717509722226068753864376920017221041478273347340655965581264836805623, 64656553220163718805421487264999277997892395292051840710229549012813342103500529051439814363514417257605481961558538034337044004386537267801729555014122714842391331402276971310101298482954289819202770742743469979203276082437481909854637859797102334245371638799858873873188431752871644960079701293335747461831, 154462961163638672730309927702785192434305799838715175474990142746477464921396636812042793324143787346439455100764604617253217478519575381751036655163922606997960615852053060424250051534473828208356751768540768480213916080575159287230278791786807130716553816283037177870759790969384364642653232602468977815247]\nc_list=[51005516677417731886422613156402193350848583130533301906631992184482032048070107769818228079761720652832901023407822071655421580929907698799917933792960386846321370913559830272810379334182054783031538600198349058002169866824222330811827319616021940546950576540874306599558331332151055146737648080935494708588, 2041821123943473753926018035036127142293912801344695164334852819344638501433889053269955640381265246796708182948891351463478165192547358805280444112021688736247730161578747136357928895397269414940719487328949498438102882593196857341527917555021413367950508316840335830689597383465186358872674808025884021885, 46039089253322895811415983657459035212735944272443483136853555344667290454119007801590490041259097151897732463907281406082335077604849132078446981231884370863820232336507275455767858612185246444188147542289218495584026583448273138219905723711108672612950627623799697592779175874022447423932452148543363787640, 2141453012108157552120303062697739340853570994155675106097651019594420129141220901608419609082415135997293880005773756263389204887711558521855045106895075772213924319456997007171536138494274692890230609458290192980986669338031109788977632895632700245278069147479684426240615061064967367694067860411487423629, 76749087885794868408562971424611464076430009398548197992247726105066117869497135062312665153772469258809032481701272674637826659858835954148415069808346193613807990801293969464455284990574537791095652240744633974209776335844454832745233667455060558077310143770445403006416969005307667369727581132297960295340, 129889778177138425060084420953465203875702152174072537346221842914157406769944362646320734563342499686995626438417203633387851527307925692308799272755919745234368065011417961931673684360135410907645818314090652813758836919104618375252457260402923145245889643621469138808848260838951643210609251572858120327495, 108052613612357352725536091796067255652024419037660964052217185481829734452037779785712215364053116702484384622526267250489021108209478623969497489177944680864365447787229766222546592710250224997176901299205943666999952675444279695627743788911406784072960143874125846847184624670127441248507191247442198460789, 25928340017378545972137564258602345053659415847643859318668245604506696128407382577187489651429812610536514435867501876671515838666597930094267436053423009057513573482499095162969953109513790712156495250568946074742211364960292725805474100283556046328318406696121063618778241916883747109525050277568846023327, 5719067069866090256610955425807298842117899833885283417646439095103501424652337751644977233509637214830422145008935269688470956058326551761160898415661754588089616594231873985715403389476818739027591464587460581924534479591703919621116231727841975375866296368110957023963777324175359081722392018178256892283]\n\n# 创建同余方程列表,便于后续求message\ncongruences = []\nfor i in range (9):\n    congruences.append((c_list[i], n_list[i]) )\n\n# 使用中国剩余定理解同余方程组,得出message\nmessage, _ = solve_congruence(*congruences)\n\n# 定义计算整数 n 次方根的函数,因为直接开九次方开不出来，用这个方法可以对大整数开n次方\ndef integer_nth_root(value, n):\n    \"\"\"返回 value 的整数 n 次方根\"\"\"\n    low, high = 0, value\n    while low <= high:\n        mid = (low + high) // 2\n        mid_pow = pow(mid, n)\n\n        if mid_pow == value:\n            return mid\n        elif mid_pow < value:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return high\n\nm = integer_nth_root(int(message), 9)\n\nprint(\"flag:\", long_to_bytes(m))\n\n```\n\n## 3.(misc)esab\n\nRcBg1cNg9oFgpkdkNodoVoxkhsxsJoxk9kFkBoFglkFghktkxoxc9cFkls5kNodoBoNotg5klcxclgVgZ8BkdklkhkpgBo9o9cFkRopkxgpkdkpkdklcpgFgRoZoVodk5gpktgRg1sFkdk1k9spgdcxk1sBcpktkBc1sdkdoJodsBslotc1sBsxkJgxsBoloBk5ctghk9opgRoFgJoBg5cdo9cFg5c9oVoxsFsBgJgxoxk5oBcpklg5o1kVgdkFgBs9gRoloJ8ZoNoRgpslkVopk\n\n发现正常情况下无法解码，反转：\nkpoVklspgRoNoZ8JoloRg9sBgFkdgVk1o5glkpcBo5kxoxgJgBsFsxoVo9c5gFc9odc5gBoJgFoRgpo9khgtc5kBoloBsxgJkxsBs1ctolsBsdoJodkds1cBktkpcBs1kxcdgps9k1kdkFs1gRgtkpg5kdoVoZoRgFgpclkdkpkdkpgxkpoRkFc9o9oBgpkhklkdkB8ZgVglcxclk5gtoNoBodoNk5slkFc9cxoxktkhgFklgFoBkFk9kxoJsxshkxoVodoNkdkpgFo9gNc1gBcR\n\n![](屏幕截图 2024-11-30 121011.png)\n\n\n\n然后basebasebase解码直接出：\n\n![](屏幕截图 2024-11-30 121130.png)\n\n\n\n详细的base过程：\n\n![](屏幕截图 2024-11-30 121226.png)","tags":["CTF","密码","省赛"],"categories":["CTF","密码"]},{"title":"2024isCTF","url":"/2024/11/15/isctf/","content":"\n\n\n# isctf 密码wp\n\n**位（Bit）是最小的数据单位，字节（Byte）由 8 个位组成，字符则是通过字节表示的**\n\n## 我和小蓝鲨的秘密（rsa图片加密解密\n\n涉及rsa的图片加密解密\n\n原题：\n\n```python\nfrom PIL import Image\nfrom Crypto.Util.number import bytes_to_long, long_to_bytes\nimport numpy as np\n\nn = 29869349657224745144762606999\ne = 65537\n\noriginal_image_path = \"flag.jpg\"\nimg = Image.open(original_image_path)\nimg = img.convert(\"RGB\")        #将图像转换为 RGB 格式，确保每个像素包含红、绿、蓝三个通道。\n\n#将图像转换为一个 NumPy 数组，其中 h 和 w 分别代表图像的高度和宽度（像素的行数和列数），_ 是表示颜色通道数，这里应该是 3，因为是 RGB 图像。后续代码也写出是3了\nimg_array = np.array(img)\nh, w, _ = img_array.shape\n\n#初始化一个空的 NumPy 数组，用于存储加密后的图像数据。数组的形状是 (h, w, 3)，即和原图像一样的尺寸和颜色通道。dtype=object 表示该数组中的元素将是任意类型的对象，这里存储的是加密后的整数。\nencrypted_array = np.zeros((h, w, 3), dtype=object)\n\n#遍历像素点\nfor i in range(h):\n    for j in range(w):\n        #提取当前像素的红、绿、蓝通道的值（每个值范围通常是 0 到 255）\n        r, g, b = int(img_array[i, j, 0]), int(img_array[i, j, 1]), int(img_array[i, j, 2])\n\t\t#rsa加密\n        encrypted_array[i, j, 0] = pow(r, e, n)\n        encrypted_array[i, j, 1] = pow(g, e, n)\n        encrypted_array[i, j, 2] = pow(b, e, n)\n\nnp.save(\"encrypted_image.npy\", encrypted_array)\nprint(\"图片已加密并保存为 encrypted_image.npy\")\n```\n\n\n\n题解：d可以直接分解n然后得到p和q再得到d，代码没写\n\n```python\nfrom Crypto.PublicKey import RSA\nimport numpy as np\nfrom PIL import Image\n\n# RSA私钥中的 d 和 n\nd = 114529273505388659836222611033 \nn = 29869349657224745144762606999\ne = 65537 \n\n# 从文件读取加密后的图像数据\n#此选项允许加载含有 Python 对象的 .npy 文件，因为加密图像数据的类型可能是 object（例如存储的是整数的加密结果）\nencrypted_array = np.load(r\"E:\\edge下载\\CTF\\isctf\\我和小蓝鲨的秘密\\我和小蓝鲨的秘密\\encrypted_image.npy\", allow_pickle=True)\n\n#高、宽和3（上面说了，不再赘述）\nh, w, _ = encrypted_array.shape\n#用于后续存放解密后的数据\ndecrypted_list = []\n\n# 对每个像素进行解密\nfor i in range(h):\n    row = []\n    for j in range(w):\n        pixel = []\n        for channel in range(3):  # 红、绿、蓝三个通道\n            #获取加密数据\n            encrypted_value = encrypted_array[i, j, channel]\n            #对加密数据进行解密\n            decrypted_value = pow(encrypted_value, d, n)  # 使用RSA私钥解密\n            #讲解秘数据加入到decrypted_list中，用于后续转为图片\n            pixel.append(decrypted_value)\n        row.append(pixel)\n    decrypted_list.append(row)\n\n# 将解密后的像素值转换为 numpy 数组\ndecrypted_array = np.array(decrypted_list, dtype=object)\n\n# 将解密后的数据转换为图像\ndecrypted_array = np.clip(decrypted_array, 0, 255).astype(np.uint8)  # 确保像素值在有效范围内\ndecrypted_img = Image.fromarray(decrypted_array)\n\n# 保存解密后的图片\ndecrypted_img.save(\"decrypted_image.jpg\")\ndecrypted_img.show()\n\nprint(\"图片已解密并保存为 decrypted_image.jpg\")\n```\n\n![屏幕截图 2024-11-10 130024](屏幕截图 2024-11-10 130024.png)\n\n\n\n## ChaCha20-Poly1305\n\n```\nChaCha20-Poly1305加密解密原理\nChaCha20 和 Poly1305 是现代密码学中两种常用的加密算法。它们被设计为高效且安全的算法，常用于保障数据的隐私性和完整性。它们可以联合使用，组成一种“认证加密算法” (Authenticated Encryption with Associated Data, AEAD)，既提供加密（保密性）又提供完整性验证（认证性）。ChaCha20-Poly1305的组合方式是在加密数据时确保其不仅是保密的，而且可以检测是否被篡改。\n\n1. ChaCha20 加密算法\nChaCha20 是一种流密码算法，它的设计基于 ChaCha 算法，ChaCha 是 Salsa20（另一种流密码算法）的一个变种。ChaCha20 每次操作生成 256 位的伪随机输出，常用于加密数据流。\n\nChaCha20的工作原理：\nChaCha20 的加密过程可以分为以下几个步骤：\n\n输入：它需要一个 256 位的密钥、一个 64 位的随机初始值（nonce）和一个 32 位的计数器。\n状态初始化：ChaCha20 从密钥和其他信息（如nonce、计数器等）创建一个 4x4 的矩阵（共 16 个 32 位的字），这些数据用于初始化算法的内部状态。\n流密码生成：通过不断迭代应用非线性操作（包括加法、异或和循环移位等），生成伪随机数流。\n加密过程：生成的伪随机数流与明文数据按位异或，从而完成加密。\nChaCha20 的加密过程包括 20 轮迭代，并且每一轮迭代都使用对称的操作，确保最终输出是高度随机的。\n\n2. Poly1305 消息认证码（MAC）\nPoly1305 是一种基于单一密钥的消息认证码 (MAC)，用来提供数据完整性和认证。它通过对消息进行加密生成唯一的签名，使接收方可以验证消息是否被篡改。\n\nPoly1305的工作原理：\n输入：Poly1305 接受一个 256 位的密钥和一段消息（数据块）。\n算法：Poly1305 将消息划分成固定大小的块（通常为 16 字节），然后使用密钥对这些块进行加密、处理。\n认证码生成：每个数据块经过加密后生成一个认证码，最后生成的认证码可以用来验证消息是否在传输过程中被篡改。\nPoly1305 是一个高效的认证码生成算法，其安全性基于大数分解的困难性。\n\nChaCha20-Poly1305 组合\nChaCha20 和 Poly1305 结合在一起，提供了 认证加密（Authenticated Encryption，AE）。在这种组合中，ChaCha20 提供加密功能，确保数据的机密性；而 Poly1305 提供消息认证功能，确保数据没有在传输过程中被篡改。\n\n工作流程：\n加密：\n使用 ChaCha20 对数据进行加密，生成密文。\n生成认证码：\n使用 Poly1305 对密文及相关数据（如头部信息、nonce 等）生成认证码（MAC）。\n传输：\n将密文和认证码一起传输到接收方。\n验证与解密：\n接收方使用相同的密钥和nonce对密文进行解密。如果认证码验证成功，说明数据没有被篡改，接收方就可以得到明文数据；如果认证码验证失败，数据被认为已经被篡改或丢失完整性。\nChaCha20-Poly1305 的安全性\n保密性：ChaCha20 是一个高质量的流密码，具有强大的加密能力。\n完整性：Poly1305 作为认证码生成器，可以检测出数据是否在传输过程中被篡改。\n抗攻击性：ChaCha20-Poly1305 组合抗受多种攻击，包括重放攻击和密钥恢复攻击。\n由于 ChaCha20 的高效性和 Poly1305 的简单性，该组合算法非常适合在需要快速加密且对安全性有较高要求的场景中使用，如 TLS、VPN 和加密通信协议。\n\n名字的由来\n1. ChaCha20\n“ChaCha20” 中的 ChaCha 是该算法的名字来源。ChaCha 是 Salsa20（由 Daniel J. Bernstein 提出的流密码算法）的一个变种，ChaCha 在 Salsa20 的基础上做了一些增强，使其更安全且更易于分析。\n\n“ChaCha” 这个名字来自于 Salsa20 的“舞蹈”名称（Salsa 是一种舞蹈，而 ChaCha 是 Salsa 的一种变体），这种名称可能暗示着 ChaCha20 的变化和增强。\n数字 20 表示该算法执行的迭代次数为 20 轮，保证了更强的安全性。\n2. Poly1305\nPoly1305 是由 Daniel J. Bernstein 提出的消息认证码（MAC）。这个名字来源于它的数学基础：它基于一个多项式（poly）的计算。\n\n数字 1305 代表了 Poly1305 使用的一个具体的多项式，通常是一个在有限域上进行计算的多项式。\n结合起来，ChaCha20-Poly1305 代表了这两种算法的结合体，其中：\n\nChaCha20 是加密算法的名称，基于 ChaCha 的变种。\nPoly1305 是消息认证码的名称，基于一个多项式的计算。\n这个名字简洁地表达了该加密组合的两个核心算法，并标明了其关键的安全特性：加密与认证。\n\n总结\nChaCha20 提供流密码加密，确保数据的机密性。\nPoly1305 提供消息认证码（MAC），确保数据的完整性和认证。\nChaCha20-Poly1305 组合提供了高效、安全的认证加密功能，广泛用于现代网络安全协议中，如 TLS 1.3。\n```\n\n\n\n```\nChaCha20-Poly1305 解释\nChaCha20：一种流密码算法，用于生成伪随机密钥流。其优点包括速度较快和抗破解能力强。\nPoly1305：一种认证码算法，用于生成数据完整性和认证的哈希值，确保数据在传输过程中没有被篡改。\n\n在 PyCryptodome 或类似的加密库中，ChaCha20-Poly1305 模式通常通过 ChaCha20_Poly1305 类来实现。cipher.encrypt_and_digest() 方法会同时加密数据并生成认证码。\n\n生成密钥和nonce：\n\nkey = get_random_bytes(32)：生成一个32字节的随机密钥，这是 ChaCha20-Poly1305 所需要的密钥长度。\nnonce = get_random_bytes(12)：生成一个12字节的随机数（nonce），这是 ChaCha20-Poly1305 模式要求的长度，通常 nonce 必须是唯一的，不能重复。\n创建 ChaCha20_Poly1305 对象：\n\n使用 ChaCha20_Poly1305.new() 创建一个新的加密对象，传入密钥和 nonce。\n加密和生成认证码：\n\ncipher.encrypt_and_digest(plaintext)：这个方法既加密数据，也计算出一个认证码（tag）。认证码可以用来验证数据在传输过程中是否被篡改。\n输出密文和认证码：\n\nciphertext：加密后的数据。\ntag：Poly1305 算法生成的认证码，用来保证数据的完整性和真实性。\n\nChaCha20-Poly1305 提供了 认证加密（AEAD），它不仅确保了数据的 机密性（通过加密）还确保了数据的 完整性（通过认证码）。\ncipher.encrypt_and_digest() 同时执行加密和认证操作，返回加密后的数据和认证码（tag）。\n解密时，使用相同的密钥和 nonce，并且需要提供正确的认证码来验证数据的完整性。\n这种加密方式广泛应用于安全通信协议，如 TLS、VPN 和现代加密货币应用中，因为它在速度和安全性方面表现出色。\n```\n\n原题：\n\n```python\nfrom Crypto.Cipher import ChaCha20_Poly1305\nimport os\n\nkey = os.urandom(32)\nnonce = os.urandom(12)\n\nwith open('flag.txt', 'rb') as f:\n    plaintext = f.read()\n\ncipher = ChaCha20_Poly1305.new(key=key, nonce=nonce)\n\nct, tag = cipher.encrypt_and_digest(plaintext)\n\nprint(f\"Encrypted Flag: {ct.hex()}\")\nprint(f\"Tag: {tag.hex()}\")\nprint(f\"Nonce: {nonce.hex()}\")\n\nwith open('key.txt', 'w') as key_file:\n    key_file.write(key.hex())\n```\n\n这是ChaCha20_Poly1305，它的原理，我还没看，这几天摆烂了，不想学习，看加密过程大概了解到：用key（密钥），nonce（只被使用一次的任意或非重复的数值）可以加密得到cipher，然后用cipher生成认证码ct和tag，用于防止密文被破解（具体过程不清楚）\n\n原题是给了个txt的文本，里面给的东西很多（基本上是都i给你了），**但是**byd我最开始以为是截取长度再base91解出key（hex），没想到他是base92直接出然后用\n\n这是解密：\n\n```python\nfrom Crypto.Cipher import ChaCha20_Poly1305\nimport binascii\nfrom Crypto.Util.number import *\n# 已知的 hex 数据\nhex_nonce = \"d8ebeedec812a6d71240cc50\"\nhex_tag = \"70ffcc508bf4519e7616f602123c307b\"\nhex_ciphertext = \"20408b9fc498063ad53a4abb53633a6a15df0ddaf173012d620fa33001794dbb8c038920273464e13170e26d08923aeb\"\nbase92_key = \"3=t#sMX3?9GHSPdi4i^gk!3*(cH8S8XT2y&?Tv4!?AGG=R]ZDy/PVVa+DqiXAH*}DS&Nn*a+@<H,=!L\"\ndecoded_key =0x173974535637a5ef30a116b03d00bd2fe751951ca3eaa62daec2b8f5ca5b6135\ndecoded_key=long_to_bytes(decoded_key)\n# 将 hex 转换为字节\nnonce = binascii.unhexlify(hex_nonce)\ntag = binascii.unhexlify(hex_tag)\nciphertext = binascii.unhexlify(hex_ciphertext)\n\ncipher = ChaCha20_Poly1305.new(key=decoded_key, nonce=nonce)\nplaintext = cipher.decrypt_and_verify(ciphertext, tag)\nprint(\"解密后的数据:\", plaintext.decode('utf-8'))\n```\n\n![](屏幕截图 2024-11-15 213023.png)\n\n\n\n## 蓝鲨的费马\n\n这是原题：\n\n```python\nfrom gmpy2 import*\nfrom Crypto.Util.number import *\nfrom sympy import *\n\nflag=b'ISCTF{********}'\nm=bytes_to_long(flag)\n\np=libnum.generate_prime(1024)\nq=libnum.generate_prime(1024)\nn=p*q\ne=0x10001 \ne=65537\nc=pow(m,e,n)\nd=inverse(e,(p-1)*(q-1))\nleak = (d+(pow(p,q,n)+pow(q,p,n)))%n\n\nprint(\"c=\", c)\nprint(\"n=\", n)\nprint(\"leak=\", leak)\n```\n\n这个不是很难，有点难罢了：\n\n![](A8CED196128B7720AA3C9C771B1D0E6D.jpg)\n\n然后代码是这样：\n\n```python\nfrom gmpy2 import*\nfrom Crypto.Util.number import *\nfrom sympy import *\n\nc=\nn=\nleak=\ne=\nl=e*leak%n\nfor k in range (e):\n    if((l-1-k)%(e-k)==0):\n        p_and_q=(l-1-k)//(e-k)\n        a=p_and_q*p_and_q-4*n\n        \n        \n        if(a<=0):\n            continue\n        b=iroot(a,2)\n        if(b[1]):\n            p=(p_and_q+b[0])//2\n            q=(p_and_q-b[0])//2\n            d=pow(e,-1,(p-1)*(q-1))\n            m=pow(c,d,n)\n            print(long_to_bytes(m))\n\n```\n\n![](屏幕截图 2024-11-15 221522.png)\n","tags":["CTF","密码"],"categories":["CTF","密码"]},{"title":"2024的1024新生赛","url":"/2024/10/24/1024新生赛/","content":"\n\n\n# 1024新生赛\n\n\n\n## 好用的网址\n\n[在线工具 - Bugku CTF平台](https://ctf.bugku.com/tools)\n\n[Base64 编码/解码 - 锤子在线工具](https://www.toolhelper.cn/EncodeDecode/Base64)\n\n\n\n## 凯撒也干了\n\n题目就给提示了，是凯撒加密（一种替换加密，我们直接求出：\n\n![屏幕截图 2024-10-24 173910](屏幕截图 2024-10-24 173910.png)\n\n至于偏移量为什么是二，因为凯撒加密是一种替换加密，我们知道flag的形式是xxxCTF{}  ARD右移两位就是CTF，所以偏移量就是-2\n\n\n\n\n\n## 曲径通幽处\n\n题目描述：一个古典部的少年从一条路的尽头上下上下上的走过了一条弯曲的路，并且经过了5个庭院和5个学校。\n\n本题flag头为ISCTF\n\n判断其为古典加密，且给出提示上下上下上 5 5，给出的文本又是：}I_cFTle_FToneCSWnTC5@0{I \n\n共25位判断其为栅栏加密，我们根据提示分成五组：\n\n}I_cF\n\nTle_F\n\nToneC\n\nSWnTC\n\n5@0{I \n\nflag开头为ISCTF，又根据给出的提示，我们可以浅试一手：\n\n![屏幕截图 2024-10-24 181631](屏幕截图 2024-10-24 181631.png)\n\n得出flag，\n\n\n\n## long_to_bytes\n\n这是原题：\n\n```python\nfrom Crypto.Util.number import *\nflag=b'flag{xxxxx}'\nn=bytes_to_long(flag)\nprint(n)\n'''\nn=264482712154165850801381669076121773480907739897690780617124341999230794182590691214396064148014801051776269633074284019581\n'''\n```\n\n这个题需要python和在python中安装crypto，安装python和crypto的教程在网上都好找，在此不再演示\n\n这个比较简单，安装好这两个东西后直接long_to_bytes()就好了：\n\n```python\nfrom Crypto.Util.number import *\n# flag=b'flag{xxxxx}'\nn=n=264482712154165850801381669076121773480907739897690780617124341999230794182590691214396064148014801051776269633074284019581\nn=long_to_bytes(n)\nprint(n)\n'''\nb'flag{wanyi_nijiushi_na_wanzhongwuyi_de_tiancai_ne?}'\n'''\n\n```\n\n\n\n## ez_math\n\n```python\nfrom secret import flag\nfrom Crypto.Util.number import *\n\n\ndef s2n(string):\n\treturn int(string.encode(\"utf-8\").hex(),16)\n\n\nm = s2n(flag)\n\nn1 = getPrime(256)\nn2 = getPrime(256)\n\nc1 = m % n1\nc2 = m % n2\n\nwith open(\"./result.txt\",\"w\") as file:\n\tfile.write(f\"{c1=}\\n{c2=}\\n{n1=}\\n{n2=}\")\n\tfile.close()\n```\n\n这个可以直接套脚本或者用sympy的内置方法就好：\n\n```python\nfrom sympy.ntheory.modular import solve_congruence\nfrom Crypto.Util.number import *\nc1=37249702839435135643850404026024412683134998575291233690988327543619514037695\nc2=18416923650953751308058552833370734669994554569844095575888642338823812375656\nn1=78333809298116952939564356593122079059999883827426443480510842209201768015887\nn2=72210330055051819360448136226819845758816865049329539316060036869938240551269\n\nm, _ = solve_congruence((c1, n1), (c2, n2))\n\n\n\n\nflag = long_to_bytes(m)\nprint(\"Recovered flag:\", flag)\n'''HTUCTF{6e517351-cc04-4917-85da-47384fc14316}'''\n\n```\n\n\n\n```python\ndef extended_gcd(a, b):\n    \"\"\" 返回 (gcd, x, y) 使得 ax + by = gcd \"\"\"\n    if a == 0:\n        return (b, 0, 1)\n    gcd, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return (gcd, x, y)\n\ndef mod_inverse(a, m):\n    \"\"\" 计算 a 在模 m 下的逆元 \"\"\"\n    gcd, x, _ = extended_gcd(a, m)\n    if gcd != 1:\n        raise ValueError(\"Inverse does not exist\")\n    return x % m\n\ndef chinese_remainder_theorem(c1, c2, n1, n2):\n    \"\"\" 根据中国剩余定理计算 m \"\"\"\n    # 验证 c1 和 c2 的合法性\n    if not (0 <= c1 < n1) or not (0 <= c2 < n2):\n        raise ValueError(\"c1 must be less than n1 and c2 must be less than n2\")\n    \n    # 计算 n1 和 n2 的逆元\n    n1_inv = mod_inverse(n1, n2)\n    n2_inv = mod_inverse(n2, n1)\n\n    # 根据 CRT 的公式计算 m\n    m = (c1 * n2 * n2_inv + c2 * n1 * n1_inv) % (n1 * n2)\n\n    return m\n\n# 示例\nc1 = 2  # 例：m % n1\nc2 = 3  # 例：m % n2\nn1 = 5  # 模数 n1\nn2 = 7  # 模数 n2\n\nm = chinese_remainder_theorem(c1, c2, n1, n2)\nprint(\"The value of m is:\", m)\n```\n\n\n\n## 普通的RSA\n\n这个涉及RSA了，感觉一时半会讲不完，讲了你们也听不懂，先放原题吧：\n\n```python\nfrom secret import flag\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\n\ndef s2n(string):\n\treturn int(string.encode(\"utf-8\").hex(),16)\n\nn=p*q\n\nm = s2n(flag)\n\ndef gen():\n\tp = getPrime(1024)\n\tq = int(next_prime(p))\n\tn = p*q\n\tphi = (p-1)*(q-1)\n\te=0x10001\n\twhile(gcd(phi,e) != 1):\n\t\tp = getPrime(1024)\n\t\tq = next_prime(p)\n\t\tn = p*q\n\t\tphi = (p-1)*(q-1)\n\treturn (n,e,phi)\n\n\nn,e,phi = gen()\nc = pow(m,e,n) m**e(mod n)=c m=c**d modn\n\nwith open(\"./RSA.txt\",\"w\") as file:\n\tfile.write(f\"{n=}\\n{c=}\")\n\tfile.close()\n\n```\n\n这种是已知n，c，e的，通过q=next_prime(p)我们知道p和q比较接近，所以可以利用这一点来解密：\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\nfrom sympy import  nextprime, root\nimport math\nn=18949498985986928711843321080602823701712014042049416390846564093388611291117062696087230880365026760797539322795552533481425232454936702742130962936755703750058517665792856275700722341035864624409094208842377728513453452818841799059356922700403897583999797293831012950825029618460259198795550064691440879505779511194409762430676541543737089954665642736218306476220888830115844610819075723263763070748740428190826833316582893965878723227457610920738816258244554829877952822355818446165333343949923505996270102899784022411761912934504022393721987105209305284347043340327561826434179480900699255745436348685748974901201\nc=2969824285249100526322302682221040716867970513038732238063889997163423491301934038093514987472802359998652707545381821218024355980402402868317513122066439113058805805494989902360947778584693127259486538542108670777034276473922171938113305898239307091304099755800468445443498516447604650800088630197154105031841166708938180803550612723800232703109540434743220287394920524894879882922225369950384603748805110488531200017670810970677068957353697200297293764561028264920407022749642913030162012868067293039018324185505638205631433386764255108667369874722506838551476625040094069895067492912258930920239951143338333435586\n\ne=65537\na=root(n,2)\n\nq=nextprime(a)\n\np=n//q\nphi=(p-1)*(q-1)\n\nd=pow(e,-1,phi)\nm=pow(c,d,n)\nprint(long_to_bytes(m))\nb'HTUCTF{bb818877-0509-47a4-9a69-e26f69fc355a}'\n```\n\n\n\n## attack\n\n这个是一个简单的基于字母表的加密系统。它使用字母到数字的映射，结合一个密钥，通过对应元素相加的方式对字符串进行加密。由于代码的设计，非字母字符不会被加密，因此它们将保持不变。\n\n\n\n原题：\n\n```py\nfrom secret import flag\nimport string\n\n# 实现列表对应元素相加（加密部分）\ndef add_list(x,y):\n    result = []\n    for i in range(len(x)):\n        z = x[i] + y[i]\n        result.append(z)\n    return result\n\n\n# 实现列表元素对应相减（解密部分）\ndef sub_list(x,y):\n    result = []\n    for i in range(len(x)):\n        z = x[i] - y[i]\n        result.append(z)\n    return result\n# 构造映射 字符---->num\ndef c2n():\n    list_c = []\n    list_n = []\n    for i in range(26):\n        list_n.append(i)\n        list_c.append(chr(i+97))\n    dic_c2n = dict(map(lambda x,y:[x,y],list_c,list_n))\n    return dic_c2n\n\n\n# 构造映射 num---->字符\ndef n2c():\n    list_c = []\n    list_n = []\n    for i in range(26):\n        list_n.append(i)\n        list_c.append(chr(i+97))\n    dic_n2c = dict(map(lambda x,y:[x,y],list_n,list_c))\n    return dic_n2c\n# 加密\ndef encode(s,key):\n    # print('加密后的字符： ',end='')\n    dic_c2n = c2n()\n    dic_n2c = n2c()\n    list_s = []\n    list_key = []\n    list_finall = []\n    for i in s:\n        i = i.lower()\n        list_s.append(dic_c2n[i])\n    for i in key:\n        i = i.lower()\n        list_key.append(dic_c2n[i])\n    for i in list_key:\n        if len(list_key) <= len(list_s):\n            list_key.append(i)\n    list_result = add_list(list_s,list_key)\n    for i in list_result:\n        if i > 25:\n            i -= 26\n        list_finall.append(dic_n2c[i])\n    return list_finall[0]\n\ndef all_encode():\n\tkey = \"HELLO\"\n\tcount = 0\n\tkeyword = string.ascii_letters \n\tresult = \"\"\n\tfor i in range(len(flag)):\n\t\ttk = key[count % len(key)]\n\t\tif flag[i] not in keyword:\n\t\t\tresult += flag[i]\n\t\telse:\n\t\t\tresult += encode(tk,flag[i])\n\t\t\tcount += 1\n\treturn result\n\nencode_data = all_encode()\n\nwith open(\"./attack.txt\",\"w\") as file:\n\tfile.write(f\"secret is :{encode_data}\")\n\tfile.close()\n\n```\n\n\n\n了解加密过程：在加密过程中，我们将字母转换为对应的数字，然后将这些数字与密钥的数字相加（并使用模 26 处理）。为了反向解密，我们需要进行相减操作。就写代码进行解密就好了。\n\n直接丢给ai也行，因为这是简单的加密解密（思考\n\n```python\nimport string\nfrom Crypto.Util.number import *\n\nencoded=\"oxfnhm{44648e87-2632-4236-997l-po38k362837h}\"\n# 字符到数字的映射\ndef c2n():\n    dic_c2n = {chr(i + 97): i for i in range(26)}  # 'a' = 97\n    return dic_c2n\n\n# 数字到字符的映射\ndef n2c():\n    dic_n2c = {i: chr(i + 97) for i in range(26)}  # 'a' = 97\n    return dic_n2c\n\n# 从两个列表中减去对应的数字\ndef sub_list(list_s, list_key):\n    return [(s - key) % 26 for s, key in zip(list_s, list_key)]\n\n# 解密函数\ndef decode(s, key):\n    dic_c2n = c2n()\n    dic_n2c = n2c()\n    list_s = []\n    list_key = []\n    list_final = []\n\n    # 将字符串和密钥转换为数字\n    for i in s:\n        i = i.lower()\n        if i in dic_c2n:  # 只处理字母\n            list_s.append(dic_c2n[i])\n    for i in key:\n        i = i.lower()\n        if i in dic_c2n:  # 只处理字母\n            list_key.append(dic_c2n[i])\n\n    # 解密：用密钥的数字减去字符串的数字\n    list_result = sub_list(list_s, list_key)\n\n    # 将解密结果转换为字符\n    for i in list_result:\n        list_final.append(dic_n2c[i])\n\n    return ''.join(list_final)\n\n# 解密全部\ndef all_decode(encoded_string):\n    key = \"HELLO\"  # 密钥\n    count = 0\n    result = \"\"\n\n    for i in range(len(encoded_string)):\n        tk = key[count % len(key)]  # 获取密钥字符\n        if encoded_string[i] not in string.ascii_letters:  # 保持非字母字符不变\n            result += encoded_string[i]\n        else:\n            result += decode(encoded_string[i], tk)  # 解密字母\n            count += 1  # 只对字母增加计数\n    return result\n\ndecoded=all_decode(encoded)\nprint(decoded)\n\n\n'htuctf{44648a87-2632-4236-997a-ea38d362837d}'\nhtuctf{44648a87-2632-4236-997a-ea38d362837d}\n```\n\n哦，维吉尼亚加密解密，因为直接用ai出了就没管他。这里感谢rph的提问\n\n\n\n## ReDs\n\nok啊，这是随机数预测，详情请看：\n\n[[CTF/randcrack\\]python随机数预测模块分析及改进方案_random.getrandbits(32)-CSDN博客](https://blog.csdn.net/qq_42557115/article/details/128228201)\n\n原题：\n\n```python\nfrom secret import flag\nfrom random import getrandbits\nfrom Crypto.Cipher import AES\nimport base64\n\ndef pad(data):\n\tdata=data.encode('utf8')\n\twhile len(data) % 16 !=0:\n\t\tdata+=b'\\x00'\n\treturn data\n\n\ndef encode(key,m):\n\tmode=AES.MODE_ECB\n\taes=AES.new(pad(key),mode)\n\ten_m=aes.encrypt(pad(m))\n\ten_m=base64.encodebytes(en_m)\n\ten_m=en_m.decode('utf8')\n\treturn en_m\n\n\nwith open(\"./ReDs.txt\",\"w\") as file:\n\tfor i in range(624):\n\t\tfile.write(str(getrandbits(32)) + \"\\n\")\n\t\t\n\tkey= str(getrandbits(32))\n\tencode_data = encode(key,flag)\n\tfile.write(f\"\\n{encode_data=}\")\n\tfile.close()\n```\n\n给出了624个32位随机数，我们可以预测出下一个数，也就是我们能预测出key的值\n\n具体原因：（为什么会被预测）是因为这是随机数算法的一个，算是漏洞？\n\n然后这一题有两种方法，一种是爆破：\n\n```py\nfrom tqdm import trange\nfrom base64 import b64decode\nfrom Crypto.Cipher import AES\nfrom multiprocessing import Pool, current_process\nimport os\n\n\nenc_data = 'AcQYXx1jdOVU2wArqtW3JAfd5fPgkBMMcbOfz8C2x71aP9CUH0pZp3moQ3PXyETQ'\ndata = b64decode(enc_data)\n\ndef pad(data):\n\tdata=data.encode('utf8')\n\twhile len(data) % 16 !=0:\n\t\tdata+=b'\\x00'\n\treturn data\n\n\ndef decode(key, text) -> bytes:\n\taes = AES.new(pad(key),AES.MODE_ECB)\n\treturn aes.decrypt(text)\n\ndef task(start, per_size, pool):\n\tprint(f\"process id {os.getpid()}\")\n\tfor key in range(start, start + per_size):\n\t\tif decode(str(key), data).startswith(b\"HTUCTF\"):\n\t\t\tprint(\"key found!!!!!!\",key,decode(str(key), data))\n\t\t\tbreak\n\n\ndef main():\n\tfull_size = 2**32 # 搜索大小为32bit\n\tsize = 60 # 创建60个进程\n\tper_size = full_size // size # 分配任务，类似于分段搜索\n\tnext_size = 0 # 初始化开始位置\n\tp = Pool(size) # 创建进程池\n\tfor _ in range(size):\n\t\tif next_size + per_size > full_size:\n\t\t\tper_size = full_size - next_size\n\t\tp.apply_async(task, args=(next_size, per_size) ) #执行区间搜索\n\t\tnext_size += per_size\n\n\tp.close()\n\tp.join()\n\n\nif __name__ == \"__main__\":\n\tmain()\n```\n\n一种是随机数预测：\n\n```py\n# -*- coding: utf-8 -*-\nfrom randcrack import RandCrack\nfrom base64 import b64decode\nimport random\nfrom random import getrandbits\nfrom Crypto.Cipher import AES\nimport base64\na=list(map(int,\n'''3848073275\n241649934\n3943503978\n258207836\n4081811965\n1651597630\n3325676874\n2964002855\n2822968513\n2666937310\n1491453920\n1125945763\n3298869747\n1658212672\n3058975936\n2725466828\n3389990175\n1388788501\n2462009241\n3150354943\n967382871\n352984748\n3040743723\n4294319733\n2578486\n44793404\n2092478614\n3305053974\n2317871683\n951087322\n967755183\n2306228127\n3742813448\n2731897813\n3998026101\n2159565135\n3348069958\n573267799\n532111185\n2953591763\n1924882170\n4247342793\n3554062734\n422061186\n3744472386\n2710908183\n3144423263\n3192716483\n3250605029\n1319720487\n1427845172\n3548479290\n713602566\n2914364483\n3275801257\n3294429580\n861598555\n916869896\n4011565193\n3872765094\n2202499079\n1112772860\n943061165\n1127268558\n1191904981\n202839297\n2217513610\n1555539251\n4197529363\n2964776675\n2345984344\n510018469\n2175777793\n3528057283\n1191665294\n17211303\n627730758\n2262562395\n945890808\n3353488871\n2841159564\n276317799\n1345022153\n3590282650\n2672565268\n3514593588\n3277562238\n660536138\n2623776010\n2086786901\n2114048589\n3608894706\n4047393720\n279675399\n1259977480\n3609373486\n378639667\n1278916783\n1379361765\n655898478\n2839396244\n2219102487\n3707908754\n1748586281\n2193471801\n3903443072\n4271704349\n1358952278\n3497140619\n1443589434\n548706251\n3767751035\n1183030620\n2712473450\n163431655\n4257007018\n3124929768\n3890351873\n2451975774\n433864241\n3469948918\n3348294888\n1962699470\n4261604784\n1001781349\n1501063835\n1880370779\n733915495\n4283585478\n1619412316\n756021595\n2747259301\n3465198545\n914357015\n3596175628\n588495874\n353343278\n3081205941\n1395931346\n4026172262\n3739015728\n1843232309\n443097617\n1164709487\n4221809970\n2634437501\n1593786293\n469355994\n24615172\n707572888\n943196518\n18468306\n1264279229\n3289009232\n1431434901\n3321775597\n398545961\n3269720908\n934234339\n1252656237\n1577089958\n784788447\n415000408\n1670066404\n3680124941\n3081714929\n1597657805\n4040394861\n3306653316\n1233267726\n2447271906\n2520200775\n2055123854\n472980557\n3243859485\n818987679\n3493509794\n3147151208\n3230082863\n1849634131\n4070799626\n4254456883\n3610260612\n2800938443\n3230892817\n72467472\n4174881967\n1455309059\n23957586\n592215091\n3535987654\n4162982524\n4070092036\n810224056\n3762438174\n1941967791\n1956735504\n2433715699\n2128333110\n2651450563\n2900194117\n2253117406\n3598426017\n2377672371\n1755246801\n314762693\n745778362\n2537298089\n3810849306\n2745684961\n3584546853\n1167809979\n1691175119\n3911648214\n472813388\n3573200122\n3335394763\n1143689701\n1310750824\n3273713261\n2861967032\n3292294686\n3495244137\n32546497\n2514258418\n644062907\n3436100762\n2824906010\n452257527\n3279573375\n2458549481\n2536571745\n246180616\n3607555386\n507624013\n1354552482\n3165402213\n2188059926\n3046902370\n3186516316\n1005872010\n3862615954\n2549635115\n3198068926\n1932522749\n2658613263\n2717159733\n1998688908\n66770584\n2810405316\n3871389330\n1090631798\n902454188\n2016606331\n2323885311\n1420297041\n3728930715\n3441662165\n1553367163\n1750973533\n2544325113\n842323619\n1145275782\n1306711869\n4093964305\n1417666177\n574791083\n2353047834\n1106667006\n2707446091\n358655385\n1839936688\n1161620827\n1613270503\n2650740792\n2524210940\n2373882531\n957022932\n3751813999\n3874001898\n287991675\n3902476446\n3861705660\n1402891764\n3353505689\n3020772361\n2398499998\n2762040925\n1090541608\n2701409894\n2832683852\n233427823\n3599966598\n4115895603\n2620188711\n2311803279\n1055863801\n3805927781\n2428343271\n611342069\n6231335\n304265153\n2593708925\n2380757927\n3315568191\n2851109544\n3069380271\n353352306\n1028897685\n2351996621\n1498454275\n3221794457\n2007982751\n4042987321\n1572793920\n2806215892\n2637773365\n1933882604\n613627475\n2863867524\n2058146427\n308701869\n210314643\n347649511\n110788168\n1040475968\n3696224193\n87343509\n4270944556\n1725161139\n1262423690\n1222429754\n4022037346\n3104199191\n148086782\n4174338629\n2927068467\n3174216196\n2058120239\n2973842243\n1472307010\n3654221498\n916706160\n683084656\n2466389764\n3647383069\n762414998\n1936317343\n1262258329\n3285874257\n654586813\n3446752043\n680787991\n1436279988\n1965579601\n226999456\n1809553783\n4196267862\n1612015581\n2443834153\n2844161804\n1933785366\n1222011827\n3088868876\n3907129148\n1922204261\n130812762\n2951944873\n1191116108\n1429336684\n46097604\n2968366770\n3274267527\n2397124603\n1015603405\n3767951355\n3528549131\n229484595\n1797847468\n28773013\n3191798828\n2056107601\n3033083158\n3731687545\n66036574\n559293609\n3754464420\n3591927528\n1199729886\n2916416911\n2076366139\n2861715275\n543619922\n174558028\n1054439233\n2055206719\n2684152448\n1201960873\n3973995702\n88284321\n2858348308\n3264813661\n604843061\n2971590523\n2547374946\n3233226819\n2575969200\n1434093836\n3006298381\n1478025637\n2359328731\n3400179181\n3802006073\n2585016436\n2691741615\n2819187100\n1162740832\n2315811393\n3253463985\n2267209889\n538240713\n4140421276\n102343813\n603771935\n2239738493\n354434834\n2727051669\n4031266066\n1134094029\n3944646252\n4171273390\n2554104525\n3536938884\n4043026353\n1066101437\n920595909\n3698068676\n2552098334\n3058235330\n333175813\n516219629\n2893972647\n1753585988\n4102335764\n404081860\n1302565168\n1560751628\n1326908270\n1336241767\n1990141412\n2784933936\n4107678731\n561088673\n4290790389\n782055190\n628820167\n1002639224\n512875389\n3515451570\n1638720756\n1096767326\n1100939462\n1723925786\n3114917632\n2187251778\n4054994015\n2976247062\n1704390268\n694973902\n315832619\n850984400\n2131043703\n1241244520\n502167158\n3222028509\n2647433989\n2279050826\n1412251353\n2732461774\n1474408664\n1770603176\n1834957530\n623461887\n2553713093\n3879669503\n4293126158\n659580267\n3895659763\n1525418667\n4120666508\n2905137942\n592990536\n723856024\n2966407773\n2277107143\n3753420260\n678568086\n255658731\n993488200\n3042631443\n2647394306\n1136382294\n2445098219\n1191563818\n3360445919\n2964756553\n2715488804\n548149673\n3357409579\n802677002\n3094329008\n3105047412\n2103895343\n3990247790\n2038617798\n639331452\n2478692397\n1616037208\n1299609422\n1772984623\n3441943692\n912246885\n729136629\n78685016\n3645521504\n1881795825\n1830185639\n1212553438\n187419169\n2967461645\n3667323470\n3620491487\n3144670189\n1545252964\n3536569731\n1436472507\n1312059481\n3406579025\n335742360\n3140938874\n3943065710\n3100419847\n2226256675\n2133816185\n285022041\n3062939737\n2243983320\n3674422443\n488886471\n384455202\n588717374\n1004112431\n2114549471\n1752470957\n213929107\n2488115405\n386383400\n2892231850\n1636582849\n1331374847\n2980589506\n3490463738\n1861583038\n3439642124\n1616450563\n2987135549\n548645059\n1722600306\n561279482\n3373982470\n345009528\n427524242\n1144567261\n3233717659\n1291391621\n2555662077\n1685904781\n1678290553\n3040925168\n1002977933\n4057601629\n965764011\n1300144846\n794819215\n1799389971\n770067550\n1581789470\n1167944572\n34943058\n2474343360\n3344595599\n3228458409\n1376834693\n1673958400\n693020432\n4083503372\n215860701\n3221808538\n32059678\n3950076919\n2502230458\n1307492624\n1728279672\n3342792533\n1046256777\n1342647877\n3922405602\n3692057445\n582075612\n1775928150\n1500000421\n1001972832\n2604268746\n1307999135\n2487459642\n1323790879\n490810464\n1608751562\n3843192041\n147180338\n3857201426\n2043324494\n280312795\n1080156369'''.split('\\n')\n           ))\n\n\n\ndef pad(data):\t\n\twhile len(data) % 16 !=0:\n\t\tdata+=b'\\x00'\n\treturn data\n\ndef decode(key, enc_data):    \n    mode = AES.MODE_ECB\n    aes = AES.new(pad(key), mode)\n    return aes.decrypt(enc_data)\n\nrc=RandCrack()\nfor i in a:\n    \n    rc.submit(i)\nprint(rc.predict_getrandbits(32))    \n# print(type(rc.predict_getrandbits(32))) \n\nkey=\"3597202257\"\n\nprint(key)\nkey=key.encode('utf8')\nencode_data='T0trtp358+Z3nNHopY+g3+zuykR+cXvlbebg8INr97JSlE7ZGEbeVSNEoHLmRj59'\n\nencode_data = b64decode(encode_data)\n\n\ndecoded_bytes = decode(key, encode_data)\nprint(f\"解密的原始字节：{decoded_bytes}\")  \nprint(type(decoded_bytes))\n\n```\n\n\n\nReDs卷土重来\n\n```py\nfrom randcrack import RandCrack\nfrom base64 import b64decode\nfrom Crypto.Cipher import AES\nfrom hashlib import md5\n\n\ndef pad(data):\n\tdata=data.encode('utf8')\n\twhile len(data) % 16 !=0:\n\t\tdata+=b'\\x00'\n\treturn data\n\n\ndef decode(key, text) -> bytes:\n\taes = AES.new(pad(key),AES.MODE_ECB)\n\treturn aes.decrypt(text)\n\n\nencode_data = 'oXuE0fPdOJGoMwkc+mqd0hDP9MPze2zeHC4l+2kc/4gxMZv7Az2mo8ZuqLaECFBt'\ndata = b64decode(encode_data)\n\n\ndef main():\n\trc = RandCrack()\n\twith open(\"G:\\QQ\\data.txt\",'r') as file:\n\t\tfor _ in range(624):\n\t\t\trc.submit(int(file.readline()))\n\n\traw_key = rc.predict_getrandbits(1024)\n\tkey = md5(str(raw_key).encode('utf-8')).hexdigest()\n\tprint(decode(str(key), data))\n\n\nif __name__ == \"__main__\":\n\tmain()\n```\n\n","tags":["CTF","密码","校赛"],"categories":["CTF","密码"]},{"title":"2024BaseCTF","url":"/2024/10/10/BaseCTF2024新生赛（复现（抄来的/","content":"\n\n\n# BaseCTF2024新生赛（[复现](https://gz.imxbt.cn/games/13/challenges)（抄来的\n\n前面的没做，今个开始做吧//2024/10/9\n\n\n\n## 1.十七倍\n\n原题：  //题目给的东西不少\n\n```c\n#include <stdio.h>\n\nint main() {\n    unsigned char flag[] = \"BaseCTF{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}\";\n    \n    /**\n     * 由 (unsigned) char 决定，每个元素在内存中占 1 字节，即 8 位（8 个 0 或 1）\n     * 在内存中，“字符”保存的是其在“字母表”中是第几个字符\n     * 例如：\n     * B 即  66 在内存中存的是 01000010\n     * a 即  97 在内存中存的是 01100001\n     * s 即 115 在内存中存的是 01110011\n     * e 即 101 在内存中存的是 01100101\n     */\n\n    int i;\n    for (i = 0; i < 40; i++) {\n        flag[i] = flag[i] * 17;\n    }\n    if (flag[0] != 98) {  /* 下标是从 0 开始的 */\n        printf(\"CPU Error???\\n\");\n        return 1;\n    }\n\n    /**\n     * 66 * 17 = 1122\n     * 如果在内存中保存 1122，会是 00000100 01100010\n     * 但是 unsigned char 决定了只能存 8 位，CPU 硬件会自动取低 8 位，即 01100010\n     * 01100010 即 98，所以 66 * 17 = 98\n     * \n     * 注意到 8 个 0 或 1 有 256 种可能，即 0~255\n     * 且取低 8 位即取模（取余数）256\n     * 你可以验证：1122 除以 256 商为 4 余数为 98\n     */\n\n    unsigned char cipher[] = {\n         98, 113, 163, 181, 115, 148, 166,  43,   9,  95,\n        165, 146,  79, 115, 146, 233, 112, 180,  48,  79,\n         65, 181, 113, 146,  46, 249,  78, 183,  79, 133,\n        180, 113, 146, 148, 163,  79,  78,  48, 231,  77\n    };\n    for (i = 0; i < 40; i++) {\n        if (flag[i] != cipher[i]) {\n            printf(\"flag[%d] is wrong, expect %d, got %d.\\n\", i, cipher[i], flag[i]);\n            return 1;\n        }\n    }\n\n    /**\n     * 如果 flag 是正确的，运算后会得到上面的数据。\n     * 如果是实数域运算，flag[i] * 17 = cipher[i]，那么 flag[i] = cipher[i] / 17\n     * 模了 256 后又是怎么样呢？学一下“模运算乘法逆元”吧。\n     */\n\n    return 0;\n}\n\n```\n\n\n\n我们可以直接采用遍历求解：（**因为原题中说的：第二大段注释中举了个例子说明98的由来**，所以采用这种方法遍历（暴力求解就好了\n\n```c\nfor(int i=0;i<40;i++){\n        for(int j=32;j<128;j++){\n            if(j*17%256==cipher[i]){\n                cipher[i]=j;\n                break;\n            }\n        }\n    }\n```\n\n\n\n看看他们的wp，额，二进制不看，不会，看看乘法逆元：\n\n乘法逆元我也不太会（悲，明个或今晚上学吧：\n\n先写写：\n\n根据题目我们可以知道：\n\n```c\ny=(x*17)%256//y是cipher的数\n```\n\n根据乘法逆元公式：**ax≡1 (mod p)**，也可表示为**ax≡1(mod f)**。这个等式用中文描述就是a乘一个数x并模p等于1\n\n反正就是（为什么不能语音（怒：上述y=(x*17)%256//y是cipher的数可以化为：\n\n```c\ny=(x*17)%256//y是cipher的数\n根据乘法逆元可以求得（这个应该是类似公式之类的，等我一会看看）：\nx=(y*241)%256\n    \n241是怎么算出来的呢？可以通过扩展欧几里得原理求得。在 Python 中直接pow(17, -1, 256)就可以得出结果。(就是：241*17%256=1)\n\n//这是代码\n#include <stdio.h>\n\nint main() {\n    unsigned char flag[] = {\n         98, 113, 163, 181, 115, 148, 166,  43,   9,  95,\n        165, 146,  79, 115, 146, 233, 112, 180,  48,  79,\n         65, 181, 113, 146,  46, 249,  78, 183,  79, 133,\n        180, 113, 146, 148, 163,  79,  78,  48, 231,  77,   0\n    };\n    int i;\n    for (i = 0; i < 40; i++) {\n        flag[i] = flag[i] * 241;\n    }\n    printf(\"%s\\n\", flag);\n    return 0;\n}\n\n// BaseCTF{yoUr_CrYpt0_1earNinG_5tarTs_n0w}\n\n```\n\n\n\n\n\n## 2.ez_math\n\n数学会陪伴我一辈子吗？被迫复习了一点线代：\n\n**对角线为一的上三角和下三角行列式相乘是一**\n\n原题：\n\n```c\nimport numpy as np\nfrom Crypto.Util.number import *\n\na, b, c, d = [getPrime(128) for _ in range(4)]\npoint1 = a * d\npoint2 = b * c\nmatrix2 = [[0, a, b], [0, c, d]]\n\nflag = b\"flag{test_flag}\"\nflag = bytes_to_long(flag)\n\n\ndef randomArray():\n    upper = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n    low = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n    for i in range(3):\n        for j in range(i+1, 3):\n            upper[i][j] = getPrime(128)\n            low[j][i] = getPrime(128)\n    result = np.array(upper) @ np.array(low)\n    return result\n\nA = np.array([[flag, 0, 0]] + matrix2)\nB = randomArray()\nMAT = A @ B\n\nprint(point1)\nprint(point2)\nprint(MAT)\n\n'''\n85763755029292607594055805804755756282473763031524911851356658672180185707477\n70470862191594893036733540494554536608294230603070251013536189798304544579643\n[[73595299897883318809385485549070133693240974831930302408429664709375267345973630251242462442287906226820558620868020093702204534513147710406187365838820773200509683489479230005270823245\n  46106113894293637419638880781044700751458754728940339402825975283562443072980134956975133603010158365617690455079648357103963721564427583836974868790823082218575195867647267322046726830\n  161159443444728507357705839523372181165265338895748546250868368998015829266587881868060439602487400399254839839711192069105943123376622497847079185]\n [13874395612510317401724273626815493897470313869776776437748145979913315379889260408106588331541371806148807844847909\n  17025249852164087827929313934411832021160463738288565876371918871371314930048841650464137478757581505369909723030523\n  59510107422473463833740668736202898422777415868238817665123293560097821015330]\n [11314088133820151155755028207579196628679021106024798818326096960197933616112389017957501267749946871903275867785729\n  13883500421020573457778249958402264688539607625195400103961001780695107955462968883861677871644577542226749179056659\n  48528427402189936709203219516777784993195743269405968907408051071264464132448]]\n\n‘’‘\n```\n\n这个，怎么说呢，就是线代啊，虽说忘完了（思考\n\n==**ok啊时隔三天在min_math2中又遇到了，发现mid_math2也不会，但在阿褚的鼎力协助下会了一点：**==\n\n\n\n![3281c719ed44d75237456124b56858ef](3281c719ed44d75237456124b56858ef-1729763611735-2.png)\n\n先分析代码（这个好像叫代码审计来着？（思考，好吧，好像不是。\n\n代码审计（Code audit）是指以发现程序错误、安全漏洞和违反程序规范为目标的源代码分析。它是软件开发生命周期中的一个重要环节，旨在通过检查源代码来识别潜在的安全隐患、编码不规范之处以及可能引发的安全漏洞。\n\n\n\n~~分析代码：randomArray():这个方法返回的result为单位矩阵：1（E，至于为什么，证明没看懂，正在看ing~~\n\n返回的不是1但是，因为这个：我们的目的是求出flag，则用行列式求\n\n![3281c719ed44d75237456124b56858ef](E:/QQ/3363009478/nt_qq/nt_data/Pic/2024-10/Ori/3281c719ed44d75237456124b56858ef.png)\n\n==呃呃呃呃，这个是行列式，我傻逼了，别骂我==\n\n==行列式和矩阵的相乘的，额，运算规则是不一样的！！！忘完了，真得学吧，学了之后我不会也要加入408大军了吧==\n\n\n\n```c\nA=flag*(a*d-b*c)\n那么就容易知道：$$flag = |flag| = \\frac{|MAT|}{|A_{abcd}|}$$\nEXP\n```\n\n$$\nflag = |flag| = \\frac{|MAT|}{|A_{abcd}|}\n$$\n\n\n\n代码(因为太晚了（其实不晚，但乏了），并且sage.all没装，明个再安装吧，这直接搬了现成的wp的代码：\n\n```python\nfrom sage.all import *\nfrom Crypto.Util.number import *\npoint1 = 85763755029292607594055805804755756282473763031524911851356658672180185707477\npoint2 = 70470862191594893036733540494554536608294230603070251013536189798304544579643\nMAT = [[73595299897883318809385485549070133693240974831930302408429664709375267345973630251242462442287906226820558620868020093702204534513147710406187365838820773200509683489479230005270823245,\n  46106113894293637419638880781044700751458754728940339402825975283562443072980134956975133603010158365617690455079648357103963721564427583836974868790823082218575195867647267322046726830,\n  161159443444728507357705839523372181165265338895748546250868368998015829266587881868060439602487400399254839839711192069105943123376622497847079185],\n [13874395612510317401724273626815493897470313869776776437748145979913315379889260408106588331541371806148807844847909,\n  17025249852164087827929313934411832021160463738288565876371918871371314930048841650464137478757581505369909723030523,\n  59510107422473463833740668736202898422777415868238817665123293560097821015330],\n [11314088133820151155755028207579196628679021106024798818326096960197933616112389017957501267749946871903275867785729,\n  13883500421020573457778249958402264688539607625195400103961001780695107955462968883861677871644577542226749179056659,\n  48528427402189936709203219516777784993195743269405968907408051071264464132448]]\n\n\nprint(long_to_bytes(det(matrix(MAT)) // (point1 - point2)))\n\n# b\"BaseCTF{7E9328AF-784C-8AF5-AC10-D6A8FC0977A8}\"\n```\n\n\n\n\n\n## 3.mid_math\n\n \n\nok啊，sage没装好（悲，谁要是装好了请教教我（求。\n\n原题：\n\n```python\nimport numpy as np\nfrom Crypto.Util.number import *\n\na, b, c, d = [getPrime(128) for _ in range(4)]\npoint1 = a * d\npoint2 = b * c\nmatrix2 = [[0, a, b], [0, c, d]]\n\nflag = b\"flag{test_flag}\"\nflag = bytes_to_long(flag)\n\ndef randomArray():\n    upper = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n    low = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n    for i in range(3):\n        for j in range(i+1, 3):\n            upper[i][j] = getPrime(128)\n            low[j][i] = getPrime(128)\n    result = np.array(upper) @ np.array(low)\n    return result\n\nA = np.array([[flag, 0, 0]] + matrix2)\nB = randomArray()\nC = randomArray()\nMAT = C @ A @ B\n\n\nprint(point1)\nprint(point2)\nprint(MAT)\n\n'''\n65540596822333029826884315503808996273733737079814345540607878287618419734231\n45151244176940366132774311848077675849486332018843894072137609985463616792271\n[[9259505595451159514948336330303511539525155092949382077995385373332083424570340733825203563332256599256361679775371565817159463557158551820090084800254999338417057682355404780422980119717238594927467956675771042145306399815569005775907169857728757334979422594358\n  3700462282298785820527479428312072678870010244861115107206951164684911761755437333209293039456840068340334559453608012512177623936248784897843503284633804083281388001236742261832974291349480314135560368365574114042082002559069958228523318326290833422846224288247\n  20791012146351643571145217310876690226642338279942557085580439219377325884045305279931904540467264182713135410067252835618936836675270813727053937054168296298149405902638242278868020381541490973458957704137657413376043351193]\n [3802535350808074374431476757195874789213113083310705049856269457737583463559458126494122484246497049005001474007088865512110432486291568737501434666990689483191924384489484665070592656641925905986397402822195880143437724155134584374613878027218950975919679551229\n  1519642544380087919293814751485424198320747098741960781639133554268321708273309194651985562222274023623071346914239982055028526526058064787882720065775210796950963778381575914964024929110539407721461321785325399699126116201001806816030960662346173275101476487421\n  8538097185709421082644083672229287227818939415260987123718318427750267353075860559170390896769087600458156859498331152566368881938040799840806164389020986990994328370205184734637870147251004626759120887684269603636183629300]\n [17987668490992083132878642797176089621188858356259455169173987325310681186627844776077058221612169421636403546746899152917309634315569997105261046388995579843528014810244648968375990949478033964619008761814039733347955609163\n  7188579142941521685422767412932555782658469950638690886255638896617687421517941457682493542615460990114218059246938237257830976937359020731335958068934235967457123039874441635435388736524907036941379695243043923900290273902\n  40388963560266769813551191613694768219344365780650048155838802242681775019274045964917142477325170274191702615504062392461666558731638338001971723737440974198823443420018559746335727687]]\n'''\n\n\n```\n\n\n\n这个题和ez_math几乎一样，所以我直接放东西了（ai写的，因为不会用一些方法，直接让ai帮我写了，**和ez_math不一样，看看吧**：\n\n\n\n```python\nimport numpy as np  \nfrom sympy import Matrix  \nfrom Crypto.Util.number import long_to_bytes  \n\n# 定义两个点  \npoint1 = 65540596822333029826884315503808996273733737079814345540607878287618419734231  \npoint2 = 45151244176940366132774311848077675849486332018843894072137609985463616792271  \n\n# 定义矩阵，使用 sympy 的 Matrix  \nMAT = Matrix([  \n    [  \n        9259505595451159514948336330303511539525155092949382077995385373332083424570340733825203563332256599256361679775371565817159463557158551820090084800254999338417057682355404780422980119717238594927467956675771042145306399815569005775907169857728757334979422594358,  \n        3700462282298785820527479428312072678870010244861115107206951164684911761755437333209293039456840068340334559453608012512177623936248784897843503284633804083281388001236742261832974291349480314135560368365574114042082002559069958228523318326290833422846224288247,  \n        20791012146351643571145217310876690226642338279942557085580439219377325884045305279931904540467264182713135410067252835618936836675270813727053937054168296298149405902638242278868020381541490973458957704137657413376043351193  \n    ],  \n    [  \n        3802535350808074374431476757195874789213113083310705049856269457737583463559458126494122484246497049005001474007088865512110432486291568737501434666990689483191924384489484665070592656641925905986397402822195880143437724155134584374613878027218950975919679551229,  \n        1519642544380087919293814751485424198320747098741960781639133554268321708273309194651985562222274023623071346914239982055028526526058064787882720065775210796950963778381575914964024929110539407721461321785325399699126116201001806816030960662346173275101476487421,  \n        8538097185709421082644083672229287227818939415260987123718318427750267353075860559170390896769087600458156859498331152566368881938040799840806164389020986990994328370205184734637870147251004626759120887684269603636183629300  \n    ],  \n    [  \n        17987668490992083132878642797176089621188858356259455169173987325310681186627844776077058221612169421636403546746899152917309634315569997105261046388995579843528014810244648968375990949478033964619008761814039733347955609163,  \n        7188579142941521685422767412932555782658469950638690886255638896617687421517941457682493542615460990114218059246938237257830976937359020731335958068934235967457123039874441635435388736524907036941379695243043923900290273902,  \n        40388963560266769813551191613694768219344365780650048155838802242681775019274045964917142477325170274191702615504062392461666558731638338001971723737440974198823443420018559746335727687  \n    ]  \n])  \n\n# 计算行列式  \ndet_value = MAT.det()  \n\n# 确保 det_value 是整数  \ndet_value = int(det_value)  \n\n# 计算并转化为字节  \nresult = long_to_bytes(det_value // (point1 - point2))  \n\n# 输出结果  \nprint(result)\n\nb'BaseCTF{E439646E-1768-18B3-DC4B-483C40C5340C}'\n```\n\n\n\n\n\n## 4.two_squares\n\n这是原题：\n\n```python\nfrom Crypto.Util.number import *\nflag=b'BaseCTF{}'\nm=bytes_to_long(flag)\np=getPrime(128)\nq=getPrime(128)\nn=p*q\ne=65537\nc=pow(m,e,n)\nx=p^2+q^2\nprint(\"e =\",e)\nprint(\"c =\",c)\nprint(\"x =\",x)\n\n\"\"\"\ne = 65537\nc = 42330675787206041757903427737108553993012805007294570657461042152628982126538\nx = 209479773119142584969854470862023704936857416491817498021871883305658177375498\n\"\"\"\n```\n\n\n\n这个，额，就用**sage.math**提供的**two_squares(x)**方法简单点\n\n（但是我勾八baishi好几个小时了都没弄好，最后向在线妥协了：\n\n![](屏幕截图 2024-10-11 193356-1730478193189-1-1730478203311-3-1730478205411-5.png)\n\n然后就直接这样：\n\n\n\n```python\nfrom Crypto.Util.number import *\nimport gmpy2\nfrom numpy import sqrt\nfrom sympy import Integer\n\ne = 65537\nc = 42330675787206041757903427737108553993012805007294570657461042152628982126538\nx = 209479773119142584969854470862023704936857416491817498021871883305658177375498\n# p,q=two_squares(x)\n# p,q=int(p),int(q)\n# n=p*q\nphin=104509747531476793887796474699931064796411012732701008885442574088855832757992\nn=104509747531476793887796474699931064797057927926665485324022084015195490274051\nd=gmpy2.invert(e,phin)\na=long_to_bytes(int(pow(c,d,n)))\nprint(a)\n# b'BaseCTF{0760becd-cefaab0b094d}'\n```\n\n\n\n## 5.铜匠 （coppersmith\n\n好了，这个题完全涉及我的未知区域了，看了几小时的文章才看懂（主要是因为找以及有的东西没见过和以前的忘了\n\n**RSA高位攻击（coppersmith定理：：直接说结论吧：P_unknown_bits/P_bits<=0.44就可以对p或q补全（前提是知道n，简单地说就是：以一个数的二进制（01）形式转换后：在最多有454（1024*0.44）位未知就可以用sage运用其中一些方法求出你想要的东西。==byd又是sage，我还没弄好，结论大概就是这样，应该是对的（思考==好了，你以为这就完了？理论上来说这就好了，但是解题时你会遇到各种各样的问题，比如这一题，wctm，他未知位超过了454，那就用爆破吧（暴力求解**\n\n我只能说数学看懂了，原理不知道，代码不会（因为byd要用sage\n\n\n\n这个不错：**==RSA_高位攻击学习记录==**，可以看看\n\n[RSA_高位攻击学习记录]: https://blog.csdn.net/lc9992023/article/details/141112336\n\n\n\n呃呃呃，公式块不会写（悲，C，不想学公式块咋写了，直接手搓吧：应该能看懂吧（思考，看不懂就搜吧，基本和那个链接一样反正。**==另外，不管是谁，sage你要是会的话请教教我，我装都装不好，只能online==**\n\n![864640c81027cc176127f0e4ca597d9d_720](864640c81027cc176127f0e4ca597d9d_720.jpg)\n\n![d393d331f13b098870a1e572a29a737a_720](d393d331f13b098870a1e572a29a737a_720.jpg)\n\n\n\n**OK啊，本世纪最大的小丑诞生了，没错就是我，这一题官方wp没用爆破，直接求就好了，其实也好，除了没用爆破，其他的都一样，看看官方代码：**\n\n**他是455直接求解了，可能455也能？不晓得啊，应该是，好像就是能，但实际不行？搜的，不晓得**\n\n```python\nfrom Crypto.Util.number import *\nimport gmpy2\n\np_high = 14439249591349619691972392177790365247490839237199085979433418493254022567815148979672690178\nq_low = 90063199151369157959005663017593053931871580139169245885113098598755909124764417\nn = 18347545778876678838092757800261556931131930866012101566000425608407193858675622059415995283684230959320874387944052648148677918542763633503231962873204645415818139345588988936580526094727943067102768943117592654029397879665312089518191052154267343886226820785206334238961064175118262578895847281575656290248049404047727756356910896332939145136942219317065063060070725033146788186604738271846183709127655298440696824683099637827282095133642324657860714680107691622056420045091586609974536644773286992447027164350612852922016376888380895187804771279035652496676089183636450028327097084911908336202253562671798012457461\nenc = 15659576879410368237140555530527974801613150473447768911067611094143466009251385693099110691602954207905029692682380253595062935017486879899242785756448973466690818942065250284891341066578689696180061755610538867770441139827574063212967027249650509215685566103350688284041405586915563454117672061141919712416360596137520514412607512596079964611672166435592936417138352662031529414118312166411150736015788925026636845744110093161894267707446937939130745326244186579516665160036229715964182962542836836457885170975474737620430886449029488829662146456489724775166105816909257516908496172172266375617868819982791477888289\ne = 65537\nmod = pow(2,266)\ninverse_q_low = q_low.inverse_mod(mod) \np0 = n * inverse_q_low % mod          \nPR.<x> = PolynomialRing(Zmod(n))\nf = p_high * (2**721) + p0 + x * 2**266\nf = f.monic()\nout_p = f.small_roots(2**455,0.4)\np = p_high * (2**721) + p0 + out_p[0] * 2**266\nprint(p)\nassert n % p == 0\nq = n // int(p)\nphi = (p-1) * (q-1)\nd = inverse_mod(e,phi)\nm = pow(enc,d,n)\nprint(bytes.decode(long_to_bytes(m)))\n#BaseCTF{7074ddc3e006810688241196414e49e2}\n```\n\n\n\n## 6.random_primes\n\n这个不那么难，只是我傻逼了，最开始以为是直接写就好，结果看到flag限位45\n\n```python\nfrom Crypto.Util.number import *\nimport random\ndef gen_n():\n    primes=[getPrime(128) for _ in range(256)]\n    n = 1\n    for i in range(100):\n        n *= primes[random.randint(0,127)]\n    return primes,n\n\nflag=b'BaseCTF{}'\nm=bytes_to_long(flag)\n\nassert len(flag)==45\n\nprimes,n = gen_n()\ne = 0x010001\n\nc=pow(m,e,n)\n\nprint(\"n =\",n)\nprint(\"e =\",e)\nprint(\"c =\",c)\nprint(\"primes =\",primes)\n```\n\n看限位45大概知道flag_bits为360，而给的素数是128位，大概三个就行了，然后直接爆破，爆破爽（馋\n\n忘了那是个文本了，反正大概就是这样，这个不难\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\n\n# n,e,c,primes自己加吧\n\nfor i in primes:\n    for j in primes:\n        for k in primes:\n            n1=i*j*k\n            phi=(i-1)*(j-1)*(k-1)\n            m=long_to_bytes(pow(c,pow(e,-1,phi),n1))\n            if b'BaseCTF' in m:\n                print(m)\n```\n\n\n\n## 7.basic\n\n额，这题我看不懂，所以只放个原题吧：\n\n```python\nfrom Crypto.Util.number import *\nimport socketserver\nimport os\nimport random\nimport base64\nimport string\n\nflag = os.getenv('GZCTF_FLAG').encode()\n\n\nclass Task(socketserver.BaseRequestHandler):\n    def _recvall(self):\n        BUFF_SIZE = 2048\n        data = b''\n        while True:\n            part = self.request.recv(BUFF_SIZE)\n            data += part\n            if len(part) < BUFF_SIZE:\n                break\n        return data.strip()\n\n    def send(self, msg, newline=True):\n        try:\n            if newline:\n                msg += b'\\n'\n            self.request.sendall(msg)\n        except:\n            pass\n\n    def recv(self):\n        return self._recvall()\n    \n    def handle(self):\n        printable_chars = string.ascii_letters + string.digits + string.punctuation\n        optional=[b'A',b'B',b'C',b'D']\n        for _ in range(100):\n            secret= ''.join(random.choices(printable_chars, k=16)).encode()\n            select=random.choice(optional)\n            self.send(select)\n            enc=b''\n            if select==b'A':\n                enc=base64.b64encode(secret)\n            elif select==b'B':\n                enc=secret.hex().encode()\n            elif select==b'C':\n                enc=bytes_to_long(secret)\n                enc=str(enc).encode()\n            elif select==b'D':\n                enc=[i for i in secret]\n                enc=str(enc).encode()\n            self.send(enc)\n            client_send=self.recv()\n            if client_send!=secret:\n                self.send(\"\\nYou wrong!!!!!\")\n                exit()\n\n        self.send(flag)\n        self.send(b\"\\nConnection has been closed  =.=  \")\n        self.request.close()\n\n\nclass ThreadedServer(socketserver.ThreadingMixIn, socketserver.TCPServer):\n    pass\n\n\nclass ForkedServer(socketserver.ForkingMixIn, socketserver.TCPServer):\n    pass\n\n\nif __name__ == \"__main__\":\n    HOST, PORT = '0.0.0.0', 9999\n    server = ForkedServer((HOST, PORT), Task)\n    server.allow_reuse_address = True\n    server.serve_forever()\n```\n\n\n\n## 8.try_to_factor\n\n**看不懂一点，这个先跳了**\n\n\n\n## 9.mid_math2\n\n这个经过了我的细细琢磨（复习线性代数知识以及在阿褚的鼎力协助下，算是明白一点了\n原题：\n\n```python\nimport numpy as np\nfrom Crypto.Util.number import *\nfrom sympy import Matrix  \n\na, b, c = [getPrime(128) for _ in range(3)]\nd, e, f, h, i, j = [getPrime(1024) for _ in range(6)]\nA = [[a, b, c], [d, e, f], [h, i, j]]\n\nflag = b\"flag{test_flag}\"\nflag = bytes_to_long(flag)\n\ndef prod(myList):\n    result = 1\n    for i in myList:\n        result = result * i\n    return result\n\ndef randomArray():\n    upper = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n    low = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n    for i in range(3):\n        for j in range(i+1, 3):\n            upper[i][j] = getPrime(128)\n            low[j][i] = getPrime(128)\n    result = np.array(upper) @ np.array(low)\n    return result\n\ne = getPrime(18)\nN = getPrime(1024)\nC = randomArray()\n#MAT = C @ A @ B\nMAT = C @ A\nc = pow(flag, e, prod(A[0]))\n\nprint(MAT)\nprint(f'c = {c}')\nprint(f'e = {e}')\n\n'''\n[[9194428734244577957135736828947112370812209206819996917633266069359894211949655026549592464237531352518967649750275097282532736237822915630766535634248987628113137246739472264614337707439494149796414126558156060870508338278038269649101921703583149322486905552569052814106532234864028314925118581658029792157851338427975728108000711353532410024128431635933014226306706319591106081211872\n  7052600738698435126221697697810087514520765619736355003187836563546493264420232197860875416948961661231812045406188307561458872254314061097960625042149316957446344556490001927621879295417925720004568332344856366002394724202261454916368122811414228043610804718983599804179657247820737462743875143882925818085495573474169110616761320858675303922740882169073395416895304752909979711051264\n  13094262565727554986668133240216117564284263232131011542877585146452802164148464500319291219458081531317231044962383872061004846788004747813785963603455919882739054992075130196548494850105124430477756818974520035883861936342117869122455996838023977818945511119955390136020375974150407580576040034808588694313922810340598787633148909527275716235390356737099830131958338026891256778602432]\n [7291452286171544741377496447735677778433522048452394999757158120018504601116506253897733192493798837108269469756414516913436198353934250444263790689101779479157541198872731006007031448329354826004420971505929629537584453480285628607579031078497417101681028600589030661495031531644755072500393418929237208836713910921969937998825721580514845395852889662758886414966066733340052235985735\n  5592919719754926663830816961667268104316637431189640788304536404157195458040686322901848820171568258023938724485177544141303597034389473064509506247034833050568643394732003598890104462382321956436508366359718039669456303596542945687737870352569084995858128262046585579724537002100295978230177579835256681774512205534970583421138287684468047290246482431883957170924203400422234299829407\n  10384135162743100269852365857770153822630076412853981379757028821332622753962517667857057209221058533163475030678127399042436975886694593504673386134198042731671320468065688239424934644173240507619471360908786669070898288638067852779718549009532013299792474712979659423962779677856135791013599792822988457540442172903145046394648862567656330868441373023488569784114231877910285319620037]\n [34946383530632295853235791100380055176686898072752599942691162027311662041417740482507624946631032260410440329949488242706004902881977357811370156793240362927747354453547446315050117795844866771053429455608334265986953931753411938119703800489233043034369650346216548318254326462336573090313788936967898128977445514764945671848611612198443909056919\n  26805677375585831510259621878357023272222175103906204143689109861471123435549853025410319713500257027420994041712736040084303902812241806295302385126726161281240831030434347236854521776375408982352155894199700974681768432734155312616453345950508256035721377179651166114898547487082749355033867559583905997404388549346221139007108462958001461826337\n  49768956277664050500387501949373949828589012443212214016088015478826178759698946452495063308332332373728223252613132611904477061717762261927498754849913008747980442098787524359755695519989286304445175440218168145037681791003471134417445542856715034633656861298596197935068562189476201463465706711744838395255326376049859058504891392128431832044455]]\nc = 11781599055433308033432930805524658061560499523533841161297213162869735414528038973998414585008473948613388691447093\ne = 160907\n'''\n\n```\n\n\n\n这个怎么说呢，你会发现（作为正常的大一下以后（指学过线代的密码刚学儿一点的低手（我，自己骂自己不正常？）：这个东西没法解密啊，他都是未知的（这样说没错吧，思考\n\n然后，看了wp和文章后：哦，这用了LLL算法，额，LLL（）算法貌似有很多用，但在这一题的用处是为了求出A[0]，但是题目只给出了MAT和MAT=A@C啊，怎么办？所以不知道，然后是看了wp问了ai才知道LLL（）的（是不是说话重复了，无所谓，大概就是这样，然后就是：ai大法好：\n\n```python\n'''为何使用 LLL 算法\n在加密和解密标准 RSA 系统中，使用 LLL 算法可以优化以下步骤：\n\n安全性: LLL 算法用于破解一些基于 lattice 的密码学方案。通过找到相关的格基，可以尝试恢复加密密钥。\n\n密钥恢复: 如果攻击者获得了矩阵 \nC\nC 和 \nA\nA，LLL 减少可以找出与密钥相关的低维度向量，从而恢复 \nA\nA 的信息。这是因为在某些情况下，攻击者可以通过计算格基的方式得到与模数和私钥相关的线性关系。\n\n优化解密: 减少的格基可能揭示出某种数学结构，攻击者可以利用这些关系或结构来简化解密过程。\n\n总之，LLL 减少的主要目的是为了增加系统的安全性，并为可能的解密或攻击路径提供潜在的线索或结构。通过将复杂的线性代数问题转化为更简单的问题，LLL 算法能够帮助对各种加密系统进行分析和攻击。'''\n```\n\n这里解密过程应该是主要用了他的第二，三个性质：直接运用LLL（）解出A的值，然后按部就班求出n和phi就行了（注意：A为三行三列矩阵，所以\n\n```\nn=A[0]*A[1]*A[2]\n```\n\n对了还有个问的ai：MAT，A，C的作用，你们看看吧，仅供参考：\n\n```python\n'''在加密算法中使用的矩阵 \nA\nA、随机矩阵 \nC\nC 以及 LLL 算法的目的可以总结如下：\n\n1. 矩阵 A\n作用：\n\n矩阵 \nA\nA 通常包含了一些特定的参数，比如素数，例如在加密过程中使用的模数。它可能构成了系统中的基础结构，用于进行加密和解密操作。\n在某些加密方案中，矩阵 \nA\nA 中的值可能用来定义密钥生成的规则，或者作为在密钥恢复过程中进行线性代数运算的基础。\n用途：\n\n通过 \nA\nA，可能可以推导出系统的模数和公钥，在加密或解密过程中与密文进行关联。\n2. 随机矩阵 C\n作用：\n\n矩阵 \nC\nC 是加密过程中的随机生成矩阵，通常会涉及到一些特定的线性变换或组合。这种随机性是增加算法安全性的重要部分。\n矩阵 \nC\nC 可能负责存储加密过程中所需的一些中间变量，或通过随机性引入不确定性，从而增加对密码的攻击难度。\n用途：\n\n别此矩阵可能是通过某种形式引入多样性和复杂性，以防止简单的线性分析或其他类型的攻击。\n3. LLL 算法\n目的：\n\nLLL（Lenstra–Lenstra–Lovász）算法是一种用于格基的算法，通过该算法可以进行基的简化，得到短向量。它通常在解决整数线性问题的时候非常有用。\n在此场景中的用途：\n\n利用 LLL 算法，可以从矩阵 \nA\nA 和 \nC\nC 中提取出有用的信息，试图查找短的线性组合以恢复潜在的密钥。\n在某些情况下，如果攻击者能够通过 LLL 算法找到和密钥相关的线性关系，他们或许就能够获得一个这些参数的线性组合（可能与密钥相关），从而实现解密。\n总结\n矩阵 A 提供了基础和框架，定义了与模数和密钥关联的结构。\n矩阵 C 提供了随机性和复杂性，增强了系统的安全性。\nLLL 算法 则是利用这两个矩阵进行线性分析、寻找短向量，从而可能揭露出密钥信息或其他重要参数。\n整个过程表面上看是一个线性代数问题，但核心目标是通过将随机和确定性的因素结合起来，以增加破解系统的复杂性和难度。攻击者若能成功应用 LLL 算法分析这两个矩阵，就可能会获得关于密钥的重要线索。'''\n```\n\n然后就是解题代码了：\n\n```python\nfrom sage.all import *\nfrom Crypto.Util.number import *\n\nMAT = ...\nc = ...\ne = ...\n\ndef prod2(myList):\n    result = 1\n    for i in myList:\n        result = result * (abs(i) - 1)\n    return result\n\ndef prod(myList):\n    result = 1\n    for i in myList:\n        result = result * abs(i)\n    return result\n\nMAT = matrix(MAT)\nn = prod(MAT.LLL()[0])\nphin = prod2(MAT.LLL()[0])\nd = pow(e, -1, phin)\nflag = long_to_bytes(pow(c, d, n))\nprint(flag)\n'''\nn=17631408097218561823677756442318461073431191708388844474451658702449860378618765667127201508272748995177105608754133\nphin=17631408097218561823677756442318461073226384183145081523839893374579202673116878021014333222334572070116308167450800\n# b'BaseCTF{8E2BD73F-9C10-F813-2CA4-B4B2DED4E961}'\n```\n\n## 10.ez_log\n\n这一题，其实不难因为AES加密是对称加密，该给的东西都给你了，额，只是有一个补位不咋会，没事，现学了\n\n然后这是原题：\n\n```python\nfrom Crypto.Util.number import bytes_to_long as b2l, long_to_bytes as l2b, getPrime\nfrom Crypto.Cipher import AES\nfrom random import randint\n\n\nflag = b\"flag{test_flag}\"\n\npad = lambda x: x+b'\\x00'*(16-len(x)%16)\n\ndef encrypt(KEY):\n    cipher= AES.new(KEY,AES.MODE_ECB)\n    encrypted =cipher.encrypt(flag)\n    return encrypted\ndef decrypt(KEY):\n    cipher= AES.new(KEY,AES.MODE_ECB)\n    decrypted =cipher.decrypt(enc)\n    return decrypted\n\nflag = pad(flag)\nx = randint(10 ** 7, 10 ** 8)\ny = randint(10 ** 7, 10 ** 8)\nn = getPrime(28)\nz = pow(y, x, n)\n\nenc = encrypt(pad(l2b(x)))\nprint(f'enc = {b2l(enc)}')\nprint(f'y = {y}')\nprint(f'n = {n}')\nprint(f'z = {z}')\n\n'''\nenc = 33416570913716503492297352041317858420349510954381249751537743898024527101872454706181188441210166165803904185550746\ny = 82941012\nn = 228338567\nz = 51306718\n'''\n```\n\npad是为了将flag填充成16的倍数。decrypt（）是解密函数，直接调用就可以。其中ynz都给你了，我们可以得出x。\n\n**`l2b(x)`**：这个函数的作用是将 `x`（在这里是一个长整型整数，通常是某种计算的结果）转换为一个字节串。在Python中，长整型数字可以表示为字节，通过 `long_to_bytes`，你可以得到其按字节表示的形式。这个函数来自于 `Crypto.Util.number` 模块。\n\n因为enc = encrypt(pad(l2b(x)))，加密时用了，所以解密时也要用一下。\n\n哦，对了，其中z = pow(y, x, n)，pow前面说过了，所以不再阐述。算了吧，还是说吧：z=y**x（mod n）\n\n就是通过这得出x的，再对x进行解密，这是代码：\n\n```python\nfrom Crypto.Util.number import bytes_to_long as b2l, long_to_bytes as l2b, getPrime  \nfrom Crypto.Cipher import AES  \nfrom random import randint  \n\n\nenc = 33416570913716503492297352041317858420349510954381249751537743898024527101872454706181188441210166165803904185550746\ny = 82941012\nn = 228338567\nz = 51306718\n\n\n\npad = lambda x: x + b'\\x00' * (16 - len(x) % 16)  \n\ndef decrypt(KEY):   \n    cipher = AES.new(KEY, AES.MODE_ECB)  \n    decrypted = cipher.decrypt(enc)  \n    return decrypted  \n#这里直接爆破了，但是不太推荐，因为数据量不大才用的\ndef discrete_log(y, z, n):  \n    for x in range(n):  \n        if pow(y, x, n) == z:  \n            return x  \n    return None   \n'''其实可以直接用这个：\n但这个要用sage（悲上加悲了属于是）\nenc = l2b(enc)\nG = GF(n)\nz = G(z)\ny = G(y)\nx = discrete_log(z, y)\n'''\nx = discrete_log(y, z, n)  \nenc = l2b(enc)\nprint(decrypt(pad(l2b(x))))\n#b'BaseCTF{BF3DCONZ-67FE-ENZU-385S-CSNI13B2}\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n```\n\n## 11.没有n啊\n\n==ok啊，这一题感谢guoql仙贝的大力帮助==\n\n先看原题：\n\n```python\nfrom Crypto.Util.number import *\nimport gmpy2\n\nflag=b'BaseCTF{}'\nm=bytes_to_long(flag)\n\np=getPrime(512)\nq=getPrime(512)\n\nn=p*q\ne=65537\n\nphi=(p-1)*(q-1)\nd=gmpy2.invert(e,phi)\n\nc=pow(m,e,n)\nx=pow(n,e,c)\nprint(\"c =\",c)\nprint(\"e =\",e)\nprint(\"d =\",d)\nprint(\"x =\",x)\n'''\nc = 52453423663797600504896811946820841317615798875871627840172711423749946998217916744135290476795328543876098295227017753117609268701786914053599060330837226980969490439739651088710549890669593587642238827462108900683237797139569260570711611781514337884756698142193277516649805710242748531658979160170193283558\ne = 65537\nd = 54297831548863701092644190086258072883163378307246681513317422545902442650340916001357605211715836911877651782099787873046987096258918495734824011752504203578982947618784736181975847356304742402103468329660346526185908618978851982007496096394151821403282347897417590596861323293706611997134962231129075032641\nx = 40635864473997460751766935373772107585133301579524000836637683731949939348171187931595274511243052505604832873086269554842194695737052043633079044688826020656068356561856848814530947955429343483847291398607359454851926470168457852479044154798114087493843073091985855839008222762224952503563764527380033064437\n'''\n\n```\n\n这个已知的东西不少，我们的目的是通过这些已知数求出n，这是解题思路：\n\n![](C:/Users/ASUS/Pictures/Screenshots/屏幕截图 2024-10-17 190749.png)\n\n额，作为新手的我当然是看不懂的（但现在懂了，所以讲一下这东西：我们的目的是通过已知的2一些求出来n（感觉就是乘法逆元）然后，我写纸上了：\n\n![b8eefbff6ed3a5782e88320bf7441829](b8eefbff6ed3a5782e88320bf7441829.jpeg)\n\n大概，应该，也许，可能或者能看懂吧（思考，简单地说，这些东西的目的是为了得出他们之间的关系，而我们的目的从求出n变成求出a就可以了。\n\n怎么求出a？那当然是求出phic就好了，phic怎么求？那必须是byd的sage啊（sage还没弄，啊啊啊啊啊，CCCCCCCC，不急，小问题）\n\nphic是：\n$$\n要计算 \nϕ\n(\nc\n)\nϕ(c)，Euler Totient 函数的值，你可以按照以下步骤进行：\n\n对于一般的正整数 \nc\nc\n找出 \nc\nc 的质因数分解：\n设 \nc\nc 的质因数分解为：\nc\n=\np\n1\nk\n1\n×\np\n2\nk\n2\n×\n…\n×\np\nm\nk\nm\nc=p \n1\nk \n1\n​\n \n​\n ×p \n2\nk \n2\n​\n \n​\n ×…×p \nm\nk \nm\n​\n \n​\n \n其中，\np\n1\n,\np\n2\n,\n…\n,\np\nm\np \n1\n​\n ,p \n2\n​\n ,…,p \nm\n​\n  是 \nc\nc 的不同质因数。\n\n应用 Euler Totient 函数公式：\n根据质因数分解，Euler Totient 函数 \nϕ\n(\nc\n)\nϕ(c) 的计算公式为：\nϕ\n(\nc\n)\n=\nc\n(\n1\n−\n1\np\n1\n)\n(\n1\n−\n1\np\n2\n)\n…\n(\n1\n−\n1\np\nm\n)\nϕ(c)=c(1− \np \n1\n​\n \n1\n​\n )(1− \np \n2\n​\n \n1\n​\n )…(1− \np \nm\n​\n \n1\n​\n )\n$$\n简单地说就是质因数-1的乘积（思考）应该是\n\n```python\nfrom Crypto.Util.number import *\nimport gmpy2\n\nc = 52453423663797600504896811946820841317615798875871627840172711423749946998217916744135290476795328543876098295227017753117609268701786914053599060330837226980969490439739651088710549890669593587642238827462108900683237797139569260570711611781514337884756698142193277516649805710242748531658979160170193283558\ne = 65537\nd = 54297831548863701092644190086258072883163378307246681513317422545902442650340916001357605211715836911877651782099787873046987096258918495734824011752504203578982947618784736181975847356304742402103468329660346526185908618978851982007496096394151821403282347897417590596861323293706611997134962231129075032641\nx = 40635864473997460751766935373772107585133301579524000836637683731949939348171187931595274511243052505604832873086269554842194695737052043633079044688826020656068356561856848814530947955429343483847291398607359454851926470168457852479044154798114087493843073091985855839008222762224952503563764527380033064437\n\n#phic=(2-1)*(3-1)*(73-1)*(3967-1)*(6373-1)*(95592293-1)*(216465863-1)*(4744823012787277141-1)*(48245998253859255581546561942142167304434549996919484957120717763726325509833409296170471619434291990255044694414983821250538266717293535917534918221352198192885071310932646412147737114561229291373456448363184353049796801297876664512630305475226391199481032049429-1)\nphic=euler_phi(c)#要用sage\ndc=gmpy2.invert(e,phic)\na=pow(x,dc,c)\n\nprint(long_to_bytes(pow(c,d,a+c)))\n```\n\n## 12.exgcd（有点不懂，做题太少了，其实前面的也有很多不懂\n\n这是共模攻击的题，但是e1，e2不共素（所以没法直接套脚本（怒，但更改一下，其实差不多\n\n这是原题：\n\n```python\nfrom Crypto.Util.number import *\n\nflag=b'BaseCTF{}'\nm=bytes_to_long(flag)\n\np=getPrime(1024)\nq=getPrime(1024)\n\nn=p*q\ne1=3747\ne2=2991\n\nc1=pow(m,e1,n)\nc2=pow(m,e2,n)\n\nprint(\"n =\",n)\nprint(\"e1 =\",e1)\nprint(\"e2 =\",e2)\nprint(\"c1 =\",c1)\nprint(\"c2 =\",c2)\n\n\"\"\"\nn = 27855350163093443890983002241607629119744539643165776358993469078731521668677421483556132628708836721737685936980427467856642738196111748018522018598646125626995613169001111504706363742194664774823604738939411512861441742683157275818500991834651769368178320088982759626122029956515159435424882855075032400667120376075618896752694718491438251810609878021717559466498493103257912108879328270813061231904227056671621363669388496383136964549879459562004569059185078204867346250733489663015417879915436157806942021693920206071715538430633494012923651469196048546309592946901609803631751035364478773126967010589504275776307\ne1 = 3747\ne2 = 2991\nc1 = 24426579024062518665031958216110619832653602343205488454298659533869220501923184793828421371206493659949730138867555889074137026401207985428160803910695088081370233571905915349589146504374710444468715701305061060934519410886010929009297226496448218819742287990364436349188987723637449590579092391100714056589967894609950537021838172987840638735592599678186555961654312442380755963257875487240962193060914793587712733601168204859917001269928487633954556221987632934190217367502677285906521385169669644977192556145782303526375491484736352799180747403161343130663661867413380222714012960607473395828938694285120527085083\nc2 = 6932145147126610816836065944280934160173362059462927112752295077225965836502881335565881607385328990881865436690904056577675885697508058289570333933837515526915707121125766720407153139160751343352211421901876051228566093038929625042619250168565502734932197817082848506826847112949495527533238122893297049985517280574646627011986403578166952789317461581409161873814203023736604394085875778774834314777046086921852377348590998381648241629124408514875110073073851913857329679268519229436092660959841766848676678740851087184214283196544821779336090434587905158006710112461778939184327386306992082433561460542130441825293\n\"\"\"\n```\n\n$$\nc_1=m^{e1}\\mod n\\\\ c_2=m^{e2}\\mod n\\\\ 通过扩展欧几里得计算：s_1*e_1+s_2*e_2=s\\\\ c_1^{s_1}*c_2^{s_2}=m^{s_1*e_1+s_2*e_2}=m^s\n最后得到的是m^{gcd(e1,e2)}，最后开个根即可\n$$\n\n看公式感觉还行，但题解：**我直接在代码注释说想法了**\n\n补充一下：**最终的乘积再次对 n 取模，确保结果 m 范围在有效的明文范围内。**\n\n至于为什么采用pow(c,s,n)而不是pow(c,s)的原因：**==使用模运算是确保计算正确性、避免溢出以及与 RSA 加密定义保持一致的必要步骤。这也是为什么在实现中要特别强调使用模运算的原因。==**\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\nn = 27855350163093443890983002241607629119744539643165776358993469078731521668677421483556132628708836721737685936980427467856642738196111748018522018598646125626995613169001111504706363742194664774823604738939411512861441742683157275818500991834651769368178320088982759626122029956515159435424882855075032400667120376075618896752694718491438251810609878021717559466498493103257912108879328270813061231904227056671621363669388496383136964549879459562004569059185078204867346250733489663015417879915436157806942021693920206071715538430633494012923651469196048546309592946901609803631751035364478773126967010589504275776307\ne1 = 3747\ne2 = 2991\nc1 = 24426579024062518665031958216110619832653602343205488454298659533869220501923184793828421371206493659949730138867555889074137026401207985428160803910695088081370233571905915349589146504374710444468715701305061060934519410886010929009297226496448218819742287990364436349188987723637449590579092391100714056589967894609950537021838172987840638735592599678186555961654312442380755963257875487240962193060914793587712733601168204859917001269928487633954556221987632934190217367502677285906521385169669644977192556145782303526375491484736352799180747403161343130663661867413380222714012960607473395828938694285120527085083\nc2 = 6932145147126610816836065944280934160173362059462927112752295077225965836502881335565881607385328990881865436690904056577675885697508058289570333933837515526915707121125766720407153139160751343352211421901876051228566093038929625042619250168565502734932197817082848506826847112949495527533238122893297049985517280574646627011986403578166952789317461581409161873814203023736604394085875778774834314777046086921852377348590998381648241629124408514875110073073851913857329679268519229436092660959841766848676678740851087184214283196544821779336090434587905158006710112461778939184327386306992082433561460542130441825293\ns,s1,s2=gcdext(e1,e2)\n\nm=(pow(c1,s1,n)*pow(c2,s2,n))%n  #不会，但是按照自己理解写写吧：pow（c,s,n）=c**smod n=c**s，因为之前已经mod过n了所以值不会变，最后%n是为了规定m在模n的范围内，最后正常求就好？再看看吧，不会的太多了\n\nprint(long_to_bytes(iroot(m,s)[0]))\t\t#用[0]是为了保证为整数\n#b'BaseCTF{feb7e1ae-a8f7-4fc4-8d6d-945a45cc3f6d}'\n```\n\n正常情况下共模攻击应该是互素的（思考，s=1就好了\n\n\n\n\n\n## 12.5额，由中国剩余定理（sage有，这个是解题脚本\n\n\n\n```python\ndef extended_gcd(a, b):\n    \"\"\" 返回 (gcd, x, y) 使得 ax + by = gcd \"\"\"\n    if a == 0:\n        return (b, 0, 1)\n    gcd, x1, y1 = extended_gcd(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return (gcd, x, y)\n\ndef mod_inverse(a, m):\n    \"\"\" 计算 a 在模 m 下的逆元 \"\"\"\n    gcd, x, _ = extended_gcd(a, m)\n    if gcd != 1:\n        raise ValueError(\"Inverse does not exist\")\n    return x % m\n\ndef chinese_remainder_theorem(c1, c2, n1, n2):\n    \"\"\" 根据中国剩余定理计算 m \"\"\"\n    # 验证 c1 和 c2 的合法性\n    if not (0 <= c1 < n1) or not (0 <= c2 < n2):\n        raise ValueError(\"c1 must be less than n1 and c2 must be less than n2\")\n    \n    # 计算 n1 和 n2 的逆元\n    n1_inv = mod_inverse(n1, n2)\n    n2_inv = mod_inverse(n2, n1)\n\n    # 根据 CRT 的公式计算 m\n    m = (c1 * n2 * n2_inv + c2 * n1 * n1_inv) % (n1 * n2)\n\n    return m\n\n# 示例\nc1 = 2  # 例：m % n1\nc2 = 3  # 例：m % n2\nn1 = 5  # 模数 n1\nn2 = 7  # 模数 n2\n\nm = chinese_remainder_theorem(c1, c2, n1, n2)\nprint(\"The value of m is:\", m)\n```\n\n\n\n\n\n\n\n## 13.winner？\n\n这个就是维纳攻击。\n\n维纳攻击大概就是根据连分数找到你想要得到的值。\n\n\n\n```python\n维纳攻击的原理\n维纳攻击主要依赖于连分数的性质和定理。连分数是一个数的连续分式展开，通过计算一个数（如e/N）的连分数，可以找到与这个数近似的两个数的比值（如k/d）。在RSA算法中，当满足一定条件时（如私钥d很小或公钥指数e过大），可以通过对e/N的连分数展开来找到对应的k/d，进而分解出N的两个质因数p和q，最终恢复出私钥d。\n\n维纳攻击的应用条件\n维纳攻击并不是对所有的RSA加密都有效，它主要适用于以下情况：\n\n私钥d的约数数量较小，或者d本身很小。\n公钥指数e过大或过小，特别是当e与N（即p和q的乘积）的比值接近某个整数的倒数时。\n在这些条件下，维纳攻击能够利用连分数的性质快速推断出私钥d的值。\n\n维纳攻击的意义\n维纳攻击的存在揭示了RSA算法在特定条件下的脆弱性。它提醒我们在设计和使用RSA加密系统时，需要合理选择公钥和私钥的参数，以避免被维纳攻击等数学方法破解。同时，维纳攻击也为密码学领域的研究提供了重要的思路和启示，推动了密码学的发展和进步。\n\n综上所述，密码学中的维纳攻击是为了解决RSA公钥加密算法在特定条件下的安全问题，通过数学方法恢复出私钥d，从而实现对密文的解密。\n```\n\n但是很遗憾，这题并不是主要适用条件之一\n\n这一题主要是根据他给的PQ关系和leak来判断是否适用维纳攻击，以及对PQ的求解\n\n这是原题：\n\n==哦，对了，没错这一题又要用sage，没错，我还是没弄好sage（悲上加悲==\n\n```py\nfrom Crypto.Util.number import *\nimport decimal\nflag=b\"BaseCTF{}\"\nm = bytes_to_long(flag)\n\n\np = getPrime(1024)\nq = getPrime(1024)\nn=p*q\n\ne=65537\nc=pow(m,e,n)\n\nprint(\"e =\",e)\nprint(\"c =\",c)\n\ndecimal.getcontext().prec = 648\nP=decimal.Decimal(p)\nQ=decimal.Decimal(q)\nleak=decimal.Decimal((3*P*Q-1)/(3*Q*Q))\nprint(\"leak =\",leak)\n\n\"\"\"\ne = 65537\nc = 11032748573623426359632659657114807044712138586316710250985606809252700461490504487308849626514319062562557448839550994242999334882617031487618174168038491566640081840111747765753878087564318833273878755416584962921669911444225959335274753391800995531023212276838665202257007640354237043291129197348884914956663597240094662207929658519596987351984403258345205873566463643624175318315064440456858013874962784792564480286904620663695194689839431808082976248378509181327101557380978849545906691903896662095520288964101796965095129861467059775556110616007889846240936219381379219605528051627402300580239311202137582442057\nleak = 0.829374344780877053838760251345359097311540811993463349625630085472892814959843248358036249898871908548743719153319438638517170060651237635838827482534816419091949205584951292517303330452910012749674475329235689229498752425379611083979518257734473992186831474208400813283887045691145481237726578827559198828469462343342343287720369159899636816373592067698883361360269728719786071024354151682314608072902347335691012713629816579496252896260869382806838857194293618332286500427694077400072428506897829689703872985954772105672992293334668485358785863779749153981721900135318166811250762946069962348114491411585418993494561587403918162681937152503739843\n\"\"\"\n```\n\n这是官方题解思路：\n$$\nleak=\\frac{3*P*Q-1}{3*Q*Q}\\\\ leak=\\frac{P}{Q}-\\frac{1}{3*Q^2}\\\\ \\left|leak-\\frac{P}{Q}\\right|=\\frac{1}{3*Q^2}<\\frac{1}{2*Q^2}\\\\ 之后计算leak的连分数，即可得到p和q\n$$\n但官方代码我看不懂，不过还是贴出来吧：\n\n```python\ne = 65537\nc = 11032748573623426359632659657114807044712138586316710250985606809252700461490504487308849626514319062562557448839550994242999334882617031487618174168038491566640081840111747765753878087564318833273878755416584962921669911444225959335274753391800995531023212276838665202257007640354237043291129197348884914956663597240094662207929658519596987351984403258345205873566463643624175318315064440456858013874962784792564480286904620663695194689839431808082976248378509181327101557380978849545906691903896662095520288964101796965095129861467059775556110616007889846240936219381379219605528051627402300580239311202137582442057\nleak = 0.829374344780877053838760251345359097311540811993463349625630085472892814959843248358036249898871908548743719153319438638517170060651237635838827482534816419091949205584951292517303330452910012749674475329235689229498752425379611083979518257734473992186831474208400813283887045691145481237726578827559198828469462343342343287720369159899636816373592067698883361360269728719786071024354151682314608072902347335691012713629816579496252896260869382806838857194293618332286500427694077400072428506897829689703872985954772105672992293334668485358785863779749153981721900135318166811250762946069962348114491411585418993494561587403918162681937152503739843\nfrom Crypto.Util.number import *\ncf = continued_fraction(leak)\nconvers = cf.convergents()\nfor pkd in convers:\n    # possible k, d\n    pp, pq = pkd.as_integer_ratio()\n    pp=int(pp)\n    if pp.bit_length()==1024 and isPrime(pp):\n        flag=long_to_bytes(int(pow(c,inverse(e,pp-1),pp)))\n        if b'Base' in flag:\n            print(flag)\n            break\n#b'BaseCTF{9431ee53-5d5c-4b0b-956f-1eafff6c9e87}'\n```\n\n来看看石氏是时试师傅的题解，这个我能看懂：**哦，对了，能看懂不等于我会**\n\n这个是先将leak用连分数表示\n\ncf.numerator(i)是取对应次数的连分数的分子\n\ncf.denominator(i)是取对应次数的连分数的分母\n\n而符合质数的分子分母就是对应的p和q，然后常规解题即可\n\n```py\ncf = continued_fraction(leak)\nfor i in range(1000):\n    k = cf.numerator(i)\n    x = cf.denominator(i)\n    if isPrime(x) and is_prime(k):\n        print(k,x)\n        p,q = k,x\n        break\n \nlong_to_bytes(int(pow(c,inverse_mod(e,(p-1)*(q-1)),p*q)))\nb'BaseCTF{9431ee53-5d5c-4b0b-956f-1eafff6c9e87}'     \n```\n\n\n\n## 14、没有n啊pro\n\n原题：（直接搬了，懒了）\n\n```python\nfrom Crypto.Util.number import *\nimport gmpy2\n\nflag=b'BaseCTF{}'\nm=bytes_to_long(flag)\np=getPrime(128)\nq=getPrime(128)\n\nn=p*q\ne=65537\n\nphi=(p-1)*(q-1)\nd=gmpy2.invert(e,phi)\n\nassert d<phi\n\nc=pow(m,e,n)\nprint(\"c =\",c)\nprint(\"e =\",e)\nprint(\"d =\",d)\n\"\"\"\nc = 78919950899709764543039048006935881842075789773495004639436106636461009323420\ne = 65537\nd = 13002488326322253055272696035053386340217207134816593767440035447757509399233\n\"\"\"\n```\n\n根据题目判断phi为256位，已知c,d,e的话，我们可以根据d=pow(e,-1,phi)      //d=gmpy2.invert(e,phi)列出可能的phi的值然后进行爆破\n\n应该和第十一题没有n啊差不多，不对貌似，啊啊啊啊，被折磨了，晚上问仙贝吧\n\n\n\n看得懂官方咋解的了，先放这吧：（写的有注释，能看懂应该）\n\n```python\n# -*- coding: utf-8 -*-\nimport itertools\nfrom Crypto.Util.number import *\nimport gmpy2\nfrom more_itertools import factor\nfrom sympy import isprime\n\nc = 78919950899709764543039048006935881842075789773495004639436106636461009323420\ne = 65537\nd = 13002488326322253055272696035053386340217207134816593767440035447757509399233\n\np_bits=128\nq_bits=128\ndef get_phi(e, d):\n    k_phi = e*d -1\n    result = []\n    for k in range(e,2,-1):\n        if k_phi % k == 0:\n            tmp = k_phi // k\n            if int(tmp).bit_length()==p_bits+q_bits:\n                result.append(tmp)\n    return result\ndef main():\n    phi_list = get_phi(e,d)  \n    count = len(phi_list)\n    print(f\"有{count}个可能的\")\n    count = 0\n    for phi in phi_list:\n        count += 1\n        print(f'{count}尝试爆破 {phi}')\n        # factors 通常是一个列表，其中每个元素都是一个元组，元组的第一个值是质因子，第二个值是该质因子的幂。\n        factors = factor(phi)  \n        result = []\n        # 这是将factors元组改为全部是由质因子组成的列表\n        for i in factors:\n            num, times = int(i[0]), i[1]\n            result += [num] * times\n        # 进行简单的检查\n        if len(factors)>1:\n            s = set()\n            # 形成唯一的质因子组合\n            for r in range(1, len(result) + 1):\n                combination = list(itertools.combinations(result, r))\n                for i in combination:\n                    s.add(i)\n            ans=[]\n            # 遍历所有质因子组合进行相乘得到可能的p-1\n            for i in s:\n                tmp=1\n                for j in i:\n                    tmp=tmp*j\n                ans.append(tmp)\n            # 对可能的p-1进行验证\n            for num in ans:\n                if int(num+1).bit_length()==p_bits and isprime(num+1):\n                    p = num+1\n                    q = phi // num + 1\n                    if isprime(q):\n                        n = p * q\n                        flag=long_to_bytes(int(pow(c,d,n)))\n                        if b'BaseCTF' in flag:\n                            print(flag)\n                            return\n\n\nif __name__ == '__main__':\n    main()\n```\n\n\n\n## 15、哎呀数据丢失了\n\n这题涉及了证书分析，虽然是最简单的证书分析，但我还是不会，但在gouql以及Naby师傅的讲解下会了一点，所以写写\n\n看懂这个文章，这一题大概就会了：[手撕PEM密钥（RSA） | Tover's Blog](https://tover.xyz/p/pem-by-hand/)   （里面的hex是十六进制并非是二进制）\n\n```\n说几句证书相关的关键点，一般来说手撕确实的证书分析就是把数据base64解密一下再转十六进制分析。\n接下来就是找02开头的数据，然后看02后面的数据是不是跟着长度（一般根据n的bits来判断）\n如果不对，那就从新开始，删去第一个字符在进行base64解密，依次反复知道正确。\n```\n\n原题：\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\nfrom Crypto.PublicKey import RSA\n\nflag=b\"\"\nm=bytes_to_long(flag)\n\nrsa=RSA.generate(1024)\n\n\nc=pow(m,rsa.e,rsa.n)\n\nwith open(\"out\",'wb') as f:\n    f.write(long_to_bytes(c))\n\nprivate_key=rsa.exportKey(\"PEM\")\nwith open(\"pri.pem\",'wb') as f:\n    f.write(private_key)\n\n```\n\n\n\n其中关键点在于：\n\n```python\n1、对base64数据进行hex转化，这个工具有。其中如果转化失败可以删除末位或首位（我不晓得咋判别，只能建议自己先试末位）\n2、30就是Sequence的tag，82就是说接下来后两个bytes是这个Sequence的长度，即0x025d个bytes，也就是剩下全部都是。接着的020100就是整数0，其中02是整数的tag，01是这个整数占1byte，00是value同样的方法也可以解02818100a0...和后面其他整数（其实生成的私钥PEM只有整数-）\n3、接下来就是正常的rsa解密，但是我没看懂为什么要用out（悲，教教我）\n此证书解密获得数据顺序：\n3082025d  \t# Begin Sequence: len=0x025d\n\n0201  \t\t# Version: (len=0x01)\n00\n\n028181\t\t# n: (len=0x81)\n00a0d154d5bf97c40f7797b44819d09c608fa4b5c38e70d83bc13267138c6eff4c1aacefe3ddb571e1b41d911c7ab6136cf90493189563450e1f4270cabbc4207c54c4da7b84a20311cfbbabe82b9fe60bdf48a08d57839d0cdf9464d84262bcc06bc308095a6987f60ad07d669a312b5a7e4133213788eecf25863248b91349ef\n\n0203\t\t# e: (len=0x03)\n010001\n\n028180\t\t# d: (len=0x80)\n0f8270c496903bf3e3ec4912450f15edc81cb1fcf4b154615aee11fbd428e64d402b5a8d66d5f770358f3e6df935b324e8d5349c83d7c992a5982249a31734acb1db19c4c8d829267514bc1ef7bbfbe242d4350f67a002a56d33e56d1a94adc71c68f020dc39ab7d0064c111b164e26ba0698dc94a03cdfd516ffd966e877949\n\n0241\t\t# p: (len=0x41)\n00ca97e49c058237f96e99118ce383f91912cba1163de9236181ff754ef3ef1a260fac8d2d9aee866d51a8b6836983b05\n```\n\n题解：\n\n```python\nfrom Crypto.Util.number import *\nfrom gmpy2 import *\nfrom Crypto.PublicKey import RSA\n\nn=0x00BD278484122AEF9A69EC647290219DED06EDD2B7611721B326850B2F5060DAEED7694356667C479CA9CCB6969F4FBE6DC7FA6759ACA21D8A96A881A8E4A0217732757E649D503191511FA96DA42ED1DA2FA3BC8C9C65FBD9C0DD6F430359AC45E455D32C5B0EA29D21E647FF80E50ABCBB80F76ADB67007A04E85DBAEB4C8F1D\ne=0x010001\nd=0x2265E355593071AE3501062B4746B5BF7AF918CEBC5B46879BC3AA0B0AA4F26B68C4FDB7E29F4B2E943A6421F40ABE689C6B4F0C21B6C184886D5056F46CA26908540EC07B82AD47E667971A01FAC6162E93A7FC61AED5660F826AEBA34D78ACCD18FC59E7921701F10FF51D52883706B864287CFDB34E309C93829D29D867C9\n\nwith open(\"G:\\out\",'rb') as f:\n    c=f.read()\n    m=bytes_to_long(c)\n    print(long_to_bytes(pow(m,d,n)))\n\n'''30\n82 025C\n0201 00\n02 81 81 00BD278484122AEF9A69EC647290219DED06EDD2B7611721B326850B2F5060DAEED7694356667C479CA9CCB6969F4FBE6DC7FA6759ACA21D8A96A881A8E4A0217732757E649D503191511FA96DA42ED1DA2FA3BC8C9C65FBD9C0DD6F430359AC45E455D32C5B0EA29D21E647FF80E50ABCBB80F76ADB67007A04E85DBAEB4C8F1D\n02 03 010001\n02 81 80 2265E355593071AE3501062B4746B5BF7AF918CEBC5B46879BC3AA0B0AA4F26B68C4FDB7E29F4B2E943A6421F40ABE689C6B4F0C21B6C184886D5056F46CA26908540EC07B82AD47E667971A01FAC6162E93A7FC61AED5660F826AEBA34D78ACCD18FC59E7921701F10FF51D52883706B864287CFDB34E309C93829D29D867C9\n02 4100C6\n\n02 81 80 2265e355593071ae3501062b4746b5bf7af918cebc5b46879bc3aa0b0aa4f26b68c4fdb7e29f4b2e943a6421f40abe689c6b4f0c21b6c184886d5056f46ca26908540ec07b82ad47e667971a01fac6162e93a7fc61aed5660f826aeba34d78accd18fc59e7921701f10ff51d52883706b864287cfdb34e309c93829d29d867c9\n'''\n```\n\n","tags":["CTF","密码","入门"],"categories":["CTF","密码"]}]